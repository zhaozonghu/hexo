{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1496718676617},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1496718676617},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1496718676618},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1496718676619},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1496718676619},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1496718676619},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1496718676619},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1496718676620},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1496718676620},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1496718676621},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1496718676620},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1496718676621},{"_id":"themes/next/bower.json","hash":"936b9aed1934471bb74cdaacc3fb8031eb01fe23","modified":1496718676621},{"_id":"themes/next/_config.yml","hash":"5f1102153798043a3fe0f794a8a4c1807135dfcb","modified":1514959803419},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1496718676651},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1496718676622},{"_id":"source/categories/index.md","hash":"1b8c7721a93eaae810c337d552a5e27f328316f4","modified":1496744191171},{"_id":"source/about/index.md","hash":"3ab172f794fbd0687b8cc3bf002e436699e9c637","modified":1531120820991},{"_id":"source/tags/index.md","hash":"778187df8fa64dbdb653ad1e791e9e8ad081df6b","modified":1496737350438},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1496718676618},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"4de856de657a27f340f245eb491a1f52ceba1735","modified":1496718676618},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1496718676652},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1496718676652},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1496718676754},{"_id":"themes/next/source/favicon.ico","hash":"3951d27b4b9d1bc780654a0bf2b7267d06ec9b33","modified":1514962062668},{"_id":"source/_posts/axios.md","hash":"27d6e00597daf536604fa15550ad82db92c10137","modified":1516240433448},{"_id":"source/_posts/hello-world.md","hash":"05659f486fb31330242b5edeaa9cbef893ce51ce","modified":1496738502305},{"_id":"source/_posts/js-array.md","hash":"f8d1dd75b9bcda3bd3c22151ada563145218f6b8","modified":1522722675543},{"_id":"source/_posts/IOS-click-bug.md","hash":"7c791774af1110e5107391c6afc6996dffa05c4f","modified":1496891032179},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1496718676755},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1496718676755},{"_id":"source/_posts/gulp.md","hash":"fb8bc7565eb9ebb48d5b6d0b4b078f1190aca7a9","modified":1500511734926},{"_id":"source/_posts/sky-nine.md","hash":"13c02e832c16744e54016d54caaebee08c2a97e7","modified":1496738206187},{"_id":"source/_posts/js-common-fun.md","hash":"4d9753ed9078683d4b82e5483d45c74bf3cf3119","modified":1504511547686},{"_id":"source/_posts/share.md","hash":"0325f5a2815ec2bf9e2b3882ce3c9a203db7a8b0","modified":1517888394231},{"_id":"source/_posts/js-open-app.md","hash":"82b1542011bdcf2d3c5bb96fb5256af69a89402a","modified":1498117834045},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1496718676622},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1496718676623},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1496718676623},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1496718676623},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1496718676622},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1496718676624},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1496718676624},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1496718676624},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1496718676625},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1496718676625},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1496718676625},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1496718676626},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496718676691},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1496718676626},{"_id":"source/_posts/web-app.md","hash":"d6df1e6f690796caa1dd87cb3c9795320097bcf2","modified":1522723501757},{"_id":"source/_posts/vs-code-plugins.md","hash":"53b6e184b8b503d78feb92655105f65b4477eea2","modified":1522722881939},{"_id":"source/_posts/xlsx.md","hash":"b846891c1a9e77bbe4535ce49beb6f0562b1378b","modified":1499820381663},{"_id":"themes/next/layout/_layout.swig","hash":"dc531efc463e30fe50df721d28fd8eed14acfe28","modified":1514960288679},{"_id":"themes/next/layout/schedule.swig","hash":"8086f1163b10460258ecbbbe48b057b22bb2f02e","modified":1496718676650},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1496718676650},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1496718676650},{"_id":"themes/next/layout/category.swig","hash":"f315f12651de8065fdad73b003da4335ef177173","modified":1496718676649},{"_id":"themes/next/layout/archive.swig","hash":"a1d1e91013baaaeb7deaf35c6d3975971ce38e02","modified":1496718676649},{"_id":"themes/next/layout/tag.swig","hash":"cc9878932580c890f8f3e569225e29bb37e25b49","modified":1496718676651},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1496718676653},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1496718676653},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1496718676653},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1496718676653},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1496718676654},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1496718676654},{"_id":"themes/next/scripts/tags/note.js","hash":"fc4958427ca7bdb47a7d830077f432ed824973e4","modified":1496718676655},{"_id":"themes/next/layout/page.swig","hash":"22ba721a9688d490fc66f360e5a319288b63b05a","modified":1496718676650},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1496718676691},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1496718676692},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1496718676694},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1496718676694},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1496718676695},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496718676695},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1496718676694},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1496718676693},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1496718676693},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1496718676627},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1496718676627},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496718676695},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1496718676695},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1496718676628},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1496718676628},{"_id":"themes/next/layout/_macro/post.swig","hash":"6f3c6078b9dbc238ccf86fb228c24c0b94f67d47","modified":1496718676628},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1496718676645},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1496718676645},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1496718676645},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1496718676646},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1496718676646},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1496718676646},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1496718676696},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1496718676696},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1496718676696},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1496718676629},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1496718676636},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1496718676635},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5258c03149aa18e9abfeb8de10e435a406d9c924","modified":1496718676630},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1496718676638},{"_id":"themes/next/layout/_partials/head.swig","hash":"09b110f77c415c5b71ebd886771a10bc84b95633","modified":1496718676631},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"140ba2ac5720caa0215739b516df8d4b638d81d0","modified":1507510542943},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1496718676632},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1496718676632},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1496718676632},{"_id":"themes/next/layout/_partials/footer.swig","hash":"886b4604a89424fda901a99df50820724b22772f","modified":1497843115038},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1496718676629},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1496718676632},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1496718676697},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1496718676697},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1496718676698},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1496718676698},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1496718676698},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1496718676699},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1496718676699},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1496718676700},{"_id":"themes/next/source/js/src/utils.js","hash":"13cf2cda0b34e228b3d3489c115418e480b02d04","modified":1496310364358},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496718676689},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496718676690},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496718676679},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496718676680},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496718676681},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1496718676707},{"_id":"themes/next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1496718676699},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1496718676700},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"68db2c0bf1064176627199394f25f6dc37ea23ad","modified":1496718676711},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1496718676711},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1496718676711},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496718676637},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496718676637},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1496718676718},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1496718676710},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1496718676718},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1496718676719},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1496718676735},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1496718676739},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1496718676740},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1496718676718},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1496718676739},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1496718676739},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1496718676740},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1496718676741},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1496718676740},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1496718676741},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1496718676742},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1496718676742},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1496718676741},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1496718676741},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1496718676736},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1496718676736},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1496718676737},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1496718676743},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1496718676738},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1496718676721},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1496718676720},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1496718676721},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1496718676722},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1496718676722},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1496718676679},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1496718676737},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1496718676738},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1496718676742},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1496718676689},{"_id":"themes/next/source/images/avatar.gif","hash":"8f63b46aa08dd7507eb240b821d35f5af85005c8","modified":1514961808880},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1496718676680},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1496718676690},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1496718676639},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1496718676638},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"56d5bff6b4eef0b00fc4a1031722760a5c35f348","modified":1514959968014},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1496718676640},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1496718676640},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1514960129805},{"_id":"themes/next/source/css/_variables/base.styl","hash":"9481c7d3f6b012d815860ddae2c54191b12cae2d","modified":1496819342328},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1496718676641},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1496718676641},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1496718676641},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1496718676642},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1496718676642},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1496718676642},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1496718676643},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1496718676640},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1496718676644},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1496718676643},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1496718676644},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1496718676649},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1496718676636},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1496718676637},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1496718676631},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1496718676631},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1496718676633},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1496718676633},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1496718676633},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"c75024151fc63220e7d01035d8a1aff9affdecc7","modified":1496718676644},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"e9d78e6b971a26adb34c8b3a0b052e0c113289ff","modified":1514960283986},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1496718676744},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1496718676681},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1496718676744},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1496718676743},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1496718676752},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1496718676750},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1496718676750},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1496718676736},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1496718676647},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1496718676753},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1496718676634},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1496718676634},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1496718676634},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1496718676635},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1496718676700},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1496718676648},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"a0c042a74ea1afcb19daac7e2604a2bc5495037b","modified":1496718676648},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1496718676720},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1496718676720},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1496718676753},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"95518d298d3c5c271faec2e4977df9e5dedd5d84","modified":1496718676705},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1496718676722},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1496718676724},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1496718676723},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1496718676706},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"1cd0a7b89cc87ed5d9c0c6205972cb05fc214369","modified":1490430950000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1496718676749},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1496718676677},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1496718676678},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1496718676749},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1496718676677},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1496718676687},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1496718676687},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1496718676687},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1496718676688},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1496718676688},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1496718676689},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1496718676681},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1496718676682},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1496718676679},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1496718676682},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1496718676682},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1496718676683},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1496718676677},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"9e89310320ceed599badbd86e12a891bfa3503f0","modified":1496743735500},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1496718676683},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1496718676683},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1496718676656},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1496718676656},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1496718676657},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1496718676657},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1496718676657},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1496718676663},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1496718676671},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"0a475779cd5e28063a2ea01ee759e21a46290345","modified":1490430950000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"524cfca7b6ab135d81ea723d8de06fdf0dbe7e56","modified":1496718676704},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1496718676705},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1496718676685},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1496718676685},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1496718676685},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1496718676686},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1496718676686},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"0a475779cd5e28063a2ea01ee759e21a46290345","modified":1490430950000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1496718676733},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1496718676734},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1496718676702},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1496718676703},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1496718676703},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1496718676702},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1496718676647},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1496718676647},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1496718676752},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1496718676684},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1496718676684},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1496718676725},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1496718676727},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1496718676658},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1496718676658},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1496718676659},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1496718676660},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1496718676659},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1496718676658},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1496718676661},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1496718676662},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1496718676662},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1496718676662},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1496718676663},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1496718676668},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"c30dee7d64ea7724b4e39f1a5c698806607b1bb9","modified":1514960498582},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1496718676669},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1496718676669},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"5c599235e3a861d299e1760508d772c04262ab6f","modified":1496890287413},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1496718676670},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1496718676670},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1496718676670},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1496718676661},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1496718676663},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1496718676664},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1496718676665},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1496718676665},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1496718676671},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1496718676733},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1496718676665},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"368b2b91545ff0dc5ad3c1dc9b3f9fd8045fad38","modified":1496890949208},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"658accf8e196721f295003da66941e6d1f7b81b0","modified":1496718676666},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1496718676666},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1496718676667},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1496718676666},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"268c9704481fdb0b4d1e646196386143990fe235","modified":1496718676668},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1496718676667},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bc08cfb2ef2ff44ba3fc7dffdb2deb01a9d17d15","modified":1496718676668},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1496718676672},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1496718676667},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1496718676667},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1496718676665},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1496718676672},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1496718676673},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1496718676674},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1496718676672},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1496718676673},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1496718676675},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74019008ba973ab30f0f4a6b3c2cd33c66d3a4b4","modified":1496718676673},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1496718676676},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"eb45ee16051624c6e36a274c0a9538e961f10c4d","modified":1496718676676},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1496718676676},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1496718676686},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1496718676675},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1496718676675},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1496718676675},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1496718676709},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"352f6a4d2b6c38cd9e60d269124d9750aab264c0","modified":1496743945318},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1496718676674},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1496718676748},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1496718676731}],"Category":[{"name":"javascript","_id":"cjjdxow6u0005p8rr4ouezw6v"},{"name":"个人随笔","_id":"cjjdxow6y0009p8rrn4qou726"},{"name":"web","_id":"cjjdxow7i000sp8rrp0kfpw5i"},{"name":"动漫","_id":"cjjdxowaw000yp8rrftuzfz0v"},{"name":"tools","_id":"cjjdxowbk001jp8rrl7roeayl"}],"Data":[],"Page":[{"title":"分类","date":"2017-06-06T06:50:17.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-06-06 14:50:17\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-06-06T10:16:31.171Z","path":"categories/index.html","layout":"page","_id":"cjjdxovzq0000p8rr86zuez7t","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-06-06T08:22:30.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-06-06 16:22:30\n---\n","updated":"2017-06-06T08:22:30.438Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjjdxovzr0001p8rr4sznakfw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于我","date":"2017-06-06T06:50:32.000Z","_content":"WEB前端攻城狮一枚，喜欢研究一些新技术。\n\n来自四川广元，现居宁波。\n\n开发技能：html（html5）、css（css3）、javascript（jquery、zepot）、vue\n\n常用工具：webstorem、photoshop、phpstudy、版本控制（svn、git）、gulp（构建工具）\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-06-06 14:50:32\n---\nWEB前端攻城狮一枚，喜欢研究一些新技术。\n\n来自四川广元，现居宁波。\n\n开发技能：html（html5）、css（css3）、javascript（jquery、zepot）、vue\n\n常用工具：webstorem、photoshop、phpstudy、版本控制（svn、git）、gulp（构建工具）\n\n","updated":"2018-07-09T07:20:20.991Z","path":"about/index.html","_id":"cjjdxovzs0002p8rrswjr7sai","comments":1,"layout":"page","content":"<p>WEB前端攻城狮一枚，喜欢研究一些新技术。</p>\n<p>来自四川广元，现居宁波。</p>\n<p>开发技能：html（html5）、css（css3）、javascript（jquery、zepot）、vue</p>\n<p>常用工具：webstorem、photoshop、phpstudy、版本控制（svn、git）、gulp（构建工具）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>WEB前端攻城狮一枚，喜欢研究一些新技术。</p>\n<p>来自四川广元，现居宁波。</p>\n<p>开发技能：html（html5）、css（css3）、javascript（jquery、zepot）、vue</p>\n<p>常用工具：webstorem、photoshop、phpstudy、版本控制（svn、git）、gulp（构建工具）</p>\n"}],"Post":[{"title":"axios","_content":"#### 安装\n\n1、 利用npm安装npm install axios --save\n2、 利用bower安装bower install axios --save\n3、 直接利用cdn引入<code>< script src=\"https://unpkg.com/axios/dist/axios.min.js\">< /script></code>\n\n<!--more-->\n\n#### 实例\n\n1、 发送一个GET请求\n\n    //通过给定的ID来发送请求\n    axios.get('/user?ID=12345')\n    .then(function(response){\n        console.log(response);\n    })\n    .catch(function(err){\n        console.log(err);\n    });\n    //以上请求也可以通过这种方式来发送\n    axios.get('/user',{\n    params:{\n        ID:12345\n    }\n    })\n    .then(function(response){\n    console.log(response);\n    })\n    .catch(function(err){\n    console.log(err);\n    });\n\n2、 发送一个POST请求\n\n    axios.post('/user',{\n    firstName:'Fred',\n    lastName:'Flintstone'\n    })\n    .then(function(res){\n    console.log(res);\n    })\n    .catch(function(err){\n    console.log(err);\n    });\n\n3、 一次性并发多个请求\n\n    function getUserAccount(){\n    return axios.get('/user/12345');\n    }\n    function getUserPermissions(){\n    return axios.get('/user/12345/permissions');\n    }\n    axios.all([getUserAccount(),getUserPermissions()])\n    .then(axios.spread(function(acct,perms){\n        //当这两个请求都完成的时候会触发这个函数，两个参数分别代表返回的结果\n    }));\n\n#### axios的API\n\n1、 axios可以通过配置（config）来发送请求\n    \naxios(config)\n\n    //发送一个`POST`请求\n    axios({\n        method:\"POST\",\n        url:'/user/12345',\n        data:{\n            firstName:\"Fred\",\n            lastName:\"Flintstone\"\n        }\n    });\n\naxios(url[,config])\n\n    //发送一个`GET`请求（默认的请求方式）\n    axios('/user/12345');\n\n2、 请求方式的别名，这里对所有已经支持的请求方式都提供了方便的别名\n\n    axios.request(config);\n\n    axios.get(url[,config]);\n\n    axios.delete(url[,config]);\n\n    axios.head(url[,config]);\n\n    axios.post(url[,data[,config]]);\n\n    axios.put(url[,data[,config]])\n\n    axios.patch(url[,data[,config]])\n\n    · 注意：当我们在使用别名方法的时候，url,method,data这几个参数不需要在配置中声明\n\n3、 并发请求（concurrency）,即是帮助处理并发请求的辅助函数\n\n    //iterable是一个可以迭代的参数如数组等\n    axios.all(iterable)\n    //callback要等到所有请求都完成才会执行\n    axios.spread(callback)\n\n4、创建一个axios实例，并且可以自定义其配置\n\naxios.create([config])\n\n    var instance = axios.create({\n    baseURL:\"https://some-domain.com/api/\",\n    timeout:1000,\n    headers: {'X-Custom-Header':'foobar'}\n    });\n\n实例的方法\n\n以下是实例方法，注意已经定义的配置将和利用create创建的实例的配置合并    \n\n    axios#request(config)\n\n    axios#get(url[,config])\n\n    axios#delete(url[,config])\n\n    axios#head(url[,config])\n\n    axios#post(url[,data[,config]])\n\n    axios#put(url[,data[,config]])\n\n    axios#patch(url[,data[,config]])\n    \n#### 请求的配置（request config）\n\n以下就是请求的配置选项，只有url选项是必须的，如果method选项未定义，那么它默认是以GET的方式发出请求\n\n    {\n    //`url`是请求的服务器地址\n    url:'/user',\n    //`method`是请求资源的方式\n    method:'get'//default\n    //如果`url`不是绝对地址，那么`baseURL`将会加到`url`的前面\n    //当`url`是相对地址的时候，设置`baseURL`会非常的方便\n    baseURL:'https://some-domain.com/api/',\n    //`transformRequest`选项允许我们在请求发送到服务器之前对请求的数据做出一些改动\n    //该选项只适用于以下请求方式：`put/post/patch`\n    //数组里面的最后一个函数必须返回一个字符串、-一个`ArrayBuffer`或者`Stream`\n    transformRequest:[function(data){\n        //在这里根据自己的需求改变数据\n        return data;\n    }],\n    //`transformResponse`选项允许我们在数据传送到`then/catch`方法之前对数据进行改动\n    transformResponse:[function(data){\n        //在这里根据自己的需求改变数据\n        return data;\n    }],\n    //`headers`选项是需要被发送的自定义请求头信息\n    headers: {'X-Requested-With':'XMLHttpRequest'},\n    //`params`选项是要随请求一起发送的请求参数----一般链接在URL后面\n    //他的类型必须是一个纯对象或者是URLSearchParams对象\n    params: {\n        ID:12345\n    },\n    //`paramsSerializer`是一个可选的函数，起作用是让参数（params）序列化\n    //例如(https://www.npmjs.com/package/qs,http://api.jquery.com/jquery.param)\n    paramsSerializer: function(params){\n        return Qs.stringify(params,{arrayFormat:'brackets'})\n    },\n    //`data`选项是作为一个请求体而需要被发送的数据\n    //该选项只适用于方法：`put/post/patch`\n    //当没有设置`transformRequest`选项时dada必须是以下几种类型之一\n    //string/plain/object/ArrayBuffer/ArrayBufferView/URLSearchParams\n    //仅仅浏览器：FormData/File/Bold\n    //仅node:Stream\n    data {\n        firstName:\"Fred\"\n    },\n    //`timeout`选项定义了请求发出的延迟毫秒数\n    //如果请求花费的时间超过延迟的时间，那么请求会被终止\n\n    timeout:1000,\n    //`withCredentails`选项表明了是否是跨域请求\n    \n    withCredentials:false,//default\n    //`adapter`适配器选项允许自定义处理请求，这会使得测试变得方便\n    //返回一个promise,并提供验证返回\n    adapter: function(config){\n        /*..........*/\n    },\n    //`auth`表明HTTP基础的认证应该被使用，并提供证书\n    //这会设置一个authorization头（header）,并覆盖你在header设置的Authorization头信息\n    auth: {\n        username:\"zhangsan\",\n        password: \"s00sdkf\"\n    },\n    //返回数据的格式\n    //其可选项是arraybuffer,blob,document,json,text,stream\n    responseType:'json',//default\n    //\n    xsrfCookieName: 'XSRF-TOKEN',//default\n    xsrfHeaderName:'X-XSRF-TOKEN',//default\n    //`onUploadProgress`上传进度事件\n    onUploadProgress:function(progressEvent){\n        //下载进度的事件\n    onDownloadProgress:function(progressEvent){\n    }\n    },\n    //相应内容的最大值\n    maxContentLength:2000,\n    //`validateStatus`定义了是否根据http相应状态码，来resolve或者reject promise\n    //如果`validateStatus`返回true(或者设置为`null`或者`undefined`),那么promise的状态将会是resolved,否则其状态就是rejected\n    validateStatus:function(status){\n        return status >= 200 && status <300;//default\n    },\n    //`maxRedirects`定义了在nodejs中重定向的最大数量\n    maxRedirects: 5,//default\n    //`httpAgent/httpsAgent`定义了当发送http/https请求要用到的自定义代理\n    //keeyAlive在选项中没有被默认激活\n    httpAgent: new http.Agent({keeyAlive:true}),\n    httpsAgent: new https.Agent({keeyAlive:true}),\n    //proxy定义了主机名字和端口号，\n    //`auth`表明http基本认证应该与proxy代理链接，并提供证书\n    //这将会设置一个`Proxy-Authorization` header,并且会覆盖掉已经存在的`Proxy-Authorization`  header\n    proxy: {\n        host:'127.0.0.1',\n        port: 9000,\n        auth: {\n        username:'skda',\n        password:'radsd'\n        }\n    },\n    //`cancelToken`定义了一个用于取消请求的cancel token\n    //详见cancelation部分\n    cancelToken: new cancelToken(function(cancel){\n\n    });\n    }\n\n#### 请求返回的内容\n\n    {\n    data:{},\n    status:200,\n    //从服务器返回的http状态文本\n    statusText:'OK',\n    //响应头信息\n    headers: {},\n    //`config`是在请求的时候的一些配置信息\n    config: {}\n    }\n\n你可以这样来获取响应信息\n\n    axios.get('/user/12345')\n    .then(function(res){\n        console.log(res.data);\n        console.log(res.status);\n        console.log(res.statusText);\n        console.log(res.headers);\n        console.log(res.config);\n    });\n\n#### 默认配置\n\n你可以设置默认配置，对所有请求都有效\n\n1、 全局默认配置\n\n    axios.defaults.baseURL = 'http://api.exmple.com';\n    axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n    axios.defaults.headers.post['content-Type'] = 'appliction/x-www-form-urlencoded';\n\n2、 自定义的实例默认设置\n\n    //当创建实例的时候配置默认配置\n    var instance = axios.create({\n        baseURL: 'https://api.example.com'\n    });\n\n    //当实例创建时候修改配置\n    instance.defaults.headers.common[\"Authorization\"] = AUTH_TOKEN;\n\n3、 配置中的有优先级\n\nconfig配置将会以优先级别来合并，顺序是lib/defauts.js中的默认配置，然后是实例中的默认配置，最后是请求中的config参数的配置，越往后等级越高，后面的会覆盖前面的例子。\n\n    //创建一个实例的时候会使用libray目录中的默认配置\n    //在这里timeout配置的值为0，来自于libray的默认值\n    var instance = axios.create();\n    //回覆盖掉library的默认值\n    //现在所有的请求都要等2.5S之后才会发出\n    instance.defaults.timeout = 2500;\n    //这里的timeout回覆盖之前的2.5S变成5s\n    instance.get('/longRequest',{\n    timeout: 5000\n    });\n\n#### 拦截器\n\n你可以在请求、响应在到达then/catch之前拦截他们\n\n    //添加一个请求拦截器\n    axios.interceptors.request.use(function(config){\n    //在请求发出之前进行一些操作\n    return config;\n    },function(err){\n    //Do something with request error\n    return Promise.reject(error);\n    });\n    //添加一个响应拦截器\n    axios.interceptors.response.use(function(res){\n    //在这里对返回的数据进行处理\n    return res;\n    },function(err){\n    //Do something with response error\n    return Promise.reject(error);\n    })\n\n取消拦截器\n\n    var myInterceptor = axios.interceptor.request.use(function(){/*....*/});\n    axios.interceptors.request.eject(myInterceptor);\n\n给自定义的axios实例添加拦截器\n\n    var instance = axios.create();\n    instance.interceptors.request.use(function(){})\n\n#### 错误处理\n\n    axios.get('/user/12345')\n    .catch(function(error){\n        if(error.response){\n        //请求已经发出，但是服务器响应返回的状态吗不在2xx的范围内\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.header);\n        }else {\n        //一些错误是在设置请求的时候触发\n        console.log('Error',error.message);\n        }\n        console.log(error.config);\n    });\n\n#### 取消\n\n你可以通过一个cancel token来取消一个请求\n你可以通过CancelToken.source工厂函数来创建一个cancel token\n\n    var CancelToken = axios.CancelToken;\n    var source = CancelToken.source();\n\n    axios.get('/user/12345',{\n    cancelToken: source.token\n    }).catch(function(thrown){\n    if(axios.isCancel(thrown)){\n        console.log('Request canceled',thrown.message);\n    }else {\n        //handle error\n    }\n    });\n\n    //取消请求（信息的参数可以设置的）\n    source.cance(\"操作被用户取消\");\n\n你可以给cancelToken构造函数传递一个executor function来创建一个cancel token:\n\n    var cancelToken = axios.CancelToken;\n    var cance;\n    axios.get('/user/12345',{\n    cancelToken: new CancelToken(function(c){\n        //这个executor函数接受一个cancel function作为参数\n        cancel = c;\n    })\n    })\n    //取消请求\n    cancel();\n","source":"_posts/axios.md","raw":"---\ntitle: axios\ncategories: javascript\ntags: [web,js]\n---\n#### 安装\n\n1、 利用npm安装npm install axios --save\n2、 利用bower安装bower install axios --save\n3、 直接利用cdn引入<code>< script src=\"https://unpkg.com/axios/dist/axios.min.js\">< /script></code>\n\n<!--more-->\n\n#### 实例\n\n1、 发送一个GET请求\n\n    //通过给定的ID来发送请求\n    axios.get('/user?ID=12345')\n    .then(function(response){\n        console.log(response);\n    })\n    .catch(function(err){\n        console.log(err);\n    });\n    //以上请求也可以通过这种方式来发送\n    axios.get('/user',{\n    params:{\n        ID:12345\n    }\n    })\n    .then(function(response){\n    console.log(response);\n    })\n    .catch(function(err){\n    console.log(err);\n    });\n\n2、 发送一个POST请求\n\n    axios.post('/user',{\n    firstName:'Fred',\n    lastName:'Flintstone'\n    })\n    .then(function(res){\n    console.log(res);\n    })\n    .catch(function(err){\n    console.log(err);\n    });\n\n3、 一次性并发多个请求\n\n    function getUserAccount(){\n    return axios.get('/user/12345');\n    }\n    function getUserPermissions(){\n    return axios.get('/user/12345/permissions');\n    }\n    axios.all([getUserAccount(),getUserPermissions()])\n    .then(axios.spread(function(acct,perms){\n        //当这两个请求都完成的时候会触发这个函数，两个参数分别代表返回的结果\n    }));\n\n#### axios的API\n\n1、 axios可以通过配置（config）来发送请求\n    \naxios(config)\n\n    //发送一个`POST`请求\n    axios({\n        method:\"POST\",\n        url:'/user/12345',\n        data:{\n            firstName:\"Fred\",\n            lastName:\"Flintstone\"\n        }\n    });\n\naxios(url[,config])\n\n    //发送一个`GET`请求（默认的请求方式）\n    axios('/user/12345');\n\n2、 请求方式的别名，这里对所有已经支持的请求方式都提供了方便的别名\n\n    axios.request(config);\n\n    axios.get(url[,config]);\n\n    axios.delete(url[,config]);\n\n    axios.head(url[,config]);\n\n    axios.post(url[,data[,config]]);\n\n    axios.put(url[,data[,config]])\n\n    axios.patch(url[,data[,config]])\n\n    · 注意：当我们在使用别名方法的时候，url,method,data这几个参数不需要在配置中声明\n\n3、 并发请求（concurrency）,即是帮助处理并发请求的辅助函数\n\n    //iterable是一个可以迭代的参数如数组等\n    axios.all(iterable)\n    //callback要等到所有请求都完成才会执行\n    axios.spread(callback)\n\n4、创建一个axios实例，并且可以自定义其配置\n\naxios.create([config])\n\n    var instance = axios.create({\n    baseURL:\"https://some-domain.com/api/\",\n    timeout:1000,\n    headers: {'X-Custom-Header':'foobar'}\n    });\n\n实例的方法\n\n以下是实例方法，注意已经定义的配置将和利用create创建的实例的配置合并    \n\n    axios#request(config)\n\n    axios#get(url[,config])\n\n    axios#delete(url[,config])\n\n    axios#head(url[,config])\n\n    axios#post(url[,data[,config]])\n\n    axios#put(url[,data[,config]])\n\n    axios#patch(url[,data[,config]])\n    \n#### 请求的配置（request config）\n\n以下就是请求的配置选项，只有url选项是必须的，如果method选项未定义，那么它默认是以GET的方式发出请求\n\n    {\n    //`url`是请求的服务器地址\n    url:'/user',\n    //`method`是请求资源的方式\n    method:'get'//default\n    //如果`url`不是绝对地址，那么`baseURL`将会加到`url`的前面\n    //当`url`是相对地址的时候，设置`baseURL`会非常的方便\n    baseURL:'https://some-domain.com/api/',\n    //`transformRequest`选项允许我们在请求发送到服务器之前对请求的数据做出一些改动\n    //该选项只适用于以下请求方式：`put/post/patch`\n    //数组里面的最后一个函数必须返回一个字符串、-一个`ArrayBuffer`或者`Stream`\n    transformRequest:[function(data){\n        //在这里根据自己的需求改变数据\n        return data;\n    }],\n    //`transformResponse`选项允许我们在数据传送到`then/catch`方法之前对数据进行改动\n    transformResponse:[function(data){\n        //在这里根据自己的需求改变数据\n        return data;\n    }],\n    //`headers`选项是需要被发送的自定义请求头信息\n    headers: {'X-Requested-With':'XMLHttpRequest'},\n    //`params`选项是要随请求一起发送的请求参数----一般链接在URL后面\n    //他的类型必须是一个纯对象或者是URLSearchParams对象\n    params: {\n        ID:12345\n    },\n    //`paramsSerializer`是一个可选的函数，起作用是让参数（params）序列化\n    //例如(https://www.npmjs.com/package/qs,http://api.jquery.com/jquery.param)\n    paramsSerializer: function(params){\n        return Qs.stringify(params,{arrayFormat:'brackets'})\n    },\n    //`data`选项是作为一个请求体而需要被发送的数据\n    //该选项只适用于方法：`put/post/patch`\n    //当没有设置`transformRequest`选项时dada必须是以下几种类型之一\n    //string/plain/object/ArrayBuffer/ArrayBufferView/URLSearchParams\n    //仅仅浏览器：FormData/File/Bold\n    //仅node:Stream\n    data {\n        firstName:\"Fred\"\n    },\n    //`timeout`选项定义了请求发出的延迟毫秒数\n    //如果请求花费的时间超过延迟的时间，那么请求会被终止\n\n    timeout:1000,\n    //`withCredentails`选项表明了是否是跨域请求\n    \n    withCredentials:false,//default\n    //`adapter`适配器选项允许自定义处理请求，这会使得测试变得方便\n    //返回一个promise,并提供验证返回\n    adapter: function(config){\n        /*..........*/\n    },\n    //`auth`表明HTTP基础的认证应该被使用，并提供证书\n    //这会设置一个authorization头（header）,并覆盖你在header设置的Authorization头信息\n    auth: {\n        username:\"zhangsan\",\n        password: \"s00sdkf\"\n    },\n    //返回数据的格式\n    //其可选项是arraybuffer,blob,document,json,text,stream\n    responseType:'json',//default\n    //\n    xsrfCookieName: 'XSRF-TOKEN',//default\n    xsrfHeaderName:'X-XSRF-TOKEN',//default\n    //`onUploadProgress`上传进度事件\n    onUploadProgress:function(progressEvent){\n        //下载进度的事件\n    onDownloadProgress:function(progressEvent){\n    }\n    },\n    //相应内容的最大值\n    maxContentLength:2000,\n    //`validateStatus`定义了是否根据http相应状态码，来resolve或者reject promise\n    //如果`validateStatus`返回true(或者设置为`null`或者`undefined`),那么promise的状态将会是resolved,否则其状态就是rejected\n    validateStatus:function(status){\n        return status >= 200 && status <300;//default\n    },\n    //`maxRedirects`定义了在nodejs中重定向的最大数量\n    maxRedirects: 5,//default\n    //`httpAgent/httpsAgent`定义了当发送http/https请求要用到的自定义代理\n    //keeyAlive在选项中没有被默认激活\n    httpAgent: new http.Agent({keeyAlive:true}),\n    httpsAgent: new https.Agent({keeyAlive:true}),\n    //proxy定义了主机名字和端口号，\n    //`auth`表明http基本认证应该与proxy代理链接，并提供证书\n    //这将会设置一个`Proxy-Authorization` header,并且会覆盖掉已经存在的`Proxy-Authorization`  header\n    proxy: {\n        host:'127.0.0.1',\n        port: 9000,\n        auth: {\n        username:'skda',\n        password:'radsd'\n        }\n    },\n    //`cancelToken`定义了一个用于取消请求的cancel token\n    //详见cancelation部分\n    cancelToken: new cancelToken(function(cancel){\n\n    });\n    }\n\n#### 请求返回的内容\n\n    {\n    data:{},\n    status:200,\n    //从服务器返回的http状态文本\n    statusText:'OK',\n    //响应头信息\n    headers: {},\n    //`config`是在请求的时候的一些配置信息\n    config: {}\n    }\n\n你可以这样来获取响应信息\n\n    axios.get('/user/12345')\n    .then(function(res){\n        console.log(res.data);\n        console.log(res.status);\n        console.log(res.statusText);\n        console.log(res.headers);\n        console.log(res.config);\n    });\n\n#### 默认配置\n\n你可以设置默认配置，对所有请求都有效\n\n1、 全局默认配置\n\n    axios.defaults.baseURL = 'http://api.exmple.com';\n    axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n    axios.defaults.headers.post['content-Type'] = 'appliction/x-www-form-urlencoded';\n\n2、 自定义的实例默认设置\n\n    //当创建实例的时候配置默认配置\n    var instance = axios.create({\n        baseURL: 'https://api.example.com'\n    });\n\n    //当实例创建时候修改配置\n    instance.defaults.headers.common[\"Authorization\"] = AUTH_TOKEN;\n\n3、 配置中的有优先级\n\nconfig配置将会以优先级别来合并，顺序是lib/defauts.js中的默认配置，然后是实例中的默认配置，最后是请求中的config参数的配置，越往后等级越高，后面的会覆盖前面的例子。\n\n    //创建一个实例的时候会使用libray目录中的默认配置\n    //在这里timeout配置的值为0，来自于libray的默认值\n    var instance = axios.create();\n    //回覆盖掉library的默认值\n    //现在所有的请求都要等2.5S之后才会发出\n    instance.defaults.timeout = 2500;\n    //这里的timeout回覆盖之前的2.5S变成5s\n    instance.get('/longRequest',{\n    timeout: 5000\n    });\n\n#### 拦截器\n\n你可以在请求、响应在到达then/catch之前拦截他们\n\n    //添加一个请求拦截器\n    axios.interceptors.request.use(function(config){\n    //在请求发出之前进行一些操作\n    return config;\n    },function(err){\n    //Do something with request error\n    return Promise.reject(error);\n    });\n    //添加一个响应拦截器\n    axios.interceptors.response.use(function(res){\n    //在这里对返回的数据进行处理\n    return res;\n    },function(err){\n    //Do something with response error\n    return Promise.reject(error);\n    })\n\n取消拦截器\n\n    var myInterceptor = axios.interceptor.request.use(function(){/*....*/});\n    axios.interceptors.request.eject(myInterceptor);\n\n给自定义的axios实例添加拦截器\n\n    var instance = axios.create();\n    instance.interceptors.request.use(function(){})\n\n#### 错误处理\n\n    axios.get('/user/12345')\n    .catch(function(error){\n        if(error.response){\n        //请求已经发出，但是服务器响应返回的状态吗不在2xx的范围内\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.header);\n        }else {\n        //一些错误是在设置请求的时候触发\n        console.log('Error',error.message);\n        }\n        console.log(error.config);\n    });\n\n#### 取消\n\n你可以通过一个cancel token来取消一个请求\n你可以通过CancelToken.source工厂函数来创建一个cancel token\n\n    var CancelToken = axios.CancelToken;\n    var source = CancelToken.source();\n\n    axios.get('/user/12345',{\n    cancelToken: source.token\n    }).catch(function(thrown){\n    if(axios.isCancel(thrown)){\n        console.log('Request canceled',thrown.message);\n    }else {\n        //handle error\n    }\n    });\n\n    //取消请求（信息的参数可以设置的）\n    source.cance(\"操作被用户取消\");\n\n你可以给cancelToken构造函数传递一个executor function来创建一个cancel token:\n\n    var cancelToken = axios.CancelToken;\n    var cance;\n    axios.get('/user/12345',{\n    cancelToken: new CancelToken(function(c){\n        //这个executor函数接受一个cancel function作为参数\n        cancel = c;\n    })\n    })\n    //取消请求\n    cancel();\n","slug":"axios","published":1,"date":"2018-01-17T08:44:29.448Z","updated":"2018-01-18T01:53:53.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjdxow6p0003p8rrpc5mug9a","content":"<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>1、 利用npm安装npm install axios –save<br>2、 利用bower安装bower install axios –save<br>3、 直接利用cdn引入<code>&lt; script src=”<a href=\"https://unpkg.com/axios/dist/axios.min.js&quot;&gt;\" target=\"_blank\" rel=\"external\">https://unpkg.com/axios/dist/axios.min.js&quot;&gt;</a>&lt; /script&gt;</code></p>\n<a id=\"more\"></a>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p>1、 发送一个GET请求</p>\n<pre><code>//通过给定的ID来发送请求\naxios.get(&apos;/user?ID=12345&apos;)\n.then(function(response){\n    console.log(response);\n})\n.catch(function(err){\n    console.log(err);\n});\n//以上请求也可以通过这种方式来发送\naxios.get(&apos;/user&apos;,{\nparams:{\n    ID:12345\n}\n})\n.then(function(response){\nconsole.log(response);\n})\n.catch(function(err){\nconsole.log(err);\n});\n</code></pre><p>2、 发送一个POST请求</p>\n<pre><code>axios.post(&apos;/user&apos;,{\nfirstName:&apos;Fred&apos;,\nlastName:&apos;Flintstone&apos;\n})\n.then(function(res){\nconsole.log(res);\n})\n.catch(function(err){\nconsole.log(err);\n});\n</code></pre><p>3、 一次性并发多个请求</p>\n<pre><code>function getUserAccount(){\nreturn axios.get(&apos;/user/12345&apos;);\n}\nfunction getUserPermissions(){\nreturn axios.get(&apos;/user/12345/permissions&apos;);\n}\naxios.all([getUserAccount(),getUserPermissions()])\n.then(axios.spread(function(acct,perms){\n    //当这两个请求都完成的时候会触发这个函数，两个参数分别代表返回的结果\n}));\n</code></pre><h4 id=\"axios的api\"><a href=\"#axios的API\" class=\"headerlink\" title=\"axios的API\"></a>axios的API</h4><p>1、 axios可以通过配置（config）来发送请求</p>\n<p>axios(config)</p>\n<pre><code>//发送一个`POST`请求\naxios({\n    method:&quot;POST&quot;,\n    url:&apos;/user/12345&apos;,\n    data:{\n        firstName:&quot;Fred&quot;,\n        lastName:&quot;Flintstone&quot;\n    }\n});\n</code></pre><p>axios(url[,config])</p>\n<pre><code>//发送一个`GET`请求（默认的请求方式）\naxios(&apos;/user/12345&apos;);\n</code></pre><p>2、 请求方式的别名，这里对所有已经支持的请求方式都提供了方便的别名</p>\n<pre><code>axios.request(config);\n\naxios.get(url[,config]);\n\naxios.delete(url[,config]);\n\naxios.head(url[,config]);\n\naxios.post(url[,data[,config]]);\n\naxios.put(url[,data[,config]])\n\naxios.patch(url[,data[,config]])\n\n· 注意：当我们在使用别名方法的时候，url,method,data这几个参数不需要在配置中声明\n</code></pre><p>3、 并发请求（concurrency）,即是帮助处理并发请求的辅助函数</p>\n<pre><code>//iterable是一个可以迭代的参数如数组等\naxios.all(iterable)\n//callback要等到所有请求都完成才会执行\naxios.spread(callback)\n</code></pre><p>4、创建一个axios实例，并且可以自定义其配置</p>\n<p>axios.create([config])</p>\n<pre><code>var instance = axios.create({\nbaseURL:&quot;https://some-domain.com/api/&quot;,\ntimeout:1000,\nheaders: {&apos;X-Custom-Header&apos;:&apos;foobar&apos;}\n});\n</code></pre><p>实例的方法</p>\n<p>以下是实例方法，注意已经定义的配置将和利用create创建的实例的配置合并    </p>\n<pre><code>axios#request(config)\n\naxios#get(url[,config])\n\naxios#delete(url[,config])\n\naxios#head(url[,config])\n\naxios#post(url[,data[,config]])\n\naxios#put(url[,data[,config]])\n\naxios#patch(url[,data[,config]])\n</code></pre><h4 id=\"请求的配置request-config\"><a href=\"#请求的配置（request-config）\" class=\"headerlink\" title=\"请求的配置（request config）\"></a>请求的配置（request config）</h4><p>以下就是请求的配置选项，只有url选项是必须的，如果method选项未定义，那么它默认是以GET的方式发出请求</p>\n<pre><code>{\n//`url`是请求的服务器地址\nurl:&apos;/user&apos;,\n//`method`是请求资源的方式\nmethod:&apos;get&apos;//default\n//如果`url`不是绝对地址，那么`baseURL`将会加到`url`的前面\n//当`url`是相对地址的时候，设置`baseURL`会非常的方便\nbaseURL:&apos;https://some-domain.com/api/&apos;,\n//`transformRequest`选项允许我们在请求发送到服务器之前对请求的数据做出一些改动\n//该选项只适用于以下请求方式：`put/post/patch`\n//数组里面的最后一个函数必须返回一个字符串、-一个`ArrayBuffer`或者`Stream`\ntransformRequest:[function(data){\n    //在这里根据自己的需求改变数据\n    return data;\n}],\n//`transformResponse`选项允许我们在数据传送到`then/catch`方法之前对数据进行改动\ntransformResponse:[function(data){\n    //在这里根据自己的需求改变数据\n    return data;\n}],\n//`headers`选项是需要被发送的自定义请求头信息\nheaders: {&apos;X-Requested-With&apos;:&apos;XMLHttpRequest&apos;},\n//`params`选项是要随请求一起发送的请求参数----一般链接在URL后面\n//他的类型必须是一个纯对象或者是URLSearchParams对象\nparams: {\n    ID:12345\n},\n//`paramsSerializer`是一个可选的函数，起作用是让参数（params）序列化\n//例如(https://www.npmjs.com/package/qs,http://api.jquery.com/jquery.param)\nparamsSerializer: function(params){\n    return Qs.stringify(params,{arrayFormat:&apos;brackets&apos;})\n},\n//`data`选项是作为一个请求体而需要被发送的数据\n//该选项只适用于方法：`put/post/patch`\n//当没有设置`transformRequest`选项时dada必须是以下几种类型之一\n//string/plain/object/ArrayBuffer/ArrayBufferView/URLSearchParams\n//仅仅浏览器：FormData/File/Bold\n//仅node:Stream\ndata {\n    firstName:&quot;Fred&quot;\n},\n//`timeout`选项定义了请求发出的延迟毫秒数\n//如果请求花费的时间超过延迟的时间，那么请求会被终止\n\ntimeout:1000,\n//`withCredentails`选项表明了是否是跨域请求\n\nwithCredentials:false,//default\n//`adapter`适配器选项允许自定义处理请求，这会使得测试变得方便\n//返回一个promise,并提供验证返回\nadapter: function(config){\n    /*..........*/\n},\n//`auth`表明HTTP基础的认证应该被使用，并提供证书\n//这会设置一个authorization头（header）,并覆盖你在header设置的Authorization头信息\nauth: {\n    username:&quot;zhangsan&quot;,\n    password: &quot;s00sdkf&quot;\n},\n//返回数据的格式\n//其可选项是arraybuffer,blob,document,json,text,stream\nresponseType:&apos;json&apos;,//default\n//\nxsrfCookieName: &apos;XSRF-TOKEN&apos;,//default\nxsrfHeaderName:&apos;X-XSRF-TOKEN&apos;,//default\n//`onUploadProgress`上传进度事件\nonUploadProgress:function(progressEvent){\n    //下载进度的事件\nonDownloadProgress:function(progressEvent){\n}\n},\n//相应内容的最大值\nmaxContentLength:2000,\n//`validateStatus`定义了是否根据http相应状态码，来resolve或者reject promise\n//如果`validateStatus`返回true(或者设置为`null`或者`undefined`),那么promise的状态将会是resolved,否则其状态就是rejected\nvalidateStatus:function(status){\n    return status &gt;= 200 &amp;&amp; status &lt;300;//default\n},\n//`maxRedirects`定义了在nodejs中重定向的最大数量\nmaxRedirects: 5,//default\n//`httpAgent/httpsAgent`定义了当发送http/https请求要用到的自定义代理\n//keeyAlive在选项中没有被默认激活\nhttpAgent: new http.Agent({keeyAlive:true}),\nhttpsAgent: new https.Agent({keeyAlive:true}),\n//proxy定义了主机名字和端口号，\n//`auth`表明http基本认证应该与proxy代理链接，并提供证书\n//这将会设置一个`Proxy-Authorization` header,并且会覆盖掉已经存在的`Proxy-Authorization`  header\nproxy: {\n    host:&apos;127.0.0.1&apos;,\n    port: 9000,\n    auth: {\n    username:&apos;skda&apos;,\n    password:&apos;radsd&apos;\n    }\n},\n//`cancelToken`定义了一个用于取消请求的cancel token\n//详见cancelation部分\ncancelToken: new cancelToken(function(cancel){\n\n});\n}\n</code></pre><h4 id=\"请求返回的内容\"><a href=\"#请求返回的内容\" class=\"headerlink\" title=\"请求返回的内容\"></a>请求返回的内容</h4><pre><code>{\ndata:{},\nstatus:200,\n//从服务器返回的http状态文本\nstatusText:&apos;OK&apos;,\n//响应头信息\nheaders: {},\n//`config`是在请求的时候的一些配置信息\nconfig: {}\n}\n</code></pre><p>你可以这样来获取响应信息</p>\n<pre><code>axios.get(&apos;/user/12345&apos;)\n.then(function(res){\n    console.log(res.data);\n    console.log(res.status);\n    console.log(res.statusText);\n    console.log(res.headers);\n    console.log(res.config);\n});\n</code></pre><h4 id=\"默认配置\"><a href=\"#默认配置\" class=\"headerlink\" title=\"默认配置\"></a>默认配置</h4><p>你可以设置默认配置，对所有请求都有效</p>\n<p>1、 全局默认配置</p>\n<pre><code>axios.defaults.baseURL = &apos;http://api.exmple.com&apos;;\naxios.defaults.headers.common[&apos;Authorization&apos;] = AUTH_TOKEN;\naxios.defaults.headers.post[&apos;content-Type&apos;] = &apos;appliction/x-www-form-urlencoded&apos;;\n</code></pre><p>2、 自定义的实例默认设置</p>\n<pre><code>//当创建实例的时候配置默认配置\nvar instance = axios.create({\n    baseURL: &apos;https://api.example.com&apos;\n});\n\n//当实例创建时候修改配置\ninstance.defaults.headers.common[&quot;Authorization&quot;] = AUTH_TOKEN;\n</code></pre><p>3、 配置中的有优先级</p>\n<p>config配置将会以优先级别来合并，顺序是lib/defauts.js中的默认配置，然后是实例中的默认配置，最后是请求中的config参数的配置，越往后等级越高，后面的会覆盖前面的例子。</p>\n<pre><code>//创建一个实例的时候会使用libray目录中的默认配置\n//在这里timeout配置的值为0，来自于libray的默认值\nvar instance = axios.create();\n//回覆盖掉library的默认值\n//现在所有的请求都要等2.5S之后才会发出\ninstance.defaults.timeout = 2500;\n//这里的timeout回覆盖之前的2.5S变成5s\ninstance.get(&apos;/longRequest&apos;,{\ntimeout: 5000\n});\n</code></pre><h4 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h4><p>你可以在请求、响应在到达then/catch之前拦截他们</p>\n<pre><code>//添加一个请求拦截器\naxios.interceptors.request.use(function(config){\n//在请求发出之前进行一些操作\nreturn config;\n},function(err){\n//Do something with request error\nreturn Promise.reject(error);\n});\n//添加一个响应拦截器\naxios.interceptors.response.use(function(res){\n//在这里对返回的数据进行处理\nreturn res;\n},function(err){\n//Do something with response error\nreturn Promise.reject(error);\n})\n</code></pre><p>取消拦截器</p>\n<pre><code>var myInterceptor = axios.interceptor.request.use(function(){/*....*/});\naxios.interceptors.request.eject(myInterceptor);\n</code></pre><p>给自定义的axios实例添加拦截器</p>\n<pre><code>var instance = axios.create();\ninstance.interceptors.request.use(function(){})\n</code></pre><h4 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h4><pre><code>axios.get(&apos;/user/12345&apos;)\n.catch(function(error){\n    if(error.response){\n    //请求已经发出，但是服务器响应返回的状态吗不在2xx的范围内\n    console.log(error.response.data);\n    console.log(error.response.status);\n    console.log(error.response.header);\n    }else {\n    //一些错误是在设置请求的时候触发\n    console.log(&apos;Error&apos;,error.message);\n    }\n    console.log(error.config);\n});\n</code></pre><h4 id=\"取消\"><a href=\"#取消\" class=\"headerlink\" title=\"取消\"></a>取消</h4><p>你可以通过一个cancel token来取消一个请求<br>你可以通过CancelToken.source工厂函数来创建一个cancel token</p>\n<pre><code>var CancelToken = axios.CancelToken;\nvar source = CancelToken.source();\n\naxios.get(&apos;/user/12345&apos;,{\ncancelToken: source.token\n}).catch(function(thrown){\nif(axios.isCancel(thrown)){\n    console.log(&apos;Request canceled&apos;,thrown.message);\n}else {\n    //handle error\n}\n});\n\n//取消请求（信息的参数可以设置的）\nsource.cance(&quot;操作被用户取消&quot;);\n</code></pre><p>你可以给cancelToken构造函数传递一个executor function来创建一个cancel token:</p>\n<pre><code>var cancelToken = axios.CancelToken;\nvar cance;\naxios.get(&apos;/user/12345&apos;,{\ncancelToken: new CancelToken(function(c){\n    //这个executor函数接受一个cancel function作为参数\n    cancel = c;\n})\n})\n//取消请求\ncancel();\n</code></pre>","site":{"data":{}},"excerpt":"<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>1、 利用npm安装npm install axios –save<br>2、 利用bower安装bower install axios –save<br>3、 直接利用cdn引入<code>&lt; script src=”<a href=\"https://unpkg.com/axios/dist/axios.min.js&quot;&gt;\" target=\"_blank\" rel=\"external\">https://unpkg.com/axios/dist/axios.min.js&quot;&gt;</a>&lt; /script&gt;</code></p>","more":"<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p>1、 发送一个GET请求</p>\n<pre><code>//通过给定的ID来发送请求\naxios.get(&apos;/user?ID=12345&apos;)\n.then(function(response){\n    console.log(response);\n})\n.catch(function(err){\n    console.log(err);\n});\n//以上请求也可以通过这种方式来发送\naxios.get(&apos;/user&apos;,{\nparams:{\n    ID:12345\n}\n})\n.then(function(response){\nconsole.log(response);\n})\n.catch(function(err){\nconsole.log(err);\n});\n</code></pre><p>2、 发送一个POST请求</p>\n<pre><code>axios.post(&apos;/user&apos;,{\nfirstName:&apos;Fred&apos;,\nlastName:&apos;Flintstone&apos;\n})\n.then(function(res){\nconsole.log(res);\n})\n.catch(function(err){\nconsole.log(err);\n});\n</code></pre><p>3、 一次性并发多个请求</p>\n<pre><code>function getUserAccount(){\nreturn axios.get(&apos;/user/12345&apos;);\n}\nfunction getUserPermissions(){\nreturn axios.get(&apos;/user/12345/permissions&apos;);\n}\naxios.all([getUserAccount(),getUserPermissions()])\n.then(axios.spread(function(acct,perms){\n    //当这两个请求都完成的时候会触发这个函数，两个参数分别代表返回的结果\n}));\n</code></pre><h4 id=\"axios的API\"><a href=\"#axios的API\" class=\"headerlink\" title=\"axios的API\"></a>axios的API</h4><p>1、 axios可以通过配置（config）来发送请求</p>\n<p>axios(config)</p>\n<pre><code>//发送一个`POST`请求\naxios({\n    method:&quot;POST&quot;,\n    url:&apos;/user/12345&apos;,\n    data:{\n        firstName:&quot;Fred&quot;,\n        lastName:&quot;Flintstone&quot;\n    }\n});\n</code></pre><p>axios(url[,config])</p>\n<pre><code>//发送一个`GET`请求（默认的请求方式）\naxios(&apos;/user/12345&apos;);\n</code></pre><p>2、 请求方式的别名，这里对所有已经支持的请求方式都提供了方便的别名</p>\n<pre><code>axios.request(config);\n\naxios.get(url[,config]);\n\naxios.delete(url[,config]);\n\naxios.head(url[,config]);\n\naxios.post(url[,data[,config]]);\n\naxios.put(url[,data[,config]])\n\naxios.patch(url[,data[,config]])\n\n· 注意：当我们在使用别名方法的时候，url,method,data这几个参数不需要在配置中声明\n</code></pre><p>3、 并发请求（concurrency）,即是帮助处理并发请求的辅助函数</p>\n<pre><code>//iterable是一个可以迭代的参数如数组等\naxios.all(iterable)\n//callback要等到所有请求都完成才会执行\naxios.spread(callback)\n</code></pre><p>4、创建一个axios实例，并且可以自定义其配置</p>\n<p>axios.create([config])</p>\n<pre><code>var instance = axios.create({\nbaseURL:&quot;https://some-domain.com/api/&quot;,\ntimeout:1000,\nheaders: {&apos;X-Custom-Header&apos;:&apos;foobar&apos;}\n});\n</code></pre><p>实例的方法</p>\n<p>以下是实例方法，注意已经定义的配置将和利用create创建的实例的配置合并    </p>\n<pre><code>axios#request(config)\n\naxios#get(url[,config])\n\naxios#delete(url[,config])\n\naxios#head(url[,config])\n\naxios#post(url[,data[,config]])\n\naxios#put(url[,data[,config]])\n\naxios#patch(url[,data[,config]])\n</code></pre><h4 id=\"请求的配置（request-config）\"><a href=\"#请求的配置（request-config）\" class=\"headerlink\" title=\"请求的配置（request config）\"></a>请求的配置（request config）</h4><p>以下就是请求的配置选项，只有url选项是必须的，如果method选项未定义，那么它默认是以GET的方式发出请求</p>\n<pre><code>{\n//`url`是请求的服务器地址\nurl:&apos;/user&apos;,\n//`method`是请求资源的方式\nmethod:&apos;get&apos;//default\n//如果`url`不是绝对地址，那么`baseURL`将会加到`url`的前面\n//当`url`是相对地址的时候，设置`baseURL`会非常的方便\nbaseURL:&apos;https://some-domain.com/api/&apos;,\n//`transformRequest`选项允许我们在请求发送到服务器之前对请求的数据做出一些改动\n//该选项只适用于以下请求方式：`put/post/patch`\n//数组里面的最后一个函数必须返回一个字符串、-一个`ArrayBuffer`或者`Stream`\ntransformRequest:[function(data){\n    //在这里根据自己的需求改变数据\n    return data;\n}],\n//`transformResponse`选项允许我们在数据传送到`then/catch`方法之前对数据进行改动\ntransformResponse:[function(data){\n    //在这里根据自己的需求改变数据\n    return data;\n}],\n//`headers`选项是需要被发送的自定义请求头信息\nheaders: {&apos;X-Requested-With&apos;:&apos;XMLHttpRequest&apos;},\n//`params`选项是要随请求一起发送的请求参数----一般链接在URL后面\n//他的类型必须是一个纯对象或者是URLSearchParams对象\nparams: {\n    ID:12345\n},\n//`paramsSerializer`是一个可选的函数，起作用是让参数（params）序列化\n//例如(https://www.npmjs.com/package/qs,http://api.jquery.com/jquery.param)\nparamsSerializer: function(params){\n    return Qs.stringify(params,{arrayFormat:&apos;brackets&apos;})\n},\n//`data`选项是作为一个请求体而需要被发送的数据\n//该选项只适用于方法：`put/post/patch`\n//当没有设置`transformRequest`选项时dada必须是以下几种类型之一\n//string/plain/object/ArrayBuffer/ArrayBufferView/URLSearchParams\n//仅仅浏览器：FormData/File/Bold\n//仅node:Stream\ndata {\n    firstName:&quot;Fred&quot;\n},\n//`timeout`选项定义了请求发出的延迟毫秒数\n//如果请求花费的时间超过延迟的时间，那么请求会被终止\n\ntimeout:1000,\n//`withCredentails`选项表明了是否是跨域请求\n\nwithCredentials:false,//default\n//`adapter`适配器选项允许自定义处理请求，这会使得测试变得方便\n//返回一个promise,并提供验证返回\nadapter: function(config){\n    /*..........*/\n},\n//`auth`表明HTTP基础的认证应该被使用，并提供证书\n//这会设置一个authorization头（header）,并覆盖你在header设置的Authorization头信息\nauth: {\n    username:&quot;zhangsan&quot;,\n    password: &quot;s00sdkf&quot;\n},\n//返回数据的格式\n//其可选项是arraybuffer,blob,document,json,text,stream\nresponseType:&apos;json&apos;,//default\n//\nxsrfCookieName: &apos;XSRF-TOKEN&apos;,//default\nxsrfHeaderName:&apos;X-XSRF-TOKEN&apos;,//default\n//`onUploadProgress`上传进度事件\nonUploadProgress:function(progressEvent){\n    //下载进度的事件\nonDownloadProgress:function(progressEvent){\n}\n},\n//相应内容的最大值\nmaxContentLength:2000,\n//`validateStatus`定义了是否根据http相应状态码，来resolve或者reject promise\n//如果`validateStatus`返回true(或者设置为`null`或者`undefined`),那么promise的状态将会是resolved,否则其状态就是rejected\nvalidateStatus:function(status){\n    return status &gt;= 200 &amp;&amp; status &lt;300;//default\n},\n//`maxRedirects`定义了在nodejs中重定向的最大数量\nmaxRedirects: 5,//default\n//`httpAgent/httpsAgent`定义了当发送http/https请求要用到的自定义代理\n//keeyAlive在选项中没有被默认激活\nhttpAgent: new http.Agent({keeyAlive:true}),\nhttpsAgent: new https.Agent({keeyAlive:true}),\n//proxy定义了主机名字和端口号，\n//`auth`表明http基本认证应该与proxy代理链接，并提供证书\n//这将会设置一个`Proxy-Authorization` header,并且会覆盖掉已经存在的`Proxy-Authorization`  header\nproxy: {\n    host:&apos;127.0.0.1&apos;,\n    port: 9000,\n    auth: {\n    username:&apos;skda&apos;,\n    password:&apos;radsd&apos;\n    }\n},\n//`cancelToken`定义了一个用于取消请求的cancel token\n//详见cancelation部分\ncancelToken: new cancelToken(function(cancel){\n\n});\n}\n</code></pre><h4 id=\"请求返回的内容\"><a href=\"#请求返回的内容\" class=\"headerlink\" title=\"请求返回的内容\"></a>请求返回的内容</h4><pre><code>{\ndata:{},\nstatus:200,\n//从服务器返回的http状态文本\nstatusText:&apos;OK&apos;,\n//响应头信息\nheaders: {},\n//`config`是在请求的时候的一些配置信息\nconfig: {}\n}\n</code></pre><p>你可以这样来获取响应信息</p>\n<pre><code>axios.get(&apos;/user/12345&apos;)\n.then(function(res){\n    console.log(res.data);\n    console.log(res.status);\n    console.log(res.statusText);\n    console.log(res.headers);\n    console.log(res.config);\n});\n</code></pre><h4 id=\"默认配置\"><a href=\"#默认配置\" class=\"headerlink\" title=\"默认配置\"></a>默认配置</h4><p>你可以设置默认配置，对所有请求都有效</p>\n<p>1、 全局默认配置</p>\n<pre><code>axios.defaults.baseURL = &apos;http://api.exmple.com&apos;;\naxios.defaults.headers.common[&apos;Authorization&apos;] = AUTH_TOKEN;\naxios.defaults.headers.post[&apos;content-Type&apos;] = &apos;appliction/x-www-form-urlencoded&apos;;\n</code></pre><p>2、 自定义的实例默认设置</p>\n<pre><code>//当创建实例的时候配置默认配置\nvar instance = axios.create({\n    baseURL: &apos;https://api.example.com&apos;\n});\n\n//当实例创建时候修改配置\ninstance.defaults.headers.common[&quot;Authorization&quot;] = AUTH_TOKEN;\n</code></pre><p>3、 配置中的有优先级</p>\n<p>config配置将会以优先级别来合并，顺序是lib/defauts.js中的默认配置，然后是实例中的默认配置，最后是请求中的config参数的配置，越往后等级越高，后面的会覆盖前面的例子。</p>\n<pre><code>//创建一个实例的时候会使用libray目录中的默认配置\n//在这里timeout配置的值为0，来自于libray的默认值\nvar instance = axios.create();\n//回覆盖掉library的默认值\n//现在所有的请求都要等2.5S之后才会发出\ninstance.defaults.timeout = 2500;\n//这里的timeout回覆盖之前的2.5S变成5s\ninstance.get(&apos;/longRequest&apos;,{\ntimeout: 5000\n});\n</code></pre><h4 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h4><p>你可以在请求、响应在到达then/catch之前拦截他们</p>\n<pre><code>//添加一个请求拦截器\naxios.interceptors.request.use(function(config){\n//在请求发出之前进行一些操作\nreturn config;\n},function(err){\n//Do something with request error\nreturn Promise.reject(error);\n});\n//添加一个响应拦截器\naxios.interceptors.response.use(function(res){\n//在这里对返回的数据进行处理\nreturn res;\n},function(err){\n//Do something with response error\nreturn Promise.reject(error);\n})\n</code></pre><p>取消拦截器</p>\n<pre><code>var myInterceptor = axios.interceptor.request.use(function(){/*....*/});\naxios.interceptors.request.eject(myInterceptor);\n</code></pre><p>给自定义的axios实例添加拦截器</p>\n<pre><code>var instance = axios.create();\ninstance.interceptors.request.use(function(){})\n</code></pre><h4 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h4><pre><code>axios.get(&apos;/user/12345&apos;)\n.catch(function(error){\n    if(error.response){\n    //请求已经发出，但是服务器响应返回的状态吗不在2xx的范围内\n    console.log(error.response.data);\n    console.log(error.response.status);\n    console.log(error.response.header);\n    }else {\n    //一些错误是在设置请求的时候触发\n    console.log(&apos;Error&apos;,error.message);\n    }\n    console.log(error.config);\n});\n</code></pre><h4 id=\"取消\"><a href=\"#取消\" class=\"headerlink\" title=\"取消\"></a>取消</h4><p>你可以通过一个cancel token来取消一个请求<br>你可以通过CancelToken.source工厂函数来创建一个cancel token</p>\n<pre><code>var CancelToken = axios.CancelToken;\nvar source = CancelToken.source();\n\naxios.get(&apos;/user/12345&apos;,{\ncancelToken: source.token\n}).catch(function(thrown){\nif(axios.isCancel(thrown)){\n    console.log(&apos;Request canceled&apos;,thrown.message);\n}else {\n    //handle error\n}\n});\n\n//取消请求（信息的参数可以设置的）\nsource.cance(&quot;操作被用户取消&quot;);\n</code></pre><p>你可以给cancelToken构造函数传递一个executor function来创建一个cancel token:</p>\n<pre><code>var cancelToken = axios.CancelToken;\nvar cance;\naxios.get(&apos;/user/12345&apos;,{\ncancelToken: new CancelToken(function(c){\n    //这个executor函数接受一个cancel function作为参数\n    cancel = c;\n})\n})\n//取消请求\ncancel();\n</code></pre>"},{"title":"Hello World","_content":"我的第一篇博客！\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncategories: 个人随笔\ntags: my\n---\n我的第一篇博客！\n\n","slug":"hello-world","published":1,"date":"2017-06-06T03:06:03.018Z","updated":"2017-06-06T08:41:42.305Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjdxow6s0004p8rrrwj2r6y9","content":"<p>我的第一篇博客！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我的第一篇博客！</p>\n"},{"title":"js数组API","_content":"###### concat\n\nconcat() 方法用于连接两个或多个数组。\n\n该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。\n\n\tarrayObject.concat(arrayX,arrayX,......,arrayX)\n\t\n返回值\n\n返回一个新的数组。该数组是通过把所有 arrayX 参数添加到 arrayObject 中生成的。如果要进行 concat() 操作的参数是数组，那么添加的是数组中的元素，而不是数组。\n\n\t// create two arrays\n\tvar arr1 = ['a', 'b', 'c'];\n\tvar arr2 = ['d', 'e', 'f'];\n\n\t/* call concat() on the first array passing\n\t   the second as an argument */\n\tvar arr3 = arr1.concat(arr2);\n\n\t// log the result\n\tconsole.log(arr3);\n\t// expected output: a,b,c,d,e,f\t\n\n<!--more-->\n\t\n###### copyWithin\n\n数组实例的copyWithin方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组\n\nArray.prototype.copyWithin(target, start = 0, end = this.length)  \ntarget （必需）：从该位置开始替换数据。\nstart （可选）：从该位置开始读取数据，默认为 0 。如果为负值，表示倒数。\nend （可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。\n\n返回值\n\n修改后的数组\n\n\t[1, 2, 3, 4, 5].copyWithin(-2);\n\t// [1, 2, 3, 1, 2]\n\n\t[1, 2, 3, 4, 5].copyWithin(0, 3);\n\t// [4, 5, 3, 4, 5]\n\n\t[1, 2, 3, 4, 5].copyWithin(0, 3, 4);\n\t// [4, 2, 3, 4, 5]\n\n\t[1, 2, 3, 4, 5].copyWithin(-2, -3, -1);\n\t// [1, 2, 3, 3, 4]\n\n###### entries\n\nentries()方法返回一个新的数组迭代器对象，该对象包含数组中每个索引的键/值对。\n\n返回值\n\n一个新的数组迭代器对象。\n\n\n\tvar a = ['a', 'b', 'c'];\n\tvar iterator = a.entries();\n\n\tconsole.log(iterator.next().value); // [0, 'a']\n\tconsole.log(iterator.next().value); // [1, 'b']\n\tconsole.log(iterator.next().value); // [2, 'c']\n\n\tvar a = ['a', 'b', 'c'];\n\tvar iterator = a.entries();\n\n\tfor (let e of iterator) {\n\t  console.log(e);\n\t}\n\t// [0, 'a']\n\t// [1, 'b']\n\t// [2, 'c']\n\t\n###### from\n\nfrom()方法返回一个新的数组迭代器对象，该对象包含数组中每个索引的键/值对。\n\nArray.from(arrayLike[, mapFn[, thisArg]])\narrayLike（必需）：一个类似数组的或可迭代的对象，可以转换为数组。\nmapFn （可选）：映射函数来调用数组的每个元素。\nthisArg （可选）：在执行mapFn时使用的值。\n\n返回值\n\n一个新的数组实例。\n\n\tconst bar = [\"a\", \"b\", \"c\"];\n\tArray.from(bar);\n\t// [\"a\", \"b\", \"c\"]\n\n\tArray.from('foo');\n\t// [\"f\", \"o\", \"o\"]\n\tArray.from('foo'); \n\t// [\"f\", \"o\", \"o\"]\n\n\tvar s = new Set(['foo', window]); \n\tArray.from(s); \n\t// [\"foo\", window]var m = new Map([[1, 2], [2, 4], [4, 8]]);\n\tArray.from(m); \n\t// [[1, 2], [2, 4], [4, 8]]\n\n\t// arguments 参数专数组\n\tfunction f() {\n\t  return Array.from(arguments);\n\t}\n\n\tf(1, 2, 3);\n\n\t// [1, 2, 3]\n\t\n###### every\n\nentries()方法返回一个回调函数的条件bool值。\n\narr.every(callback[, thisArg])\ncallback（必需）：回调函数。\nthisArg （可选）：当前值。\n\n返回值\n\n返回 回调函数每个数组元素的bool值\n\n\tfunction isBigEnough(element, index, array) { \n\t  return element >= 10; \n\t} \n\n\t[12, 5, 8, 130, 44].every(isBigEnough);   // false \n\t[12, 54, 18, 130, 44].every(isBigEnough); // true\n\t\n###### fill\n\nfill()方法将数组的所有元素从起始索引填充到结束索引。\n\narr.fill(value)\narr.fill(value, start)\narr.fill(value, start, end)\nvalue：一个类似数组的或可迭代的对象，可以转换为数组。\nstart ：开始位置 默认为0\nend ：结束位置 默认为当前length\n\n返回值\n\n修改后的数组。\n\n\t[1, 2, 3].fill(4);               // [4, 4, 4]\n\t[1, 2, 3].fill(4, 1);            // [1, 4, 4]\n\t[1, 2, 3].fill(4, 1, 2);         // [1, 4, 3]\n\t[1, 2, 3].fill(4, 1, 1);         // [1, 2, 3]\n\t[1, 2, 3].fill(4, -3, -2);       // [4, 2, 3]\n\t[1, 2, 3].fill(4, NaN, NaN);     // [1, 2, 3]\n\tArray(3).fill(4);                // [4, 4, 4]\n\t[].fill.call({ length: 3 }, 4);  // {0: 4, 1: 4, 2: 4, length: 3}\n\n###### filter\n\nfilter()方法创建一个新的数组，其中包含符合回调条件的所有元素。\n\nvar newArray = arr.filter(callback[, thisArg])\ncallback：回调函数。\nthisArg：当前元素\n\n返回值\n\n一个带有符合条件的元素的新数组。\n\n\tvar words = [\"spray\", \"limit\", \"elite\", \"exuberant\", \"destruction\", \"present\"];\n\n\tvar longWords = words.filter(function(word){\n\t  return word.length > 6;\n\t});\n\n\t// Filtered array longWords is [\"exuberant\", \"destruction\", \"present\"]\n\n\tES6\n\n\tvar words = [\"spray\", \"limit\", \"elite\", \"exuberant\", \"destruction\", \"present\"];\n\n\tvar longWords = words.filter(word => word.length > 6);\n\n\t// Filtered array longWords is [\"exuberant\", \"destruction\", \"present\"]\n\t\n###### find\n\nfind()方法返回满足回调条件的数组中第一个元素的值。否则将返回未定义。\n\narr.find(callback[, thisArg])\ncallback：回调函数。\nthisArg：当前元素\n\n返回值\n\n如果元素符合条件  返回数组中的值;否则,未定义。\n\n\tfunction isBigEnough(element) {\n\t  return element >= 15;\n\t}\n\n\t[12, 5, 8, 130, 44].find(isBigEnough); // 130\n\n###### findIndex\n\nfindIndex()方法返回满足回调条件的数组中第一个元素的索引。否则将返回-1。\n\narr.findIndex(callback[, thisArg])\ncallback：回调函数。\nthisArg：当前元素\n\n返回值\n\n如果元素符合条件 返回数组中的值的索引;否则,-1。\n\n\tfunction isBigEnough(element) {\n\t  return element >= 15;\n\t}\n\n\t[12, 5, 8, 130, 44].findIndex(isBigEnough); \n\t// index of 4th element in the Array is returned,\n\t// so this will result in '3'\n\t\n###### forEach\n\nfindIndex()方法返回满足回调条件的数组中第一个元素的索引。否则将返回1。\n\n\tarr.forEach(function callback(currentValue, index, array) {\n\t\t//your iterator\n\t}[, thisArg]);\n\t\ncallback：回调函数。\n\ncurrentValue：在数组中处理当前元素\n\nindex：在数组中处理当前元素的索引。\narray：当前数组\n\n\tvar a = ['a', 'b', 'c'];\n\n\ta.forEach(function(element) {\n\t\tconsole.log(element);\n\t});\n\n\t// a\n\t// b\n\t// c\n\t\n###### includes\n\nincludes()方法确定一个数组是否包含某个元素，返回true或false。\n\narr.includes(searchElement)\narr.includes(searchElement, fromIndex)\nserachElement：查询元素。\n\nfromIndex：开始查询元素位置\n\n返回值\n\nboolean\n\n\tvar a = [1, 2, 3];\n\ta.includes(2); // true \n\ta.includes(4); // false\n\n\t[1, 2, 3].includes(2);     // true\n\t[1, 2, 3].includes(4);     // false\n\t[1, 2, 3].includes(3, 3);  // false\n\t[1, 2, 3].includes(3, -1); // true\n\t[1, 2, NaN].includes(NaN); // true\n\t\n###### indexOf\n\nindexOf()返回一个给定元素可以在数组中找到的第一个索引，如果不是，则返回- 1。\n\narr.indexOf(searchElement[, fromIndex])\nserachElement：查询元素。\n\nfromIndex：开始查询元素位置\n\n返回值\n\n返回一个给定元素可以在数组中找到的第一个索引，如果不是，则返回- 1。\n\n\tvar a = [2, 9, 9]; \n\ta.indexOf(2); // 0 \n\ta.indexOf(7); // -1\n\n\tif (a.indexOf(7) === -1) {\n\t  // element doesn't exist in array\n\t}\n\t\n###### join\n\njoin()将数组中的所有元素(或类似数组的对象)连接到一个字符串中。\n\n\tarr.join()\n\tarr.join(separator)\n\tseparator：分隔符\n\n\tvar a = ['Wind', 'Rain', 'Fire'];\n\ta.join();    // 'Wind,Rain,Fire'\n\ta.join('-'); // 'Wind-Rain-Fire'\n\n###### keys\n\nkeys()方法返回一个新的数组迭代器对象，该对象包含数组中每个索引的键。\n\n\tarr.keys()\n\tvar arr = ['a', 'b', 'c'];\n\tvar iterator = arr.keys();\n\n\tconsole.log(iterator.next()); // { value: 0, done: false }\n\tconsole.log(iterator.next()); // { value: 1, done: false }\n\tconsole.log(iterator.next()); // { value: 2, done: false }\n\tconsole.log(iterator.next()); // { value: undefined, done: true }\n\n###### lastIndexOf\n\nlastIndexOf()方法返回在数组中可以找到给定元素的最后一个索引，如果不存在，则返回- 1。该数组向后搜索，从fromIndex开始。\n\narr.lastIndexOf(searchElement)\narr.lastIndexOf(searchElement, fromIndex)\nserachElement：查询元素。\n\nfromIndex：开始查询元素位置\n\n返回值\n\n数组中元素的一个索引;如果没有找到 -1。\n\n\tvar numbers = [2, 5, 9, 2];\n\tnumbers.lastIndexOf(2);     // 3\n\tnumbers.lastIndexOf(7);     // -1\n\tnumbers.lastIndexOf(2, 3);  // 3\n\tnumbers.lastIndexOf(2, 2);  // 0\n\tnumbers.lastIndexOf(2, -2); // 0\n\tnumbers.lastIndexOf(2, -1); // 3\n\t\n###### map\n\nmap()方法创建一个新的数组，该数组的结果是调用调用数组中的每个元素的函数。\n\n\tvar new_array = arr.map(function callback(currentValue, index, array) {\n\t\t// Return element for new_array\n\t}[, thisArg])\n\ncallback：回调函数。\n\ncurrentValue：在数组中处理当前元素\n\nindex：在数组中处理当前元素的索引。\narray：当前数组\n\n返回值\n\n每个元素的改变后的组成的新数组\n\n\tvar numbers = [1, 5, 10, 15];\n\tvar doubles = numbers.map(function(x) {\n\t   return x * 2;\n\t});\n\t// doubles is now [2, 10, 20, 30]\n\t// numbers is still [1, 5, 10, 15]\n\n\tvar numbers = [1, 4, 9];\n\tvar roots = numbers.map(Math.sqrt);\n\t// roots is now [1, 2, 3]\n\t// numbers is still [1, 4, 9]\n\t\n###### reduce\n\nreduce()方法对累加器和数组中的每个元素(从左到右)使用一个函数，以将其还原为一个值。\n\narr.reduce(callback[, initialValue])\ncallback：回调函数。\n\ninitiaValue：当前元素\n\n返回值\n\n数组的累加\n\n\t// create an array\n\tvar numbers = [0, 1, 2, 3];\n\n\t/* call reduce() on the array, passing a callback\n\tthat adds all the values together */\n\tvar result = numbers.reduce(function(accumulator, currentValue) {\n\t\treturn accumulator + currentValue;\n\t});\n\n\t// log the result\n\tconsole.log(result);\n\t// expected output: 6\n\t\n###### some\n\nsome()方法检测数组中至少一个元素是否通过所提供回调函数的条件。\n\narr.some(callback[, thisArg])\ncallback：回调函数。\n\nthisArg：当前元素\n\n返回值\n\nboolane\n\n\tfunction isBiggerThan10(element, index, array) {\n\t  return element > 10;\n\t}\n\n\t[2, 5, 8, 1, 4].some(isBiggerThan10);  // false\n\t[12, 5, 8, 1, 4].some(isBiggerThan10); // true\n\t\n###### splice\n\nsplice()方法通过删除现有元素和/或添加新元素来更改数组的内容。\n\narray.splice(start)\narray.splice(start, deleteCount)\narray.splice(start, deleteCount, item1, item2, ...)\nstart：开始位置。\n\ndeleteCount：如果deleteCount为0，则没有删除元素。在这种情况下，您应该指定至少一个新元素。\n\nitem1， item2：添加到数组中的元素，从开始索引开始。如果没有指定任何元素，splice()将只删除数组中的元素。\n\n返回值\n\n包含已删除元素的数组。如果只删除了一个元素，则返回一个元素数组。如果没有删除元素，则返回空数组。\n\n\tvar myFish = ['angel', 'clown', 'mandarin', 'sturgeon'];\n\n\tmyFish.splice(2, 0, 'drum'); // insert 'drum' at 2-index position\n\t// myFish is [\"angel\", \"clown\", \"drum\", \"mandarin\", \"sturgeon\"]\n\n\tmyFish.splice(2, 1); // remove 1 item at 2-index position (that is, \"drum\")\n\t// myFish is [\"angel\", \"clown\", \"mandarin\", \"sturgeon\"]\n\t\n###### of\n\nArray.of()方法创建一个新的数组实例，该数组实例的参数数目不定，不管参数的类型或类型。\n\nArray.of(element0[, element1[, ...[, elementN]]])\nelementN：创建数组的元素\n\n返回值\n\n返回新函数实例\n\n\tArray.of(7);       // [7] \n\tArray.of(1, 2, 3); // [1, 2, 3]\n\n\tArray(7);          // [ , , , , , , ]\n\tArray(1, 2, 3);    // [1, 2, 3]\n\n\tArray.of(1);         // [1]\n\tArray.of(1, 2, 3);   // [1, 2, 3]\n\tArray.of(undefined); // [undefined]\n\n\n\t// 实现原理（兼容）\n\tif (!Array.of) {\n\t  Array.of = function() {\n\t\treturn Array.prototype.slice.call(arguments);\n\t  };\n\t}\t\n\n\n\t\n转载：https://juejin.im/post/59c9f03df265da06602994f7?utm_source=gold_browser_extension","source":"_posts/js-array.md","raw":"---\ntitle: js数组API\ncategories: javascript\ntags: [web,js]\n---\n###### concat\n\nconcat() 方法用于连接两个或多个数组。\n\n该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。\n\n\tarrayObject.concat(arrayX,arrayX,......,arrayX)\n\t\n返回值\n\n返回一个新的数组。该数组是通过把所有 arrayX 参数添加到 arrayObject 中生成的。如果要进行 concat() 操作的参数是数组，那么添加的是数组中的元素，而不是数组。\n\n\t// create two arrays\n\tvar arr1 = ['a', 'b', 'c'];\n\tvar arr2 = ['d', 'e', 'f'];\n\n\t/* call concat() on the first array passing\n\t   the second as an argument */\n\tvar arr3 = arr1.concat(arr2);\n\n\t// log the result\n\tconsole.log(arr3);\n\t// expected output: a,b,c,d,e,f\t\n\n<!--more-->\n\t\n###### copyWithin\n\n数组实例的copyWithin方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组\n\nArray.prototype.copyWithin(target, start = 0, end = this.length)  \ntarget （必需）：从该位置开始替换数据。\nstart （可选）：从该位置开始读取数据，默认为 0 。如果为负值，表示倒数。\nend （可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。\n\n返回值\n\n修改后的数组\n\n\t[1, 2, 3, 4, 5].copyWithin(-2);\n\t// [1, 2, 3, 1, 2]\n\n\t[1, 2, 3, 4, 5].copyWithin(0, 3);\n\t// [4, 5, 3, 4, 5]\n\n\t[1, 2, 3, 4, 5].copyWithin(0, 3, 4);\n\t// [4, 2, 3, 4, 5]\n\n\t[1, 2, 3, 4, 5].copyWithin(-2, -3, -1);\n\t// [1, 2, 3, 3, 4]\n\n###### entries\n\nentries()方法返回一个新的数组迭代器对象，该对象包含数组中每个索引的键/值对。\n\n返回值\n\n一个新的数组迭代器对象。\n\n\n\tvar a = ['a', 'b', 'c'];\n\tvar iterator = a.entries();\n\n\tconsole.log(iterator.next().value); // [0, 'a']\n\tconsole.log(iterator.next().value); // [1, 'b']\n\tconsole.log(iterator.next().value); // [2, 'c']\n\n\tvar a = ['a', 'b', 'c'];\n\tvar iterator = a.entries();\n\n\tfor (let e of iterator) {\n\t  console.log(e);\n\t}\n\t// [0, 'a']\n\t// [1, 'b']\n\t// [2, 'c']\n\t\n###### from\n\nfrom()方法返回一个新的数组迭代器对象，该对象包含数组中每个索引的键/值对。\n\nArray.from(arrayLike[, mapFn[, thisArg]])\narrayLike（必需）：一个类似数组的或可迭代的对象，可以转换为数组。\nmapFn （可选）：映射函数来调用数组的每个元素。\nthisArg （可选）：在执行mapFn时使用的值。\n\n返回值\n\n一个新的数组实例。\n\n\tconst bar = [\"a\", \"b\", \"c\"];\n\tArray.from(bar);\n\t// [\"a\", \"b\", \"c\"]\n\n\tArray.from('foo');\n\t// [\"f\", \"o\", \"o\"]\n\tArray.from('foo'); \n\t// [\"f\", \"o\", \"o\"]\n\n\tvar s = new Set(['foo', window]); \n\tArray.from(s); \n\t// [\"foo\", window]var m = new Map([[1, 2], [2, 4], [4, 8]]);\n\tArray.from(m); \n\t// [[1, 2], [2, 4], [4, 8]]\n\n\t// arguments 参数专数组\n\tfunction f() {\n\t  return Array.from(arguments);\n\t}\n\n\tf(1, 2, 3);\n\n\t// [1, 2, 3]\n\t\n###### every\n\nentries()方法返回一个回调函数的条件bool值。\n\narr.every(callback[, thisArg])\ncallback（必需）：回调函数。\nthisArg （可选）：当前值。\n\n返回值\n\n返回 回调函数每个数组元素的bool值\n\n\tfunction isBigEnough(element, index, array) { \n\t  return element >= 10; \n\t} \n\n\t[12, 5, 8, 130, 44].every(isBigEnough);   // false \n\t[12, 54, 18, 130, 44].every(isBigEnough); // true\n\t\n###### fill\n\nfill()方法将数组的所有元素从起始索引填充到结束索引。\n\narr.fill(value)\narr.fill(value, start)\narr.fill(value, start, end)\nvalue：一个类似数组的或可迭代的对象，可以转换为数组。\nstart ：开始位置 默认为0\nend ：结束位置 默认为当前length\n\n返回值\n\n修改后的数组。\n\n\t[1, 2, 3].fill(4);               // [4, 4, 4]\n\t[1, 2, 3].fill(4, 1);            // [1, 4, 4]\n\t[1, 2, 3].fill(4, 1, 2);         // [1, 4, 3]\n\t[1, 2, 3].fill(4, 1, 1);         // [1, 2, 3]\n\t[1, 2, 3].fill(4, -3, -2);       // [4, 2, 3]\n\t[1, 2, 3].fill(4, NaN, NaN);     // [1, 2, 3]\n\tArray(3).fill(4);                // [4, 4, 4]\n\t[].fill.call({ length: 3 }, 4);  // {0: 4, 1: 4, 2: 4, length: 3}\n\n###### filter\n\nfilter()方法创建一个新的数组，其中包含符合回调条件的所有元素。\n\nvar newArray = arr.filter(callback[, thisArg])\ncallback：回调函数。\nthisArg：当前元素\n\n返回值\n\n一个带有符合条件的元素的新数组。\n\n\tvar words = [\"spray\", \"limit\", \"elite\", \"exuberant\", \"destruction\", \"present\"];\n\n\tvar longWords = words.filter(function(word){\n\t  return word.length > 6;\n\t});\n\n\t// Filtered array longWords is [\"exuberant\", \"destruction\", \"present\"]\n\n\tES6\n\n\tvar words = [\"spray\", \"limit\", \"elite\", \"exuberant\", \"destruction\", \"present\"];\n\n\tvar longWords = words.filter(word => word.length > 6);\n\n\t// Filtered array longWords is [\"exuberant\", \"destruction\", \"present\"]\n\t\n###### find\n\nfind()方法返回满足回调条件的数组中第一个元素的值。否则将返回未定义。\n\narr.find(callback[, thisArg])\ncallback：回调函数。\nthisArg：当前元素\n\n返回值\n\n如果元素符合条件  返回数组中的值;否则,未定义。\n\n\tfunction isBigEnough(element) {\n\t  return element >= 15;\n\t}\n\n\t[12, 5, 8, 130, 44].find(isBigEnough); // 130\n\n###### findIndex\n\nfindIndex()方法返回满足回调条件的数组中第一个元素的索引。否则将返回-1。\n\narr.findIndex(callback[, thisArg])\ncallback：回调函数。\nthisArg：当前元素\n\n返回值\n\n如果元素符合条件 返回数组中的值的索引;否则,-1。\n\n\tfunction isBigEnough(element) {\n\t  return element >= 15;\n\t}\n\n\t[12, 5, 8, 130, 44].findIndex(isBigEnough); \n\t// index of 4th element in the Array is returned,\n\t// so this will result in '3'\n\t\n###### forEach\n\nfindIndex()方法返回满足回调条件的数组中第一个元素的索引。否则将返回1。\n\n\tarr.forEach(function callback(currentValue, index, array) {\n\t\t//your iterator\n\t}[, thisArg]);\n\t\ncallback：回调函数。\n\ncurrentValue：在数组中处理当前元素\n\nindex：在数组中处理当前元素的索引。\narray：当前数组\n\n\tvar a = ['a', 'b', 'c'];\n\n\ta.forEach(function(element) {\n\t\tconsole.log(element);\n\t});\n\n\t// a\n\t// b\n\t// c\n\t\n###### includes\n\nincludes()方法确定一个数组是否包含某个元素，返回true或false。\n\narr.includes(searchElement)\narr.includes(searchElement, fromIndex)\nserachElement：查询元素。\n\nfromIndex：开始查询元素位置\n\n返回值\n\nboolean\n\n\tvar a = [1, 2, 3];\n\ta.includes(2); // true \n\ta.includes(4); // false\n\n\t[1, 2, 3].includes(2);     // true\n\t[1, 2, 3].includes(4);     // false\n\t[1, 2, 3].includes(3, 3);  // false\n\t[1, 2, 3].includes(3, -1); // true\n\t[1, 2, NaN].includes(NaN); // true\n\t\n###### indexOf\n\nindexOf()返回一个给定元素可以在数组中找到的第一个索引，如果不是，则返回- 1。\n\narr.indexOf(searchElement[, fromIndex])\nserachElement：查询元素。\n\nfromIndex：开始查询元素位置\n\n返回值\n\n返回一个给定元素可以在数组中找到的第一个索引，如果不是，则返回- 1。\n\n\tvar a = [2, 9, 9]; \n\ta.indexOf(2); // 0 \n\ta.indexOf(7); // -1\n\n\tif (a.indexOf(7) === -1) {\n\t  // element doesn't exist in array\n\t}\n\t\n###### join\n\njoin()将数组中的所有元素(或类似数组的对象)连接到一个字符串中。\n\n\tarr.join()\n\tarr.join(separator)\n\tseparator：分隔符\n\n\tvar a = ['Wind', 'Rain', 'Fire'];\n\ta.join();    // 'Wind,Rain,Fire'\n\ta.join('-'); // 'Wind-Rain-Fire'\n\n###### keys\n\nkeys()方法返回一个新的数组迭代器对象，该对象包含数组中每个索引的键。\n\n\tarr.keys()\n\tvar arr = ['a', 'b', 'c'];\n\tvar iterator = arr.keys();\n\n\tconsole.log(iterator.next()); // { value: 0, done: false }\n\tconsole.log(iterator.next()); // { value: 1, done: false }\n\tconsole.log(iterator.next()); // { value: 2, done: false }\n\tconsole.log(iterator.next()); // { value: undefined, done: true }\n\n###### lastIndexOf\n\nlastIndexOf()方法返回在数组中可以找到给定元素的最后一个索引，如果不存在，则返回- 1。该数组向后搜索，从fromIndex开始。\n\narr.lastIndexOf(searchElement)\narr.lastIndexOf(searchElement, fromIndex)\nserachElement：查询元素。\n\nfromIndex：开始查询元素位置\n\n返回值\n\n数组中元素的一个索引;如果没有找到 -1。\n\n\tvar numbers = [2, 5, 9, 2];\n\tnumbers.lastIndexOf(2);     // 3\n\tnumbers.lastIndexOf(7);     // -1\n\tnumbers.lastIndexOf(2, 3);  // 3\n\tnumbers.lastIndexOf(2, 2);  // 0\n\tnumbers.lastIndexOf(2, -2); // 0\n\tnumbers.lastIndexOf(2, -1); // 3\n\t\n###### map\n\nmap()方法创建一个新的数组，该数组的结果是调用调用数组中的每个元素的函数。\n\n\tvar new_array = arr.map(function callback(currentValue, index, array) {\n\t\t// Return element for new_array\n\t}[, thisArg])\n\ncallback：回调函数。\n\ncurrentValue：在数组中处理当前元素\n\nindex：在数组中处理当前元素的索引。\narray：当前数组\n\n返回值\n\n每个元素的改变后的组成的新数组\n\n\tvar numbers = [1, 5, 10, 15];\n\tvar doubles = numbers.map(function(x) {\n\t   return x * 2;\n\t});\n\t// doubles is now [2, 10, 20, 30]\n\t// numbers is still [1, 5, 10, 15]\n\n\tvar numbers = [1, 4, 9];\n\tvar roots = numbers.map(Math.sqrt);\n\t// roots is now [1, 2, 3]\n\t// numbers is still [1, 4, 9]\n\t\n###### reduce\n\nreduce()方法对累加器和数组中的每个元素(从左到右)使用一个函数，以将其还原为一个值。\n\narr.reduce(callback[, initialValue])\ncallback：回调函数。\n\ninitiaValue：当前元素\n\n返回值\n\n数组的累加\n\n\t// create an array\n\tvar numbers = [0, 1, 2, 3];\n\n\t/* call reduce() on the array, passing a callback\n\tthat adds all the values together */\n\tvar result = numbers.reduce(function(accumulator, currentValue) {\n\t\treturn accumulator + currentValue;\n\t});\n\n\t// log the result\n\tconsole.log(result);\n\t// expected output: 6\n\t\n###### some\n\nsome()方法检测数组中至少一个元素是否通过所提供回调函数的条件。\n\narr.some(callback[, thisArg])\ncallback：回调函数。\n\nthisArg：当前元素\n\n返回值\n\nboolane\n\n\tfunction isBiggerThan10(element, index, array) {\n\t  return element > 10;\n\t}\n\n\t[2, 5, 8, 1, 4].some(isBiggerThan10);  // false\n\t[12, 5, 8, 1, 4].some(isBiggerThan10); // true\n\t\n###### splice\n\nsplice()方法通过删除现有元素和/或添加新元素来更改数组的内容。\n\narray.splice(start)\narray.splice(start, deleteCount)\narray.splice(start, deleteCount, item1, item2, ...)\nstart：开始位置。\n\ndeleteCount：如果deleteCount为0，则没有删除元素。在这种情况下，您应该指定至少一个新元素。\n\nitem1， item2：添加到数组中的元素，从开始索引开始。如果没有指定任何元素，splice()将只删除数组中的元素。\n\n返回值\n\n包含已删除元素的数组。如果只删除了一个元素，则返回一个元素数组。如果没有删除元素，则返回空数组。\n\n\tvar myFish = ['angel', 'clown', 'mandarin', 'sturgeon'];\n\n\tmyFish.splice(2, 0, 'drum'); // insert 'drum' at 2-index position\n\t// myFish is [\"angel\", \"clown\", \"drum\", \"mandarin\", \"sturgeon\"]\n\n\tmyFish.splice(2, 1); // remove 1 item at 2-index position (that is, \"drum\")\n\t// myFish is [\"angel\", \"clown\", \"mandarin\", \"sturgeon\"]\n\t\n###### of\n\nArray.of()方法创建一个新的数组实例，该数组实例的参数数目不定，不管参数的类型或类型。\n\nArray.of(element0[, element1[, ...[, elementN]]])\nelementN：创建数组的元素\n\n返回值\n\n返回新函数实例\n\n\tArray.of(7);       // [7] \n\tArray.of(1, 2, 3); // [1, 2, 3]\n\n\tArray(7);          // [ , , , , , , ]\n\tArray(1, 2, 3);    // [1, 2, 3]\n\n\tArray.of(1);         // [1]\n\tArray.of(1, 2, 3);   // [1, 2, 3]\n\tArray.of(undefined); // [undefined]\n\n\n\t// 实现原理（兼容）\n\tif (!Array.of) {\n\t  Array.of = function() {\n\t\treturn Array.prototype.slice.call(arguments);\n\t  };\n\t}\t\n\n\n\t\n转载：https://juejin.im/post/59c9f03df265da06602994f7?utm_source=gold_browser_extension","slug":"js-array","published":1,"date":"2017-09-28T03:26:55.636Z","updated":"2018-04-03T02:31:15.543Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjdxow6v0007p8rrw9bjrobi","content":"<h6 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat\"></a>concat</h6><p>concat() 方法用于连接两个或多个数组。</p>\n<p>该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。</p>\n<pre><code>arrayObject.concat(arrayX,arrayX,......,arrayX)\n</code></pre><p>返回值</p>\n<p>返回一个新的数组。该数组是通过把所有 arrayX 参数添加到 arrayObject 中生成的。如果要进行 concat() 操作的参数是数组，那么添加的是数组中的元素，而不是数组。</p>\n<pre><code>// create two arrays\nvar arr1 = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];\nvar arr2 = [&apos;d&apos;, &apos;e&apos;, &apos;f&apos;];\n\n/* call concat() on the first array passing\n   the second as an argument */\nvar arr3 = arr1.concat(arr2);\n\n// log the result\nconsole.log(arr3);\n// expected output: a,b,c,d,e,f    \n</code></pre><a id=\"more\"></a>\n<h6 id=\"copywithin\"><a href=\"#copyWithin\" class=\"headerlink\" title=\"copyWithin\"></a>copyWithin</h6><p>数组实例的copyWithin方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组</p>\n<p>Array.prototype.copyWithin(target, start = 0, end = this.length)<br>target （必需）：从该位置开始替换数据。<br>start （可选）：从该位置开始读取数据，默认为 0 。如果为负值，表示倒数。<br>end （可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。</p>\n<p>返回值</p>\n<p>修改后的数组</p>\n<pre><code>[1, 2, 3, 4, 5].copyWithin(-2);\n// [1, 2, 3, 1, 2]\n\n[1, 2, 3, 4, 5].copyWithin(0, 3);\n// [4, 5, 3, 4, 5]\n\n[1, 2, 3, 4, 5].copyWithin(0, 3, 4);\n// [4, 2, 3, 4, 5]\n\n[1, 2, 3, 4, 5].copyWithin(-2, -3, -1);\n// [1, 2, 3, 3, 4]\n</code></pre><h6 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries\"></a>entries</h6><p>entries()方法返回一个新的数组迭代器对象，该对象包含数组中每个索引的键/值对。</p>\n<p>返回值</p>\n<p>一个新的数组迭代器对象。</p>\n<pre><code>var a = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];\nvar iterator = a.entries();\n\nconsole.log(iterator.next().value); // [0, &apos;a&apos;]\nconsole.log(iterator.next().value); // [1, &apos;b&apos;]\nconsole.log(iterator.next().value); // [2, &apos;c&apos;]\n\nvar a = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];\nvar iterator = a.entries();\n\nfor (let e of iterator) {\n  console.log(e);\n}\n// [0, &apos;a&apos;]\n// [1, &apos;b&apos;]\n// [2, &apos;c&apos;]\n</code></pre><h6 id=\"from\"><a href=\"#from\" class=\"headerlink\" title=\"from\"></a>from</h6><p>from()方法返回一个新的数组迭代器对象，该对象包含数组中每个索引的键/值对。</p>\n<p>Array.from(arrayLike[, mapFn[, thisArg]])<br>arrayLike（必需）：一个类似数组的或可迭代的对象，可以转换为数组。<br>mapFn （可选）：映射函数来调用数组的每个元素。<br>thisArg （可选）：在执行mapFn时使用的值。</p>\n<p>返回值</p>\n<p>一个新的数组实例。</p>\n<pre><code>const bar = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\nArray.from(bar);\n// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\n\nArray.from(&apos;foo&apos;);\n// [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]\nArray.from(&apos;foo&apos;); \n// [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]\n\nvar s = new Set([&apos;foo&apos;, window]); \nArray.from(s); \n// [&quot;foo&quot;, window]var m = new Map([[1, 2], [2, 4], [4, 8]]);\nArray.from(m); \n// [[1, 2], [2, 4], [4, 8]]\n\n// arguments 参数专数组\nfunction f() {\n  return Array.from(arguments);\n}\n\nf(1, 2, 3);\n\n// [1, 2, 3]\n</code></pre><h6 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every\"></a>every</h6><p>entries()方法返回一个回调函数的条件bool值。</p>\n<p>arr.every(callback[, thisArg])<br>callback（必需）：回调函数。<br>thisArg （可选）：当前值。</p>\n<p>返回值</p>\n<p>返回 回调函数每个数组元素的bool值</p>\n<pre><code>function isBigEnough(element, index, array) { \n  return element &gt;= 10; \n} \n\n[12, 5, 8, 130, 44].every(isBigEnough);   // false \n[12, 54, 18, 130, 44].every(isBigEnough); // true\n</code></pre><h6 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill\"></a>fill</h6><p>fill()方法将数组的所有元素从起始索引填充到结束索引。</p>\n<p>arr.fill(value)<br>arr.fill(value, start)<br>arr.fill(value, start, end)<br>value：一个类似数组的或可迭代的对象，可以转换为数组。<br>start ：开始位置 默认为0<br>end ：结束位置 默认为当前length</p>\n<p>返回值</p>\n<p>修改后的数组。</p>\n<pre><code>[1, 2, 3].fill(4);               // [4, 4, 4]\n[1, 2, 3].fill(4, 1);            // [1, 4, 4]\n[1, 2, 3].fill(4, 1, 2);         // [1, 4, 3]\n[1, 2, 3].fill(4, 1, 1);         // [1, 2, 3]\n[1, 2, 3].fill(4, -3, -2);       // [4, 2, 3]\n[1, 2, 3].fill(4, NaN, NaN);     // [1, 2, 3]\nArray(3).fill(4);                // [4, 4, 4]\n[].fill.call({ length: 3 }, 4);  // {0: 4, 1: 4, 2: 4, length: 3}\n</code></pre><h6 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h6><p>filter()方法创建一个新的数组，其中包含符合回调条件的所有元素。</p>\n<p>var newArray = arr.filter(callback[, thisArg])<br>callback：回调函数。<br>thisArg：当前元素</p>\n<p>返回值</p>\n<p>一个带有符合条件的元素的新数组。</p>\n<pre><code>var words = [&quot;spray&quot;, &quot;limit&quot;, &quot;elite&quot;, &quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;];\n\nvar longWords = words.filter(function(word){\n  return word.length &gt; 6;\n});\n\n// Filtered array longWords is [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]\n\nES6\n\nvar words = [&quot;spray&quot;, &quot;limit&quot;, &quot;elite&quot;, &quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;];\n\nvar longWords = words.filter(word =&gt; word.length &gt; 6);\n\n// Filtered array longWords is [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]\n</code></pre><h6 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h6><p>find()方法返回满足回调条件的数组中第一个元素的值。否则将返回未定义。</p>\n<p>arr.find(callback[, thisArg])<br>callback：回调函数。<br>thisArg：当前元素</p>\n<p>返回值</p>\n<p>如果元素符合条件  返回数组中的值;否则,未定义。</p>\n<pre><code>function isBigEnough(element) {\n  return element &gt;= 15;\n}\n\n[12, 5, 8, 130, 44].find(isBigEnough); // 130\n</code></pre><h6 id=\"findindex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex\"></a>findIndex</h6><p>findIndex()方法返回满足回调条件的数组中第一个元素的索引。否则将返回-1。</p>\n<p>arr.findIndex(callback[, thisArg])<br>callback：回调函数。<br>thisArg：当前元素</p>\n<p>返回值</p>\n<p>如果元素符合条件 返回数组中的值的索引;否则,-1。</p>\n<pre><code>function isBigEnough(element) {\n  return element &gt;= 15;\n}\n\n[12, 5, 8, 130, 44].findIndex(isBigEnough); \n// index of 4th element in the Array is returned,\n// so this will result in &apos;3&apos;\n</code></pre><h6 id=\"foreach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h6><p>findIndex()方法返回满足回调条件的数组中第一个元素的索引。否则将返回1。</p>\n<pre><code>arr.forEach(function callback(currentValue, index, array) {\n    //your iterator\n}[, thisArg]);\n</code></pre><p>callback：回调函数。</p>\n<p>currentValue：在数组中处理当前元素</p>\n<p>index：在数组中处理当前元素的索引。<br>array：当前数组</p>\n<pre><code>var a = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];\n\na.forEach(function(element) {\n    console.log(element);\n});\n\n// a\n// b\n// c\n</code></pre><h6 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes\"></a>includes</h6><p>includes()方法确定一个数组是否包含某个元素，返回true或false。</p>\n<p>arr.includes(searchElement)<br>arr.includes(searchElement, fromIndex)<br>serachElement：查询元素。</p>\n<p>fromIndex：开始查询元素位置</p>\n<p>返回值</p>\n<p>boolean</p>\n<pre><code>var a = [1, 2, 3];\na.includes(2); // true \na.includes(4); // false\n\n[1, 2, 3].includes(2);     // true\n[1, 2, 3].includes(4);     // false\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n[1, 2, NaN].includes(NaN); // true\n</code></pre><h6 id=\"indexof\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf\"></a>indexOf</h6><p>indexOf()返回一个给定元素可以在数组中找到的第一个索引，如果不是，则返回- 1。</p>\n<p>arr.indexOf(searchElement[, fromIndex])<br>serachElement：查询元素。</p>\n<p>fromIndex：开始查询元素位置</p>\n<p>返回值</p>\n<p>返回一个给定元素可以在数组中找到的第一个索引，如果不是，则返回- 1。</p>\n<pre><code>var a = [2, 9, 9]; \na.indexOf(2); // 0 \na.indexOf(7); // -1\n\nif (a.indexOf(7) === -1) {\n  // element doesn&apos;t exist in array\n}\n</code></pre><h6 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a>join</h6><p>join()将数组中的所有元素(或类似数组的对象)连接到一个字符串中。</p>\n<pre><code>arr.join()\narr.join(separator)\nseparator：分隔符\n\nvar a = [&apos;Wind&apos;, &apos;Rain&apos;, &apos;Fire&apos;];\na.join();    // &apos;Wind,Rain,Fire&apos;\na.join(&apos;-&apos;); // &apos;Wind-Rain-Fire&apos;\n</code></pre><h6 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys\"></a>keys</h6><p>keys()方法返回一个新的数组迭代器对象，该对象包含数组中每个索引的键。</p>\n<pre><code>arr.keys()\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];\nvar iterator = arr.keys();\n\nconsole.log(iterator.next()); // { value: 0, done: false }\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n</code></pre><h6 id=\"lastindexof\"><a href=\"#lastIndexOf\" class=\"headerlink\" title=\"lastIndexOf\"></a>lastIndexOf</h6><p>lastIndexOf()方法返回在数组中可以找到给定元素的最后一个索引，如果不存在，则返回- 1。该数组向后搜索，从fromIndex开始。</p>\n<p>arr.lastIndexOf(searchElement)<br>arr.lastIndexOf(searchElement, fromIndex)<br>serachElement：查询元素。</p>\n<p>fromIndex：开始查询元素位置</p>\n<p>返回值</p>\n<p>数组中元素的一个索引;如果没有找到 -1。</p>\n<pre><code>var numbers = [2, 5, 9, 2];\nnumbers.lastIndexOf(2);     // 3\nnumbers.lastIndexOf(7);     // -1\nnumbers.lastIndexOf(2, 3);  // 3\nnumbers.lastIndexOf(2, 2);  // 0\nnumbers.lastIndexOf(2, -2); // 0\nnumbers.lastIndexOf(2, -1); // 3\n</code></pre><h6 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h6><p>map()方法创建一个新的数组，该数组的结果是调用调用数组中的每个元素的函数。</p>\n<pre><code>var new_array = arr.map(function callback(currentValue, index, array) {\n    // Return element for new_array\n}[, thisArg])\n</code></pre><p>callback：回调函数。</p>\n<p>currentValue：在数组中处理当前元素</p>\n<p>index：在数组中处理当前元素的索引。<br>array：当前数组</p>\n<p>返回值</p>\n<p>每个元素的改变后的组成的新数组</p>\n<pre><code>var numbers = [1, 5, 10, 15];\nvar doubles = numbers.map(function(x) {\n   return x * 2;\n});\n// doubles is now [2, 10, 20, 30]\n// numbers is still [1, 5, 10, 15]\n\nvar numbers = [1, 4, 9];\nvar roots = numbers.map(Math.sqrt);\n// roots is now [1, 2, 3]\n// numbers is still [1, 4, 9]\n</code></pre><h6 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h6><p>reduce()方法对累加器和数组中的每个元素(从左到右)使用一个函数，以将其还原为一个值。</p>\n<p>arr.reduce(callback[, initialValue])<br>callback：回调函数。</p>\n<p>initiaValue：当前元素</p>\n<p>返回值</p>\n<p>数组的累加</p>\n<pre><code>// create an array\nvar numbers = [0, 1, 2, 3];\n\n/* call reduce() on the array, passing a callback\nthat adds all the values together */\nvar result = numbers.reduce(function(accumulator, currentValue) {\n    return accumulator + currentValue;\n});\n\n// log the result\nconsole.log(result);\n// expected output: 6\n</code></pre><h6 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some\"></a>some</h6><p>some()方法检测数组中至少一个元素是否通过所提供回调函数的条件。</p>\n<p>arr.some(callback[, thisArg])<br>callback：回调函数。</p>\n<p>thisArg：当前元素</p>\n<p>返回值</p>\n<p>boolane</p>\n<pre><code>function isBiggerThan10(element, index, array) {\n  return element &gt; 10;\n}\n\n[2, 5, 8, 1, 4].some(isBiggerThan10);  // false\n[12, 5, 8, 1, 4].some(isBiggerThan10); // true\n</code></pre><h6 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice\"></a>splice</h6><p>splice()方法通过删除现有元素和/或添加新元素来更改数组的内容。</p>\n<p>array.splice(start)<br>array.splice(start, deleteCount)<br>array.splice(start, deleteCount, item1, item2, …)<br>start：开始位置。</p>\n<p>deleteCount：如果deleteCount为0，则没有删除元素。在这种情况下，您应该指定至少一个新元素。</p>\n<p>item1， item2：添加到数组中的元素，从开始索引开始。如果没有指定任何元素，splice()将只删除数组中的元素。</p>\n<p>返回值</p>\n<p>包含已删除元素的数组。如果只删除了一个元素，则返回一个元素数组。如果没有删除元素，则返回空数组。</p>\n<pre><code>var myFish = [&apos;angel&apos;, &apos;clown&apos;, &apos;mandarin&apos;, &apos;sturgeon&apos;];\n\nmyFish.splice(2, 0, &apos;drum&apos;); // insert &apos;drum&apos; at 2-index position\n// myFish is [&quot;angel&quot;, &quot;clown&quot;, &quot;drum&quot;, &quot;mandarin&quot;, &quot;sturgeon&quot;]\n\nmyFish.splice(2, 1); // remove 1 item at 2-index position (that is, &quot;drum&quot;)\n// myFish is [&quot;angel&quot;, &quot;clown&quot;, &quot;mandarin&quot;, &quot;sturgeon&quot;]\n</code></pre><h6 id=\"of\"><a href=\"#of\" class=\"headerlink\" title=\"of\"></a>of</h6><p>Array.of()方法创建一个新的数组实例，该数组实例的参数数目不定，不管参数的类型或类型。</p>\n<p>Array.of(element0[, element1[, …[, elementN]]])<br>elementN：创建数组的元素</p>\n<p>返回值</p>\n<p>返回新函数实例</p>\n<pre><code>Array.of(7);       // [7] \nArray.of(1, 2, 3); // [1, 2, 3]\n\nArray(7);          // [ , , , , , , ]\nArray(1, 2, 3);    // [1, 2, 3]\n\nArray.of(1);         // [1]\nArray.of(1, 2, 3);   // [1, 2, 3]\nArray.of(undefined); // [undefined]\n\n\n// 实现原理（兼容）\nif (!Array.of) {\n  Array.of = function() {\n    return Array.prototype.slice.call(arguments);\n  };\n}    \n</code></pre><p>转载：<a href=\"https://juejin.im/post/59c9f03df265da06602994f7?utm_source=gold_browser_extension\" target=\"_blank\" rel=\"external\">https://juejin.im/post/59c9f03df265da06602994f7?utm_source=gold_browser_extension</a></p>\n","site":{"data":{}},"excerpt":"<h6 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat\"></a>concat</h6><p>concat() 方法用于连接两个或多个数组。</p>\n<p>该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。</p>\n<pre><code>arrayObject.concat(arrayX,arrayX,......,arrayX)\n</code></pre><p>返回值</p>\n<p>返回一个新的数组。该数组是通过把所有 arrayX 参数添加到 arrayObject 中生成的。如果要进行 concat() 操作的参数是数组，那么添加的是数组中的元素，而不是数组。</p>\n<pre><code>// create two arrays\nvar arr1 = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];\nvar arr2 = [&apos;d&apos;, &apos;e&apos;, &apos;f&apos;];\n\n/* call concat() on the first array passing\n   the second as an argument */\nvar arr3 = arr1.concat(arr2);\n\n// log the result\nconsole.log(arr3);\n// expected output: a,b,c,d,e,f    \n</code></pre>","more":"<h6 id=\"copyWithin\"><a href=\"#copyWithin\" class=\"headerlink\" title=\"copyWithin\"></a>copyWithin</h6><p>数组实例的copyWithin方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组</p>\n<p>Array.prototype.copyWithin(target, start = 0, end = this.length)<br>target （必需）：从该位置开始替换数据。<br>start （可选）：从该位置开始读取数据，默认为 0 。如果为负值，表示倒数。<br>end （可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。</p>\n<p>返回值</p>\n<p>修改后的数组</p>\n<pre><code>[1, 2, 3, 4, 5].copyWithin(-2);\n// [1, 2, 3, 1, 2]\n\n[1, 2, 3, 4, 5].copyWithin(0, 3);\n// [4, 5, 3, 4, 5]\n\n[1, 2, 3, 4, 5].copyWithin(0, 3, 4);\n// [4, 2, 3, 4, 5]\n\n[1, 2, 3, 4, 5].copyWithin(-2, -3, -1);\n// [1, 2, 3, 3, 4]\n</code></pre><h6 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries\"></a>entries</h6><p>entries()方法返回一个新的数组迭代器对象，该对象包含数组中每个索引的键/值对。</p>\n<p>返回值</p>\n<p>一个新的数组迭代器对象。</p>\n<pre><code>var a = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];\nvar iterator = a.entries();\n\nconsole.log(iterator.next().value); // [0, &apos;a&apos;]\nconsole.log(iterator.next().value); // [1, &apos;b&apos;]\nconsole.log(iterator.next().value); // [2, &apos;c&apos;]\n\nvar a = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];\nvar iterator = a.entries();\n\nfor (let e of iterator) {\n  console.log(e);\n}\n// [0, &apos;a&apos;]\n// [1, &apos;b&apos;]\n// [2, &apos;c&apos;]\n</code></pre><h6 id=\"from\"><a href=\"#from\" class=\"headerlink\" title=\"from\"></a>from</h6><p>from()方法返回一个新的数组迭代器对象，该对象包含数组中每个索引的键/值对。</p>\n<p>Array.from(arrayLike[, mapFn[, thisArg]])<br>arrayLike（必需）：一个类似数组的或可迭代的对象，可以转换为数组。<br>mapFn （可选）：映射函数来调用数组的每个元素。<br>thisArg （可选）：在执行mapFn时使用的值。</p>\n<p>返回值</p>\n<p>一个新的数组实例。</p>\n<pre><code>const bar = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\nArray.from(bar);\n// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\n\nArray.from(&apos;foo&apos;);\n// [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]\nArray.from(&apos;foo&apos;); \n// [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]\n\nvar s = new Set([&apos;foo&apos;, window]); \nArray.from(s); \n// [&quot;foo&quot;, window]var m = new Map([[1, 2], [2, 4], [4, 8]]);\nArray.from(m); \n// [[1, 2], [2, 4], [4, 8]]\n\n// arguments 参数专数组\nfunction f() {\n  return Array.from(arguments);\n}\n\nf(1, 2, 3);\n\n// [1, 2, 3]\n</code></pre><h6 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every\"></a>every</h6><p>entries()方法返回一个回调函数的条件bool值。</p>\n<p>arr.every(callback[, thisArg])<br>callback（必需）：回调函数。<br>thisArg （可选）：当前值。</p>\n<p>返回值</p>\n<p>返回 回调函数每个数组元素的bool值</p>\n<pre><code>function isBigEnough(element, index, array) { \n  return element &gt;= 10; \n} \n\n[12, 5, 8, 130, 44].every(isBigEnough);   // false \n[12, 54, 18, 130, 44].every(isBigEnough); // true\n</code></pre><h6 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill\"></a>fill</h6><p>fill()方法将数组的所有元素从起始索引填充到结束索引。</p>\n<p>arr.fill(value)<br>arr.fill(value, start)<br>arr.fill(value, start, end)<br>value：一个类似数组的或可迭代的对象，可以转换为数组。<br>start ：开始位置 默认为0<br>end ：结束位置 默认为当前length</p>\n<p>返回值</p>\n<p>修改后的数组。</p>\n<pre><code>[1, 2, 3].fill(4);               // [4, 4, 4]\n[1, 2, 3].fill(4, 1);            // [1, 4, 4]\n[1, 2, 3].fill(4, 1, 2);         // [1, 4, 3]\n[1, 2, 3].fill(4, 1, 1);         // [1, 2, 3]\n[1, 2, 3].fill(4, -3, -2);       // [4, 2, 3]\n[1, 2, 3].fill(4, NaN, NaN);     // [1, 2, 3]\nArray(3).fill(4);                // [4, 4, 4]\n[].fill.call({ length: 3 }, 4);  // {0: 4, 1: 4, 2: 4, length: 3}\n</code></pre><h6 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h6><p>filter()方法创建一个新的数组，其中包含符合回调条件的所有元素。</p>\n<p>var newArray = arr.filter(callback[, thisArg])<br>callback：回调函数。<br>thisArg：当前元素</p>\n<p>返回值</p>\n<p>一个带有符合条件的元素的新数组。</p>\n<pre><code>var words = [&quot;spray&quot;, &quot;limit&quot;, &quot;elite&quot;, &quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;];\n\nvar longWords = words.filter(function(word){\n  return word.length &gt; 6;\n});\n\n// Filtered array longWords is [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]\n\nES6\n\nvar words = [&quot;spray&quot;, &quot;limit&quot;, &quot;elite&quot;, &quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;];\n\nvar longWords = words.filter(word =&gt; word.length &gt; 6);\n\n// Filtered array longWords is [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]\n</code></pre><h6 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h6><p>find()方法返回满足回调条件的数组中第一个元素的值。否则将返回未定义。</p>\n<p>arr.find(callback[, thisArg])<br>callback：回调函数。<br>thisArg：当前元素</p>\n<p>返回值</p>\n<p>如果元素符合条件  返回数组中的值;否则,未定义。</p>\n<pre><code>function isBigEnough(element) {\n  return element &gt;= 15;\n}\n\n[12, 5, 8, 130, 44].find(isBigEnough); // 130\n</code></pre><h6 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex\"></a>findIndex</h6><p>findIndex()方法返回满足回调条件的数组中第一个元素的索引。否则将返回-1。</p>\n<p>arr.findIndex(callback[, thisArg])<br>callback：回调函数。<br>thisArg：当前元素</p>\n<p>返回值</p>\n<p>如果元素符合条件 返回数组中的值的索引;否则,-1。</p>\n<pre><code>function isBigEnough(element) {\n  return element &gt;= 15;\n}\n\n[12, 5, 8, 130, 44].findIndex(isBigEnough); \n// index of 4th element in the Array is returned,\n// so this will result in &apos;3&apos;\n</code></pre><h6 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h6><p>findIndex()方法返回满足回调条件的数组中第一个元素的索引。否则将返回1。</p>\n<pre><code>arr.forEach(function callback(currentValue, index, array) {\n    //your iterator\n}[, thisArg]);\n</code></pre><p>callback：回调函数。</p>\n<p>currentValue：在数组中处理当前元素</p>\n<p>index：在数组中处理当前元素的索引。<br>array：当前数组</p>\n<pre><code>var a = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];\n\na.forEach(function(element) {\n    console.log(element);\n});\n\n// a\n// b\n// c\n</code></pre><h6 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes\"></a>includes</h6><p>includes()方法确定一个数组是否包含某个元素，返回true或false。</p>\n<p>arr.includes(searchElement)<br>arr.includes(searchElement, fromIndex)<br>serachElement：查询元素。</p>\n<p>fromIndex：开始查询元素位置</p>\n<p>返回值</p>\n<p>boolean</p>\n<pre><code>var a = [1, 2, 3];\na.includes(2); // true \na.includes(4); // false\n\n[1, 2, 3].includes(2);     // true\n[1, 2, 3].includes(4);     // false\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n[1, 2, NaN].includes(NaN); // true\n</code></pre><h6 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf\"></a>indexOf</h6><p>indexOf()返回一个给定元素可以在数组中找到的第一个索引，如果不是，则返回- 1。</p>\n<p>arr.indexOf(searchElement[, fromIndex])<br>serachElement：查询元素。</p>\n<p>fromIndex：开始查询元素位置</p>\n<p>返回值</p>\n<p>返回一个给定元素可以在数组中找到的第一个索引，如果不是，则返回- 1。</p>\n<pre><code>var a = [2, 9, 9]; \na.indexOf(2); // 0 \na.indexOf(7); // -1\n\nif (a.indexOf(7) === -1) {\n  // element doesn&apos;t exist in array\n}\n</code></pre><h6 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a>join</h6><p>join()将数组中的所有元素(或类似数组的对象)连接到一个字符串中。</p>\n<pre><code>arr.join()\narr.join(separator)\nseparator：分隔符\n\nvar a = [&apos;Wind&apos;, &apos;Rain&apos;, &apos;Fire&apos;];\na.join();    // &apos;Wind,Rain,Fire&apos;\na.join(&apos;-&apos;); // &apos;Wind-Rain-Fire&apos;\n</code></pre><h6 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys\"></a>keys</h6><p>keys()方法返回一个新的数组迭代器对象，该对象包含数组中每个索引的键。</p>\n<pre><code>arr.keys()\nvar arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];\nvar iterator = arr.keys();\n\nconsole.log(iterator.next()); // { value: 0, done: false }\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n</code></pre><h6 id=\"lastIndexOf\"><a href=\"#lastIndexOf\" class=\"headerlink\" title=\"lastIndexOf\"></a>lastIndexOf</h6><p>lastIndexOf()方法返回在数组中可以找到给定元素的最后一个索引，如果不存在，则返回- 1。该数组向后搜索，从fromIndex开始。</p>\n<p>arr.lastIndexOf(searchElement)<br>arr.lastIndexOf(searchElement, fromIndex)<br>serachElement：查询元素。</p>\n<p>fromIndex：开始查询元素位置</p>\n<p>返回值</p>\n<p>数组中元素的一个索引;如果没有找到 -1。</p>\n<pre><code>var numbers = [2, 5, 9, 2];\nnumbers.lastIndexOf(2);     // 3\nnumbers.lastIndexOf(7);     // -1\nnumbers.lastIndexOf(2, 3);  // 3\nnumbers.lastIndexOf(2, 2);  // 0\nnumbers.lastIndexOf(2, -2); // 0\nnumbers.lastIndexOf(2, -1); // 3\n</code></pre><h6 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h6><p>map()方法创建一个新的数组，该数组的结果是调用调用数组中的每个元素的函数。</p>\n<pre><code>var new_array = arr.map(function callback(currentValue, index, array) {\n    // Return element for new_array\n}[, thisArg])\n</code></pre><p>callback：回调函数。</p>\n<p>currentValue：在数组中处理当前元素</p>\n<p>index：在数组中处理当前元素的索引。<br>array：当前数组</p>\n<p>返回值</p>\n<p>每个元素的改变后的组成的新数组</p>\n<pre><code>var numbers = [1, 5, 10, 15];\nvar doubles = numbers.map(function(x) {\n   return x * 2;\n});\n// doubles is now [2, 10, 20, 30]\n// numbers is still [1, 5, 10, 15]\n\nvar numbers = [1, 4, 9];\nvar roots = numbers.map(Math.sqrt);\n// roots is now [1, 2, 3]\n// numbers is still [1, 4, 9]\n</code></pre><h6 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h6><p>reduce()方法对累加器和数组中的每个元素(从左到右)使用一个函数，以将其还原为一个值。</p>\n<p>arr.reduce(callback[, initialValue])<br>callback：回调函数。</p>\n<p>initiaValue：当前元素</p>\n<p>返回值</p>\n<p>数组的累加</p>\n<pre><code>// create an array\nvar numbers = [0, 1, 2, 3];\n\n/* call reduce() on the array, passing a callback\nthat adds all the values together */\nvar result = numbers.reduce(function(accumulator, currentValue) {\n    return accumulator + currentValue;\n});\n\n// log the result\nconsole.log(result);\n// expected output: 6\n</code></pre><h6 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some\"></a>some</h6><p>some()方法检测数组中至少一个元素是否通过所提供回调函数的条件。</p>\n<p>arr.some(callback[, thisArg])<br>callback：回调函数。</p>\n<p>thisArg：当前元素</p>\n<p>返回值</p>\n<p>boolane</p>\n<pre><code>function isBiggerThan10(element, index, array) {\n  return element &gt; 10;\n}\n\n[2, 5, 8, 1, 4].some(isBiggerThan10);  // false\n[12, 5, 8, 1, 4].some(isBiggerThan10); // true\n</code></pre><h6 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice\"></a>splice</h6><p>splice()方法通过删除现有元素和/或添加新元素来更改数组的内容。</p>\n<p>array.splice(start)<br>array.splice(start, deleteCount)<br>array.splice(start, deleteCount, item1, item2, …)<br>start：开始位置。</p>\n<p>deleteCount：如果deleteCount为0，则没有删除元素。在这种情况下，您应该指定至少一个新元素。</p>\n<p>item1， item2：添加到数组中的元素，从开始索引开始。如果没有指定任何元素，splice()将只删除数组中的元素。</p>\n<p>返回值</p>\n<p>包含已删除元素的数组。如果只删除了一个元素，则返回一个元素数组。如果没有删除元素，则返回空数组。</p>\n<pre><code>var myFish = [&apos;angel&apos;, &apos;clown&apos;, &apos;mandarin&apos;, &apos;sturgeon&apos;];\n\nmyFish.splice(2, 0, &apos;drum&apos;); // insert &apos;drum&apos; at 2-index position\n// myFish is [&quot;angel&quot;, &quot;clown&quot;, &quot;drum&quot;, &quot;mandarin&quot;, &quot;sturgeon&quot;]\n\nmyFish.splice(2, 1); // remove 1 item at 2-index position (that is, &quot;drum&quot;)\n// myFish is [&quot;angel&quot;, &quot;clown&quot;, &quot;mandarin&quot;, &quot;sturgeon&quot;]\n</code></pre><h6 id=\"of\"><a href=\"#of\" class=\"headerlink\" title=\"of\"></a>of</h6><p>Array.of()方法创建一个新的数组实例，该数组实例的参数数目不定，不管参数的类型或类型。</p>\n<p>Array.of(element0[, element1[, …[, elementN]]])<br>elementN：创建数组的元素</p>\n<p>返回值</p>\n<p>返回新函数实例</p>\n<pre><code>Array.of(7);       // [7] \nArray.of(1, 2, 3); // [1, 2, 3]\n\nArray(7);          // [ , , , , , , ]\nArray(1, 2, 3);    // [1, 2, 3]\n\nArray.of(1);         // [1]\nArray.of(1, 2, 3);   // [1, 2, 3]\nArray.of(undefined); // [undefined]\n\n\n// 实现原理（兼容）\nif (!Array.of) {\n  Array.of = function() {\n    return Array.prototype.slice.call(arguments);\n  };\n}    \n</code></pre><p>转载：<a href=\"https://juejin.im/post/59c9f03df265da06602994f7?utm_source=gold_browser_extension\" target=\"_blank\" rel=\"external\">https://juejin.im/post/59c9f03df265da06602994f7?utm_source=gold_browser_extension</a></p>"},{"title":"iOS Safari 中click点击事件失效的解决办法","_content":"###### 问题描述\n\n当使用委托给一个元素添加click事件时，如果事件是委托到 document 或 body 上，并且委托的元素是默认不可点击的（如 div, span 等），此时 click 事件会失效。\n\n###### 解决办法\n\n解决办法有 4 种可供选择：\n\n​1.将 click 事件直接绑定到目标​元素（​​即 .target）上\n\n2.将目标​元素换成<a>或者button等可点击的​元素\n\n3.​将click事件委托到​​​​​非document或body的​​父级元素上\n\n4.​给​目标元素加一条样式规则cursor: pointer;\n\n​推荐后两种。从解决办法来看，​推测在 safari 中，不可点击的元素的点击事件不会冒泡到父级元素。通过添加 cursor: pointer 使得元素变成了可点击的了。\n\n","source":"_posts/IOS-click-bug.md","raw":"---\ntitle: iOS Safari 中click点击事件失效的解决办法\ncategories: javascript\ntags: [web,js]\n---\n###### 问题描述\n\n当使用委托给一个元素添加click事件时，如果事件是委托到 document 或 body 上，并且委托的元素是默认不可点击的（如 div, span 等），此时 click 事件会失效。\n\n###### 解决办法\n\n解决办法有 4 种可供选择：\n\n​1.将 click 事件直接绑定到目标​元素（​​即 .target）上\n\n2.将目标​元素换成<a>或者button等可点击的​元素\n\n3.​将click事件委托到​​​​​非document或body的​​父级元素上\n\n4.​给​目标元素加一条样式规则cursor: pointer;\n\n​推荐后两种。从解决办法来看，​推测在 safari 中，不可点击的元素的点击事件不会冒泡到父级元素。通过添加 cursor: pointer 使得元素变成了可点击的了。\n\n","slug":"IOS-click-bug","published":1,"date":"2017-06-08T01:27:02.525Z","updated":"2017-06-08T03:03:52.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjdxow6x0008p8rr00c5qiol","content":"<h6 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h6><p>当使用委托给一个元素添加click事件时，如果事件是委托到 document 或 body 上，并且委托的元素是默认不可点击的（如 div, span 等），此时 click 事件会失效。</p>\n<h6 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h6><p>解决办法有 4 种可供选择：</p>\n<p>​1.将 click 事件直接绑定到目标​元素（​​即 .target）上</p>\n<p>2.将目标​元素换成<a>或者button等可点击的​元素</a></p>\n<p>3.​将click事件委托到​​​​​非document或body的​​父级元素上</p>\n<p>4.​给​目标元素加一条样式规则cursor: pointer;</p>\n<p>​推荐后两种。从解决办法来看，​推测在 safari 中，不可点击的元素的点击事件不会冒泡到父级元素。通过添加 cursor: pointer 使得元素变成了可点击的了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h6><p>当使用委托给一个元素添加click事件时，如果事件是委托到 document 或 body 上，并且委托的元素是默认不可点击的（如 div, span 等），此时 click 事件会失效。</p>\n<h6 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h6><p>解决办法有 4 种可供选择：</p>\n<p>​1.将 click 事件直接绑定到目标​元素（​​即 .target）上</p>\n<p>2.将目标​元素换成<a>或者button等可点击的​元素</a></p>\n<p>3.​将click事件委托到​​​​​非document或body的​​父级元素上</p>\n<p>4.​给​目标元素加一条样式规则cursor: pointer;</p>\n<p>​推荐后两种。从解决办法来看，​推测在 safari 中，不可点击的元素的点击事件不会冒泡到父级元素。通过添加 cursor: pointer 使得元素变成了可点击的了。</p>\n"},{"title":"Gulp 自动化构建工具-初探","_content":"\n![gulp](http://or49syh5a.bkt.clouddn.com/525072a07f737c14623sfefs1.png)\n\n<!--more-->\n\n##### 入门\n\n###### 全局安装 gulp\n\n\t$ npm install --global gulp\n\t\n###### 在项目中运用（git barsh）\n\n\t$ npm install --save-dev gulp\n\t\n###### 在项目根目录下创建 gulpfile.js 文件\n\n\tvar gulp = require('gulp');\n\t\n\tgulp.task('auto',function(){\n\t\t//默认执行的任务代码放在这里\n\t})\n\n然后使用下面命令即可：\n\n\t$ gulp auto\n\n###### 删除模块安装\n\n\t$ npm install --save-dev gulp del\n\t\n使用：\n\n\tgulp.task('clean',function(cb){\n\t\tdel(['./dist/**/*'],cb);\n\t});\n\t\n##### 常用方法整理（gulpfile.js）：\n\n\tvar gulp=require('gulp');\n\tvar concat = require('gulp-concat');//文件合并\n\tvar uglify = require('gulp-uglify');//文件压缩\n\tvar jshint = require('gulp-jshint');//jshint检查\n\tvar cleanCSS = require('gulp-clean-css');//压缩 CSS 文件\n\tvar htmlmin = require('gulp-htmlmin');//压缩 html 文件\n\tvar imagemin = require('gulp-imagemin');//压缩图片文件\n\tvar rename = require('gulp-rename');//重命名\n\tvar del = require('del');//清除文件\n\tvar rev = require('gulp-rev');//- 对文件名加MD5后缀\n\tvar revCollector = require('gulp-rev-collector');//- 路径替换\n\tvar babel = require('gulp-babel');//ES6编译为ES2015\n\tvar less = require('gulp-less');//less编译\n\tvar plumber = require('gulp-plumber');//异常处理\n\tvar notify = require('gulp-notify');\n\tvar autoprefixer = require('gulp-autoprefixer');//css3前缀自动补全\n\tvar px2rem = require('gulp-px3rem');//px转换rem\n\n\t//清除文件\n\tgulp.task('clean',function(cb){\n\t\tdel(['./dist/**/*','./rev/**/*'],cb);\n\t});\n\tgulp.task('cleanCss',function(cb){\n\t\tdel(['./dist/css/*'],cb);\n\t});\n\t//压缩、合并js\n\tgulp.task('js',function(){\n\t\treturn gulp.src('./js/*.js')\n\t\t\t.pipe(jshint())\n\t\t\t.pipe(uglify())\n\t\t\t.pipe(concat('all'))\n\t\t\t.pipe(rename(function(path){\n\t\t\t\tpath.basename +='.min';\n\t\t\t\tpath.extname ='.js'\n\t\t\t}))\n\t\t\t.pipe(rev())\n\t\t\t.pipe(gulp.dest('./dist/js/'))\n\t\t\t.pipe(rev.manifest())\n\t\t\t.pipe(gulp.dest('./rev/js'));\n\t});\n\t//less编译\n\tgulp.task('less2css',function(){\n\t\treturn gulp.src('./less/common.less')\n\t\t\t.pipe(plumber({errorHandler: notify.onError('Error: <%= error.message %>')}))  //异常处理\n\t\t\t.pipe(less())\n\t\t\t.pipe(gulp.dest('./css/'))\n\t});\n\t//压缩、合并css\n\tgulp.task('css',['less2css'],function(){\n\t\treturn gulp.src('./css/*.css')\n\t\t\t.pipe(cleanCSS())\n\t\t\t.pipe(concat('all'))\n\t\t\t.pipe(rename(function(path){\n\t\t\t\tpath.basename +='.min';\n\t\t\t\tpath.extname ='.css'\n\t\t\t}))\n\t\t\t.pipe(rev())\n\t\t\t.pipe(gulp.dest('./dist/css/'))\n\t\t\t.pipe(rev.manifest())\n\t\t\t.pipe(gulp.dest('./rev/css'));\n\t});\n\t//css3前缀补全\n\tgulp.task('autoFx',['css'],function(){\n\t   return gulp.src('./dist/css/*.css')\n\t\t\t.pipe(autoprefixer({\n\t\t\t\tbrowsers: ['last 5 versions']\n\t\t\t}))\n\t\t\t.pipe(gulp.dest('./dist/css'));\n\t});\n\t//css px2rem\n\tgulp.task('px2rem', function() {\n\t\treturn gulp.src('./dist/css/*.css')\n\t\t\t.pipe(px2rem())\n\t\t\t.pipe(gulp.dest('./dist/css'))\n\t});\n\t//压缩html\n\tgulp.task('html', function() {\n\t\tvar options = {\n\t\t\tremoveComments: true,  //清除HTML注释\n\t\t\tcollapseWhitespace: true,  //压缩HTML\n\t\t\tcollapseBooleanAttributes: true,  //省略布尔属性的值 <input checked=\"true\"/> ==> <input checked />\n\t\t\tremoveEmptyAttributes: true,  //删除所有空格作属性值 <input id=\"\" /> ==> <input />\n\t\t\tremoveScriptTypeAttributes: true,  //删除<script>的type=\"text/javascript\"\n\t\t\tremoveStyleLinkTypeAttributes: true,  //删除<style>和<link>的type=\"text/css\"\n\t\t\tminifyJS: true,  //压缩页面JS\n\t\t\tminifyCSS: true  //压缩页面CSS\n\t\t};\n\t\treturn gulp.src('./*.html')\n\t\t\t.pipe(htmlmin(options))\n\t\t\t.pipe(gulp.dest('./dist/'));\n\t});\n\t//压缩图片\n\tgulp.task('img', function(){\n\t\tgulp.src('./images/*')\n\t\t\t.pipe(imagemin({\n\t\t\t\toptimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）\n\t\t\t\tprogressive: true, //类型：Boolean 默认：false 无损压缩jpg图片\n\t\t\t\tinterlaced: true, //类型：Boolean 默认：false 隔行扫描gif进行渲染\n\t\t\t\tmultipass: true //类型：Boolean 默认：false 多次优化svg直到完全优化\n\t\t\t}))\n\t\t\t.pipe(gulp.dest('dist/images'));\n\t});\n\n\t//文件路径替换\n\tgulp.task('rev',['autoFx','js'],function(){\n\t\treturn gulp.src(['./rev/**/*.json','./dist/*.html'])\n\t\t\t.pipe(revCollector({replaceReved: true}))\n\t\t\t.pipe(gulp.dest('./dist/'));\n\t});\n\n\t//监听less修改\n\tgulp.task('lessWatch', function () {\n\t\tgulp.watch('./less/*.less', ['cleanCss','rev']);\n\t});\n\n\tgulp.task('tigger',['css','js','img','html']);\n\n\t\n##### 插件地址\n\n1. [gulp-rename](https://www.npmjs.com/package/gulp-rename)： 重命名\n2. [gulp-uglify](https://www.npmjs.com/package/gulp-uglify)：文件压缩\n3. [gulp-concat](https://www.npmjs.com/package/gulp-concat)：文件合并\n4. [gulp-less](https://www.npmjs.com/package/gulp-less)：编译 less\n5. [gulp-sass](https://www.npmjs.com/package/gulp-sass)：编译 sass\n6. [gulp-clean-css](https://www.npmjs.com/package/gulp-clean-css)：压缩 CSS 文件\n7. [gulp-htmlmin](https://www.npmjs.com/package/gulp-htmlmin)：压缩 HTML 文件\n8. [gulp-babel](https://www.npmjs.com/package/gulp-babel): 使用 babel 编译 JS 文件\n9. [gulp-jshint](https://www.npmjs.com/package/gulp-jshint)：jshint 检查\n10. [gulp-imagemin](https://www.npmjs.com/package/gulp-imagemin)：压缩jpg、png、gif等图片\n11. [gulp-rev](https://www.npmjs.com/package/gulp-rev/)：版本控制\n12. [gulp-rev-collector](https://www.npmjs.com/package/gulp-rev-collector/)：文件名称替换（rev）\n13. [gulp-autoprefixer](https://www.npmjs.com/package/gulp-autoprefixer)：css3前缀补全\n14. [gulp-px3rem](https://www.npmjs.com/package/gulp-px3rem)：css3前缀补全\n\n> [gulp中文教程](http://www.gulpjs.com.cn/)\n\n\n\n\n","source":"_posts/gulp.md","raw":"---\ntitle: Gulp 自动化构建工具-初探\ncategories: web\ntags: node\n---\n\n![gulp](http://or49syh5a.bkt.clouddn.com/525072a07f737c14623sfefs1.png)\n\n<!--more-->\n\n##### 入门\n\n###### 全局安装 gulp\n\n\t$ npm install --global gulp\n\t\n###### 在项目中运用（git barsh）\n\n\t$ npm install --save-dev gulp\n\t\n###### 在项目根目录下创建 gulpfile.js 文件\n\n\tvar gulp = require('gulp');\n\t\n\tgulp.task('auto',function(){\n\t\t//默认执行的任务代码放在这里\n\t})\n\n然后使用下面命令即可：\n\n\t$ gulp auto\n\n###### 删除模块安装\n\n\t$ npm install --save-dev gulp del\n\t\n使用：\n\n\tgulp.task('clean',function(cb){\n\t\tdel(['./dist/**/*'],cb);\n\t});\n\t\n##### 常用方法整理（gulpfile.js）：\n\n\tvar gulp=require('gulp');\n\tvar concat = require('gulp-concat');//文件合并\n\tvar uglify = require('gulp-uglify');//文件压缩\n\tvar jshint = require('gulp-jshint');//jshint检查\n\tvar cleanCSS = require('gulp-clean-css');//压缩 CSS 文件\n\tvar htmlmin = require('gulp-htmlmin');//压缩 html 文件\n\tvar imagemin = require('gulp-imagemin');//压缩图片文件\n\tvar rename = require('gulp-rename');//重命名\n\tvar del = require('del');//清除文件\n\tvar rev = require('gulp-rev');//- 对文件名加MD5后缀\n\tvar revCollector = require('gulp-rev-collector');//- 路径替换\n\tvar babel = require('gulp-babel');//ES6编译为ES2015\n\tvar less = require('gulp-less');//less编译\n\tvar plumber = require('gulp-plumber');//异常处理\n\tvar notify = require('gulp-notify');\n\tvar autoprefixer = require('gulp-autoprefixer');//css3前缀自动补全\n\tvar px2rem = require('gulp-px3rem');//px转换rem\n\n\t//清除文件\n\tgulp.task('clean',function(cb){\n\t\tdel(['./dist/**/*','./rev/**/*'],cb);\n\t});\n\tgulp.task('cleanCss',function(cb){\n\t\tdel(['./dist/css/*'],cb);\n\t});\n\t//压缩、合并js\n\tgulp.task('js',function(){\n\t\treturn gulp.src('./js/*.js')\n\t\t\t.pipe(jshint())\n\t\t\t.pipe(uglify())\n\t\t\t.pipe(concat('all'))\n\t\t\t.pipe(rename(function(path){\n\t\t\t\tpath.basename +='.min';\n\t\t\t\tpath.extname ='.js'\n\t\t\t}))\n\t\t\t.pipe(rev())\n\t\t\t.pipe(gulp.dest('./dist/js/'))\n\t\t\t.pipe(rev.manifest())\n\t\t\t.pipe(gulp.dest('./rev/js'));\n\t});\n\t//less编译\n\tgulp.task('less2css',function(){\n\t\treturn gulp.src('./less/common.less')\n\t\t\t.pipe(plumber({errorHandler: notify.onError('Error: <%= error.message %>')}))  //异常处理\n\t\t\t.pipe(less())\n\t\t\t.pipe(gulp.dest('./css/'))\n\t});\n\t//压缩、合并css\n\tgulp.task('css',['less2css'],function(){\n\t\treturn gulp.src('./css/*.css')\n\t\t\t.pipe(cleanCSS())\n\t\t\t.pipe(concat('all'))\n\t\t\t.pipe(rename(function(path){\n\t\t\t\tpath.basename +='.min';\n\t\t\t\tpath.extname ='.css'\n\t\t\t}))\n\t\t\t.pipe(rev())\n\t\t\t.pipe(gulp.dest('./dist/css/'))\n\t\t\t.pipe(rev.manifest())\n\t\t\t.pipe(gulp.dest('./rev/css'));\n\t});\n\t//css3前缀补全\n\tgulp.task('autoFx',['css'],function(){\n\t   return gulp.src('./dist/css/*.css')\n\t\t\t.pipe(autoprefixer({\n\t\t\t\tbrowsers: ['last 5 versions']\n\t\t\t}))\n\t\t\t.pipe(gulp.dest('./dist/css'));\n\t});\n\t//css px2rem\n\tgulp.task('px2rem', function() {\n\t\treturn gulp.src('./dist/css/*.css')\n\t\t\t.pipe(px2rem())\n\t\t\t.pipe(gulp.dest('./dist/css'))\n\t});\n\t//压缩html\n\tgulp.task('html', function() {\n\t\tvar options = {\n\t\t\tremoveComments: true,  //清除HTML注释\n\t\t\tcollapseWhitespace: true,  //压缩HTML\n\t\t\tcollapseBooleanAttributes: true,  //省略布尔属性的值 <input checked=\"true\"/> ==> <input checked />\n\t\t\tremoveEmptyAttributes: true,  //删除所有空格作属性值 <input id=\"\" /> ==> <input />\n\t\t\tremoveScriptTypeAttributes: true,  //删除<script>的type=\"text/javascript\"\n\t\t\tremoveStyleLinkTypeAttributes: true,  //删除<style>和<link>的type=\"text/css\"\n\t\t\tminifyJS: true,  //压缩页面JS\n\t\t\tminifyCSS: true  //压缩页面CSS\n\t\t};\n\t\treturn gulp.src('./*.html')\n\t\t\t.pipe(htmlmin(options))\n\t\t\t.pipe(gulp.dest('./dist/'));\n\t});\n\t//压缩图片\n\tgulp.task('img', function(){\n\t\tgulp.src('./images/*')\n\t\t\t.pipe(imagemin({\n\t\t\t\toptimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）\n\t\t\t\tprogressive: true, //类型：Boolean 默认：false 无损压缩jpg图片\n\t\t\t\tinterlaced: true, //类型：Boolean 默认：false 隔行扫描gif进行渲染\n\t\t\t\tmultipass: true //类型：Boolean 默认：false 多次优化svg直到完全优化\n\t\t\t}))\n\t\t\t.pipe(gulp.dest('dist/images'));\n\t});\n\n\t//文件路径替换\n\tgulp.task('rev',['autoFx','js'],function(){\n\t\treturn gulp.src(['./rev/**/*.json','./dist/*.html'])\n\t\t\t.pipe(revCollector({replaceReved: true}))\n\t\t\t.pipe(gulp.dest('./dist/'));\n\t});\n\n\t//监听less修改\n\tgulp.task('lessWatch', function () {\n\t\tgulp.watch('./less/*.less', ['cleanCss','rev']);\n\t});\n\n\tgulp.task('tigger',['css','js','img','html']);\n\n\t\n##### 插件地址\n\n1. [gulp-rename](https://www.npmjs.com/package/gulp-rename)： 重命名\n2. [gulp-uglify](https://www.npmjs.com/package/gulp-uglify)：文件压缩\n3. [gulp-concat](https://www.npmjs.com/package/gulp-concat)：文件合并\n4. [gulp-less](https://www.npmjs.com/package/gulp-less)：编译 less\n5. [gulp-sass](https://www.npmjs.com/package/gulp-sass)：编译 sass\n6. [gulp-clean-css](https://www.npmjs.com/package/gulp-clean-css)：压缩 CSS 文件\n7. [gulp-htmlmin](https://www.npmjs.com/package/gulp-htmlmin)：压缩 HTML 文件\n8. [gulp-babel](https://www.npmjs.com/package/gulp-babel): 使用 babel 编译 JS 文件\n9. [gulp-jshint](https://www.npmjs.com/package/gulp-jshint)：jshint 检查\n10. [gulp-imagemin](https://www.npmjs.com/package/gulp-imagemin)：压缩jpg、png、gif等图片\n11. [gulp-rev](https://www.npmjs.com/package/gulp-rev/)：版本控制\n12. [gulp-rev-collector](https://www.npmjs.com/package/gulp-rev-collector/)：文件名称替换（rev）\n13. [gulp-autoprefixer](https://www.npmjs.com/package/gulp-autoprefixer)：css3前缀补全\n14. [gulp-px3rem](https://www.npmjs.com/package/gulp-px3rem)：css3前缀补全\n\n> [gulp中文教程](http://www.gulpjs.com.cn/)\n\n\n\n\n","slug":"gulp","published":1,"date":"2017-06-12T09:02:52.549Z","updated":"2017-07-20T00:48:54.926Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjdxow7h000rp8rrjdw7tx8v","content":"<p><img src=\"http://or49syh5a.bkt.clouddn.com/525072a07f737c14623sfefs1.png\" alt=\"gulp\"></p>\n<a id=\"more\"></a>\n<h5 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h5><h6 id=\"全局安装-gulp\"><a href=\"#全局安装-gulp\" class=\"headerlink\" title=\"全局安装 gulp\"></a>全局安装 gulp</h6><pre><code>$ npm install --global gulp\n</code></pre><h6 id=\"在项目中运用git-barsh\"><a href=\"#在项目中运用（git-barsh）\" class=\"headerlink\" title=\"在项目中运用（git barsh）\"></a>在项目中运用（git barsh）</h6><pre><code>$ npm install --save-dev gulp\n</code></pre><h6 id=\"在项目根目录下创建-gulpfilejs-文件\"><a href=\"#在项目根目录下创建-gulpfile-js-文件\" class=\"headerlink\" title=\"在项目根目录下创建 gulpfile.js 文件\"></a>在项目根目录下创建 gulpfile.js 文件</h6><pre><code>var gulp = require(&apos;gulp&apos;);\n\ngulp.task(&apos;auto&apos;,function(){\n    //默认执行的任务代码放在这里\n})\n</code></pre><p>然后使用下面命令即可：</p>\n<pre><code>$ gulp auto\n</code></pre><h6 id=\"删除模块安装\"><a href=\"#删除模块安装\" class=\"headerlink\" title=\"删除模块安装\"></a>删除模块安装</h6><pre><code>$ npm install --save-dev gulp del\n</code></pre><p>使用：</p>\n<pre><code>gulp.task(&apos;clean&apos;,function(cb){\n    del([&apos;./dist/**/*&apos;],cb);\n});\n</code></pre><h5 id=\"常用方法整理gulpfilejs\"><a href=\"#常用方法整理（gulpfile-js）：\" class=\"headerlink\" title=\"常用方法整理（gulpfile.js）：\"></a>常用方法整理（gulpfile.js）：</h5><pre><code>var gulp=require(&apos;gulp&apos;);\nvar concat = require(&apos;gulp-concat&apos;);//文件合并\nvar uglify = require(&apos;gulp-uglify&apos;);//文件压缩\nvar jshint = require(&apos;gulp-jshint&apos;);//jshint检查\nvar cleanCSS = require(&apos;gulp-clean-css&apos;);//压缩 CSS 文件\nvar htmlmin = require(&apos;gulp-htmlmin&apos;);//压缩 html 文件\nvar imagemin = require(&apos;gulp-imagemin&apos;);//压缩图片文件\nvar rename = require(&apos;gulp-rename&apos;);//重命名\nvar del = require(&apos;del&apos;);//清除文件\nvar rev = require(&apos;gulp-rev&apos;);//- 对文件名加MD5后缀\nvar revCollector = require(&apos;gulp-rev-collector&apos;);//- 路径替换\nvar babel = require(&apos;gulp-babel&apos;);//ES6编译为ES2015\nvar less = require(&apos;gulp-less&apos;);//less编译\nvar plumber = require(&apos;gulp-plumber&apos;);//异常处理\nvar notify = require(&apos;gulp-notify&apos;);\nvar autoprefixer = require(&apos;gulp-autoprefixer&apos;);//css3前缀自动补全\nvar px2rem = require(&apos;gulp-px3rem&apos;);//px转换rem\n\n//清除文件\ngulp.task(&apos;clean&apos;,function(cb){\n    del([&apos;./dist/**/*&apos;,&apos;./rev/**/*&apos;],cb);\n});\ngulp.task(&apos;cleanCss&apos;,function(cb){\n    del([&apos;./dist/css/*&apos;],cb);\n});\n//压缩、合并js\ngulp.task(&apos;js&apos;,function(){\n    return gulp.src(&apos;./js/*.js&apos;)\n        .pipe(jshint())\n        .pipe(uglify())\n        .pipe(concat(&apos;all&apos;))\n        .pipe(rename(function(path){\n            path.basename +=&apos;.min&apos;;\n            path.extname =&apos;.js&apos;\n        }))\n        .pipe(rev())\n        .pipe(gulp.dest(&apos;./dist/js/&apos;))\n        .pipe(rev.manifest())\n        .pipe(gulp.dest(&apos;./rev/js&apos;));\n});\n//less编译\ngulp.task(&apos;less2css&apos;,function(){\n    return gulp.src(&apos;./less/common.less&apos;)\n        .pipe(plumber({errorHandler: notify.onError(&apos;Error: &lt;%= error.message %&gt;&apos;)}))  //异常处理\n        .pipe(less())\n        .pipe(gulp.dest(&apos;./css/&apos;))\n});\n//压缩、合并css\ngulp.task(&apos;css&apos;,[&apos;less2css&apos;],function(){\n    return gulp.src(&apos;./css/*.css&apos;)\n        .pipe(cleanCSS())\n        .pipe(concat(&apos;all&apos;))\n        .pipe(rename(function(path){\n            path.basename +=&apos;.min&apos;;\n            path.extname =&apos;.css&apos;\n        }))\n        .pipe(rev())\n        .pipe(gulp.dest(&apos;./dist/css/&apos;))\n        .pipe(rev.manifest())\n        .pipe(gulp.dest(&apos;./rev/css&apos;));\n});\n//css3前缀补全\ngulp.task(&apos;autoFx&apos;,[&apos;css&apos;],function(){\n   return gulp.src(&apos;./dist/css/*.css&apos;)\n        .pipe(autoprefixer({\n            browsers: [&apos;last 5 versions&apos;]\n        }))\n        .pipe(gulp.dest(&apos;./dist/css&apos;));\n});\n//css px2rem\ngulp.task(&apos;px2rem&apos;, function() {\n    return gulp.src(&apos;./dist/css/*.css&apos;)\n        .pipe(px2rem())\n        .pipe(gulp.dest(&apos;./dist/css&apos;))\n});\n//压缩html\ngulp.task(&apos;html&apos;, function() {\n    var options = {\n        removeComments: true,  //清除HTML注释\n        collapseWhitespace: true,  //压缩HTML\n        collapseBooleanAttributes: true,  //省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input checked /&gt;\n        removeEmptyAttributes: true,  //删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;\n        removeScriptTypeAttributes: true,  //删除&lt;script&gt;的type=&quot;text/javascript&quot;\n        removeStyleLinkTypeAttributes: true,  //删除&lt;style&gt;和&lt;link&gt;的type=&quot;text/css&quot;\n        minifyJS: true,  //压缩页面JS\n        minifyCSS: true  //压缩页面CSS\n    };\n    return gulp.src(&apos;./*.html&apos;)\n        .pipe(htmlmin(options))\n        .pipe(gulp.dest(&apos;./dist/&apos;));\n});\n//压缩图片\ngulp.task(&apos;img&apos;, function(){\n    gulp.src(&apos;./images/*&apos;)\n        .pipe(imagemin({\n            optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）\n            progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片\n            interlaced: true, //类型：Boolean 默认：false 隔行扫描gif进行渲染\n            multipass: true //类型：Boolean 默认：false 多次优化svg直到完全优化\n        }))\n        .pipe(gulp.dest(&apos;dist/images&apos;));\n});\n\n//文件路径替换\ngulp.task(&apos;rev&apos;,[&apos;autoFx&apos;,&apos;js&apos;],function(){\n    return gulp.src([&apos;./rev/**/*.json&apos;,&apos;./dist/*.html&apos;])\n        .pipe(revCollector({replaceReved: true}))\n        .pipe(gulp.dest(&apos;./dist/&apos;));\n});\n\n//监听less修改\ngulp.task(&apos;lessWatch&apos;, function () {\n    gulp.watch(&apos;./less/*.less&apos;, [&apos;cleanCss&apos;,&apos;rev&apos;]);\n});\n\ngulp.task(&apos;tigger&apos;,[&apos;css&apos;,&apos;js&apos;,&apos;img&apos;,&apos;html&apos;]);\n</code></pre><h5 id=\"插件地址\"><a href=\"#插件地址\" class=\"headerlink\" title=\"插件地址\"></a>插件地址</h5><ol>\n<li><a href=\"https://www.npmjs.com/package/gulp-rename\" target=\"_blank\" rel=\"external\">gulp-rename</a>： 重命名</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-uglify\" target=\"_blank\" rel=\"external\">gulp-uglify</a>：文件压缩</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-concat\" target=\"_blank\" rel=\"external\">gulp-concat</a>：文件合并</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-less\" target=\"_blank\" rel=\"external\">gulp-less</a>：编译 less</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-sass\" target=\"_blank\" rel=\"external\">gulp-sass</a>：编译 sass</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-clean-css\" target=\"_blank\" rel=\"external\">gulp-clean-css</a>：压缩 CSS 文件</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-htmlmin\" target=\"_blank\" rel=\"external\">gulp-htmlmin</a>：压缩 HTML 文件</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-babel\" target=\"_blank\" rel=\"external\">gulp-babel</a>: 使用 babel 编译 JS 文件</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-jshint\" target=\"_blank\" rel=\"external\">gulp-jshint</a>：jshint 检查</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-imagemin\" target=\"_blank\" rel=\"external\">gulp-imagemin</a>：压缩jpg、png、gif等图片</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-rev/\" target=\"_blank\" rel=\"external\">gulp-rev</a>：版本控制</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-rev-collector/\" target=\"_blank\" rel=\"external\">gulp-rev-collector</a>：文件名称替换（rev）</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-autoprefixer\" target=\"_blank\" rel=\"external\">gulp-autoprefixer</a>：css3前缀补全</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-px3rem\" target=\"_blank\" rel=\"external\">gulp-px3rem</a>：css3前缀补全</li>\n</ol>\n<blockquote>\n<p><a href=\"http://www.gulpjs.com.cn/\" target=\"_blank\" rel=\"external\">gulp中文教程</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://or49syh5a.bkt.clouddn.com/525072a07f737c14623sfefs1.png\" alt=\"gulp\"></p>","more":"<h5 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h5><h6 id=\"全局安装-gulp\"><a href=\"#全局安装-gulp\" class=\"headerlink\" title=\"全局安装 gulp\"></a>全局安装 gulp</h6><pre><code>$ npm install --global gulp\n</code></pre><h6 id=\"在项目中运用（git-barsh）\"><a href=\"#在项目中运用（git-barsh）\" class=\"headerlink\" title=\"在项目中运用（git barsh）\"></a>在项目中运用（git barsh）</h6><pre><code>$ npm install --save-dev gulp\n</code></pre><h6 id=\"在项目根目录下创建-gulpfile-js-文件\"><a href=\"#在项目根目录下创建-gulpfile-js-文件\" class=\"headerlink\" title=\"在项目根目录下创建 gulpfile.js 文件\"></a>在项目根目录下创建 gulpfile.js 文件</h6><pre><code>var gulp = require(&apos;gulp&apos;);\n\ngulp.task(&apos;auto&apos;,function(){\n    //默认执行的任务代码放在这里\n})\n</code></pre><p>然后使用下面命令即可：</p>\n<pre><code>$ gulp auto\n</code></pre><h6 id=\"删除模块安装\"><a href=\"#删除模块安装\" class=\"headerlink\" title=\"删除模块安装\"></a>删除模块安装</h6><pre><code>$ npm install --save-dev gulp del\n</code></pre><p>使用：</p>\n<pre><code>gulp.task(&apos;clean&apos;,function(cb){\n    del([&apos;./dist/**/*&apos;],cb);\n});\n</code></pre><h5 id=\"常用方法整理（gulpfile-js）：\"><a href=\"#常用方法整理（gulpfile-js）：\" class=\"headerlink\" title=\"常用方法整理（gulpfile.js）：\"></a>常用方法整理（gulpfile.js）：</h5><pre><code>var gulp=require(&apos;gulp&apos;);\nvar concat = require(&apos;gulp-concat&apos;);//文件合并\nvar uglify = require(&apos;gulp-uglify&apos;);//文件压缩\nvar jshint = require(&apos;gulp-jshint&apos;);//jshint检查\nvar cleanCSS = require(&apos;gulp-clean-css&apos;);//压缩 CSS 文件\nvar htmlmin = require(&apos;gulp-htmlmin&apos;);//压缩 html 文件\nvar imagemin = require(&apos;gulp-imagemin&apos;);//压缩图片文件\nvar rename = require(&apos;gulp-rename&apos;);//重命名\nvar del = require(&apos;del&apos;);//清除文件\nvar rev = require(&apos;gulp-rev&apos;);//- 对文件名加MD5后缀\nvar revCollector = require(&apos;gulp-rev-collector&apos;);//- 路径替换\nvar babel = require(&apos;gulp-babel&apos;);//ES6编译为ES2015\nvar less = require(&apos;gulp-less&apos;);//less编译\nvar plumber = require(&apos;gulp-plumber&apos;);//异常处理\nvar notify = require(&apos;gulp-notify&apos;);\nvar autoprefixer = require(&apos;gulp-autoprefixer&apos;);//css3前缀自动补全\nvar px2rem = require(&apos;gulp-px3rem&apos;);//px转换rem\n\n//清除文件\ngulp.task(&apos;clean&apos;,function(cb){\n    del([&apos;./dist/**/*&apos;,&apos;./rev/**/*&apos;],cb);\n});\ngulp.task(&apos;cleanCss&apos;,function(cb){\n    del([&apos;./dist/css/*&apos;],cb);\n});\n//压缩、合并js\ngulp.task(&apos;js&apos;,function(){\n    return gulp.src(&apos;./js/*.js&apos;)\n        .pipe(jshint())\n        .pipe(uglify())\n        .pipe(concat(&apos;all&apos;))\n        .pipe(rename(function(path){\n            path.basename +=&apos;.min&apos;;\n            path.extname =&apos;.js&apos;\n        }))\n        .pipe(rev())\n        .pipe(gulp.dest(&apos;./dist/js/&apos;))\n        .pipe(rev.manifest())\n        .pipe(gulp.dest(&apos;./rev/js&apos;));\n});\n//less编译\ngulp.task(&apos;less2css&apos;,function(){\n    return gulp.src(&apos;./less/common.less&apos;)\n        .pipe(plumber({errorHandler: notify.onError(&apos;Error: &lt;%= error.message %&gt;&apos;)}))  //异常处理\n        .pipe(less())\n        .pipe(gulp.dest(&apos;./css/&apos;))\n});\n//压缩、合并css\ngulp.task(&apos;css&apos;,[&apos;less2css&apos;],function(){\n    return gulp.src(&apos;./css/*.css&apos;)\n        .pipe(cleanCSS())\n        .pipe(concat(&apos;all&apos;))\n        .pipe(rename(function(path){\n            path.basename +=&apos;.min&apos;;\n            path.extname =&apos;.css&apos;\n        }))\n        .pipe(rev())\n        .pipe(gulp.dest(&apos;./dist/css/&apos;))\n        .pipe(rev.manifest())\n        .pipe(gulp.dest(&apos;./rev/css&apos;));\n});\n//css3前缀补全\ngulp.task(&apos;autoFx&apos;,[&apos;css&apos;],function(){\n   return gulp.src(&apos;./dist/css/*.css&apos;)\n        .pipe(autoprefixer({\n            browsers: [&apos;last 5 versions&apos;]\n        }))\n        .pipe(gulp.dest(&apos;./dist/css&apos;));\n});\n//css px2rem\ngulp.task(&apos;px2rem&apos;, function() {\n    return gulp.src(&apos;./dist/css/*.css&apos;)\n        .pipe(px2rem())\n        .pipe(gulp.dest(&apos;./dist/css&apos;))\n});\n//压缩html\ngulp.task(&apos;html&apos;, function() {\n    var options = {\n        removeComments: true,  //清除HTML注释\n        collapseWhitespace: true,  //压缩HTML\n        collapseBooleanAttributes: true,  //省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input checked /&gt;\n        removeEmptyAttributes: true,  //删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;\n        removeScriptTypeAttributes: true,  //删除&lt;script&gt;的type=&quot;text/javascript&quot;\n        removeStyleLinkTypeAttributes: true,  //删除&lt;style&gt;和&lt;link&gt;的type=&quot;text/css&quot;\n        minifyJS: true,  //压缩页面JS\n        minifyCSS: true  //压缩页面CSS\n    };\n    return gulp.src(&apos;./*.html&apos;)\n        .pipe(htmlmin(options))\n        .pipe(gulp.dest(&apos;./dist/&apos;));\n});\n//压缩图片\ngulp.task(&apos;img&apos;, function(){\n    gulp.src(&apos;./images/*&apos;)\n        .pipe(imagemin({\n            optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）\n            progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片\n            interlaced: true, //类型：Boolean 默认：false 隔行扫描gif进行渲染\n            multipass: true //类型：Boolean 默认：false 多次优化svg直到完全优化\n        }))\n        .pipe(gulp.dest(&apos;dist/images&apos;));\n});\n\n//文件路径替换\ngulp.task(&apos;rev&apos;,[&apos;autoFx&apos;,&apos;js&apos;],function(){\n    return gulp.src([&apos;./rev/**/*.json&apos;,&apos;./dist/*.html&apos;])\n        .pipe(revCollector({replaceReved: true}))\n        .pipe(gulp.dest(&apos;./dist/&apos;));\n});\n\n//监听less修改\ngulp.task(&apos;lessWatch&apos;, function () {\n    gulp.watch(&apos;./less/*.less&apos;, [&apos;cleanCss&apos;,&apos;rev&apos;]);\n});\n\ngulp.task(&apos;tigger&apos;,[&apos;css&apos;,&apos;js&apos;,&apos;img&apos;,&apos;html&apos;]);\n</code></pre><h5 id=\"插件地址\"><a href=\"#插件地址\" class=\"headerlink\" title=\"插件地址\"></a>插件地址</h5><ol>\n<li><a href=\"https://www.npmjs.com/package/gulp-rename\" target=\"_blank\" rel=\"external\">gulp-rename</a>： 重命名</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-uglify\" target=\"_blank\" rel=\"external\">gulp-uglify</a>：文件压缩</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-concat\" target=\"_blank\" rel=\"external\">gulp-concat</a>：文件合并</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-less\" target=\"_blank\" rel=\"external\">gulp-less</a>：编译 less</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-sass\" target=\"_blank\" rel=\"external\">gulp-sass</a>：编译 sass</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-clean-css\" target=\"_blank\" rel=\"external\">gulp-clean-css</a>：压缩 CSS 文件</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-htmlmin\" target=\"_blank\" rel=\"external\">gulp-htmlmin</a>：压缩 HTML 文件</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-babel\" target=\"_blank\" rel=\"external\">gulp-babel</a>: 使用 babel 编译 JS 文件</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-jshint\" target=\"_blank\" rel=\"external\">gulp-jshint</a>：jshint 检查</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-imagemin\" target=\"_blank\" rel=\"external\">gulp-imagemin</a>：压缩jpg、png、gif等图片</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-rev/\" target=\"_blank\" rel=\"external\">gulp-rev</a>：版本控制</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-rev-collector/\" target=\"_blank\" rel=\"external\">gulp-rev-collector</a>：文件名称替换（rev）</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-autoprefixer\" target=\"_blank\" rel=\"external\">gulp-autoprefixer</a>：css3前缀补全</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-px3rem\" target=\"_blank\" rel=\"external\">gulp-px3rem</a>：css3前缀补全</li>\n</ol>\n<blockquote>\n<p><a href=\"http://www.gulpjs.com.cn/\" target=\"_blank\" rel=\"external\">gulp中文教程</a></p>\n</blockquote>"},{"title":"天行九歌","_content":"焰灵姬，中国动画《天行九歌》系列（《秦时明月》系列姐妹篇）中的原创女性角色。来自百越的一位柔媚如水，热情似火的神秘女子。有着操纵火的能力。\n\n![](http://or49syh5a.bkt.clouddn.com/37d3d539b6003af30ec4f6a63c2ac65c1138b6fd.jpg)\n<!--more-->\n\n![](http://or49syh5a.bkt.clouddn.com/1c6e418ba61ea8d31e7c94d59e0a304e241f581e.jpg)\n![](http://or49syh5a.bkt.clouddn.com/2027cc2442a7d933d29304a2a44bd11372f001b8.jpg)\n![](http://or49syh5a.bkt.clouddn.com/20b081a7d933c895ca4578aad81373f0830200b8.jpg)\n![](http://or49syh5a.bkt.clouddn.com/364c7f3eb13533fa62e873ffa1d3fd1f40345b1e.jpg)\n![](http://or49syh5a.bkt.clouddn.com/6d331a33c895d143b14d04f27af082025baf07b8.jpg)\n![](http://or49syh5a.bkt.clouddn.com/898a6bd3fd1f41347269e5af2c1f95cad0c85e1e.jpg)\n![](http://or49syh5a.bkt.clouddn.com/93aa723533fa828b477d7d32f41f4134960a5a1e.jpg)\n![](http://or49syh5a.bkt.clouddn.com/9ea1f0fa828ba61e4ab028fe4834970a314e591e.jpg)\n![](http://or49syh5a.bkt.clouddn.com/ad1f651ea8d3fd1fa55742eb394e251f94ca5f1e.jpg)\n![](http://or49syh5a.bkt.clouddn.com/d28b8234970a304ec27c402bd8c8a786c8175c1e.jpg)\n![](http://or49syh5a.bkt.clouddn.com/e7011243ad4bd1136df657e353afa40f4afb05b8.jpg)\n![](http://or49syh5a.bkt.clouddn.com/f6a70b95d143ad4bcc15a6118b025aafa50f06b8.jpg)\n![](http://or49syh5a.bkt.clouddn.com/fed76e4bd11373f09d048f4ead0f4bfbfaed04b8.jpg)","source":"_posts/sky-nine.md","raw":"---\ntitle: 天行九歌\ncategories: 动漫\ntags: 动漫\n---\n焰灵姬，中国动画《天行九歌》系列（《秦时明月》系列姐妹篇）中的原创女性角色。来自百越的一位柔媚如水，热情似火的神秘女子。有着操纵火的能力。\n\n![](http://or49syh5a.bkt.clouddn.com/37d3d539b6003af30ec4f6a63c2ac65c1138b6fd.jpg)\n<!--more-->\n\n![](http://or49syh5a.bkt.clouddn.com/1c6e418ba61ea8d31e7c94d59e0a304e241f581e.jpg)\n![](http://or49syh5a.bkt.clouddn.com/2027cc2442a7d933d29304a2a44bd11372f001b8.jpg)\n![](http://or49syh5a.bkt.clouddn.com/20b081a7d933c895ca4578aad81373f0830200b8.jpg)\n![](http://or49syh5a.bkt.clouddn.com/364c7f3eb13533fa62e873ffa1d3fd1f40345b1e.jpg)\n![](http://or49syh5a.bkt.clouddn.com/6d331a33c895d143b14d04f27af082025baf07b8.jpg)\n![](http://or49syh5a.bkt.clouddn.com/898a6bd3fd1f41347269e5af2c1f95cad0c85e1e.jpg)\n![](http://or49syh5a.bkt.clouddn.com/93aa723533fa828b477d7d32f41f4134960a5a1e.jpg)\n![](http://or49syh5a.bkt.clouddn.com/9ea1f0fa828ba61e4ab028fe4834970a314e591e.jpg)\n![](http://or49syh5a.bkt.clouddn.com/ad1f651ea8d3fd1fa55742eb394e251f94ca5f1e.jpg)\n![](http://or49syh5a.bkt.clouddn.com/d28b8234970a304ec27c402bd8c8a786c8175c1e.jpg)\n![](http://or49syh5a.bkt.clouddn.com/e7011243ad4bd1136df657e353afa40f4afb05b8.jpg)\n![](http://or49syh5a.bkt.clouddn.com/f6a70b95d143ad4bcc15a6118b025aafa50f06b8.jpg)\n![](http://or49syh5a.bkt.clouddn.com/fed76e4bd11373f09d048f4ead0f4bfbfaed04b8.jpg)","slug":"sky-nine","published":1,"date":"2017-06-06T08:24:45.555Z","updated":"2017-06-06T08:36:46.187Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjdxowat000wp8rrmxnae3ix","content":"<p>焰灵姬，中国动画《天行九歌》系列（《秦时明月》系列姐妹篇）中的原创女性角色。来自百越的一位柔媚如水，热情似火的神秘女子。有着操纵火的能力。</p>\n<p><img src=\"http://or49syh5a.bkt.clouddn.com/37d3d539b6003af30ec4f6a63c2ac65c1138b6fd.jpg\" alt=\"\"><br><a id=\"more\"></a></p>\n<p><img src=\"http://or49syh5a.bkt.clouddn.com/1c6e418ba61ea8d31e7c94d59e0a304e241f581e.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/2027cc2442a7d933d29304a2a44bd11372f001b8.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/20b081a7d933c895ca4578aad81373f0830200b8.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/364c7f3eb13533fa62e873ffa1d3fd1f40345b1e.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/6d331a33c895d143b14d04f27af082025baf07b8.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/898a6bd3fd1f41347269e5af2c1f95cad0c85e1e.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/93aa723533fa828b477d7d32f41f4134960a5a1e.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/9ea1f0fa828ba61e4ab028fe4834970a314e591e.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/ad1f651ea8d3fd1fa55742eb394e251f94ca5f1e.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/d28b8234970a304ec27c402bd8c8a786c8175c1e.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/e7011243ad4bd1136df657e353afa40f4afb05b8.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/f6a70b95d143ad4bcc15a6118b025aafa50f06b8.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/fed76e4bd11373f09d048f4ead0f4bfbfaed04b8.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>焰灵姬，中国动画《天行九歌》系列（《秦时明月》系列姐妹篇）中的原创女性角色。来自百越的一位柔媚如水，热情似火的神秘女子。有着操纵火的能力。</p>\n<p><img src=\"http://or49syh5a.bkt.clouddn.com/37d3d539b6003af30ec4f6a63c2ac65c1138b6fd.jpg\" alt=\"\"><br>","more":"</p>\n<p><img src=\"http://or49syh5a.bkt.clouddn.com/1c6e418ba61ea8d31e7c94d59e0a304e241f581e.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/2027cc2442a7d933d29304a2a44bd11372f001b8.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/20b081a7d933c895ca4578aad81373f0830200b8.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/364c7f3eb13533fa62e873ffa1d3fd1f40345b1e.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/6d331a33c895d143b14d04f27af082025baf07b8.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/898a6bd3fd1f41347269e5af2c1f95cad0c85e1e.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/93aa723533fa828b477d7d32f41f4134960a5a1e.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/9ea1f0fa828ba61e4ab028fe4834970a314e591e.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/ad1f651ea8d3fd1fa55742eb394e251f94ca5f1e.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/d28b8234970a304ec27c402bd8c8a786c8175c1e.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/e7011243ad4bd1136df657e353afa40f4afb05b8.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/f6a70b95d143ad4bcc15a6118b025aafa50f06b8.jpg\" alt=\"\"><br><img src=\"http://or49syh5a.bkt.clouddn.com/fed76e4bd11373f09d048f4ead0f4bfbfaed04b8.jpg\" alt=\"\"></p>"},{"title":"Javascript常用方法","_content":"###### 正则表达式获取地址栏参数\n\n\tfunction GetQueryString(t){\n        var n = new RegExp(\"(^|&)\" + t + \"=([^&]*)(&|$)\", \"i\"), e = window.location.search.substr(1).match(n);\n        return null != e ? decodeURI(e[2]) : null\n\t}\n\n<!--more-->\n\t\n###### 获取指定数量随机数\n\n\t//max数组返回[0-max]\n\tfunction randomNum(max){\n\t\tvar randoms=[];\n\t\twhile (true)\n\t\t{\n\t\t\tvar isExists = false;\n\t\t\tvar random = parseInt(0 + max * (Math.random()))\n\t\t\tfor (var i = 0; i < randoms.length; i++) {\n\t\t\t\tif (random === randoms[i]) {\n\t\t\t\t\tisExists = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!isExists) randoms.push(random);\n\t\t\t//设置返回数组长度（此处默认为6位）\n\t\t\tif (randoms.length === 6)break;\n\t\t}\n\t\treturn randoms;\n\t}\n\n###### 获取浏览器类型\n\n    function getBrowserType() {\n        var t = navigator.userAgent.toLowerCase(), n = \"\";\n        return t.indexOf(\"msie\") > 0 && (n = \"IE\"), t.indexOf(\"firefox\") > 0 && (n = \"firefox\"), t.indexOf(\"chrome\") > 0 && t.indexOf(\"mb2345browser\") < 0 && t.indexOf(\"360 aphone browser\") < 0 && (n = \"chrome\"), (t.indexOf(\"360 aphone browser\") > 0 || t.indexOf(\"qhbrowser\") > 0) && (n = \"360\"), t.indexOf(\"ucbrowser\") > 0 && (n = \"UC\"), t.indexOf(\"micromessenger\") > 0 && (n = \"WeChat\"), (t.indexOf(\"mqqbrowser\") > 0 || t.indexOf(\"qq\") > 0) && t.indexOf(\"micromessenger\") < 0 && (n = \"QQ\"), t.indexOf(\"miuibrowser\") > 0 && (n = \"MIUI\"), t.indexOf(\"mb2345browser\") > 0 && (n = \"2345\"), t.indexOf(\"sogoumobilebrowser\") > 0 && (n = \"sogou\"), t.indexOf(\"liebaofast\") > 0 && (n = \"liebao\"), t.indexOf(\"safari\") > 0 && t.indexOf(\"chrome\") < 0 && t.indexOf(\"ucbrowser\") < 0 && t.indexOf(\"micromessenger\") < 0 && t.indexOf(\"mqqbrowser\") < 0 && t.indexOf(\"miuibrowser\") < 0 && t.indexOf(\"mb2345browser\") < 0 && t.indexOf(\"sogoumobilebrowser\") < 0 && t.indexOf(\"liebaofast\") < 0 && t.indexOf(\"qhbrowser\") < 0 && (n = \"safari\"), n\n    }\n\t\n###### 获取设备系统类型及版本号\n\n\tfunction getOsType() {\n        var t = navigator.userAgent.toLowerCase(), n = \"\";\n        if (/android/i.test(navigator.userAgent)) {\n            var e = t.indexOf(\"android\");\n            version = t.substr(e + 8, 3), n = \"Android \" + version\n        }\n        if (/(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent)) {\n            var e = t.indexOf(\"os\");\n            version = t.substr(e + 3, 3), n = \"iOS \" + version\n        }\n        return !/Linux/i.test(navigator.userAgent) || /android/i.test(navigator.userAgent) || /(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent) || (n = \"Linux\"),\n        /windows|win32/i.test(navigator.userAgent) && (n = \"windows32\"), /windows|win32/i.test(navigator.userAgent) && (n = \"windows64\"), n\n    }\n\t\n###### 向页面注入js代码\n\n\t//参数说明：\n\t// t：js内容（字符串）\n\t// n: 回调函数\n\t// e: 注入js的位置，eg：document.getElementById('indexHeader')\n\tfunction createScript(t, n, e) {\n        if (t) {\n            var r = document.getElementsByTagName(\"head\")[0], i = document.createElement(\"script\");\n            i.setAttribute(\"type\", \"text/javascript\"), i.innerHTML = t, e ? e.appendChild(i) : r.appendChild(i), n()\n        }\n    }\n\t\n###### 向页面注入css代码\n\n\t//参数说明：\n\t// t：css内容（字符串）\n\t// n: 回调函数\n\t// e: 注入css的位置，eg：document.getElementById('indexHeader')\n\tfunction createStyle(t, n, e) {\n\t\tif (t) {\n            var r = document.getElementsByTagName(\"head\")[0], i = document.createElement(\"style\");\n            i.innerHTML = t, e ? e.appendChild(i) : r.appendChild(i), n && n()\n        }\n    }\n\t\n###### 时间格式化\n\n\t//调用方法:getSpecialTimeStr('2017-04-14 15:50:00')\n\tfunction getSpecialTimeStr(t) {\n        var n = this.strToTime(t);\n        if (!n)return !1;\n        var e = (new Date).getTime(), r = Number(e - n), i = 864e5, o = 36e5, u = 6e4;\n        if (r >= i) {\n            var a = r / i;\n            return a > 2 ? this.timeToString(n) : a > 1 ? \"前天\" : \"昨天\"\n        }\n        return r >= o ? Math.floor(r / o) + \"小时前\" : r >= u ? Math.floor(r / u) + \"分钟前\" : \"最新\"\n    }\n\t\n###### 数组扩展方法\n\t\n\t//删除指定元素\n\tArray.prototype.remove = function(val) {\n\t\tvar index = this.indexOf(val);\n\t\tif (index > -1) {\n\t\t\tthis.splice(index, 1);\n\t\t}\n\t};\n\t//集合取交集\n\tArray.intersect = function () {\n\t\tvar result = new Array();\n\t\tvar obj = {};\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tfor (var j = 0; j < arguments[i].length; j++) {\n\t\t\t\tvar str = arguments[i][j];\n\t\t\t\tif (!obj[str]) {\n\t\t\t\t\tobj[str] = 1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tobj[str]++;\n\t\t\t\t\tif (obj[str] == arguments.length)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(str);\n\t\t\t\t\t}\n\t\t\t\t}//end else\n\t\t\t}//end for j\n\t\t}//end for i\n\t\treturn result;\n\t}\n\t//集合去掉重复\n\tArray.prototype.uniquelize = function () {\n\t\tvar tmp = {},\n\t\t\tret = [];\n\t\tfor (var i = 0, j = this.length; i < j; i++) {\n\t\t\tif (!tmp[this[i]]) {\n\t\t\t\ttmp[this[i]] = 1;\n\t\t\t\tret.push(this[i]);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\t//并集\n\tArray.union = function () {\n\t\tvar arr = new Array();\n\t\tvar obj = {};\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tfor (var j = 0; j < arguments[i].length; j++)\n\t\t\t{\n\t\t\t\tvar str=arguments[i][j];\n\t\t\t\tif (!obj[str])\n\t\t\t\t{\n\t\t\t\t\tobj[str] = 1;\n\t\t\t\t\tarr.push(str);\n\t\t\t\t}\n\t\t\t}//end for j\n\t\t}//end for i\n\t\treturn arr;\n\t}\n\n\t//2个集合的差集 在arr不存在\n\tArray.prototype.minus = function (arr) {\n\t\tvar result = new Array();\n\t\tvar obj = {};\n\t\tfor (var i = 0; i < arr.length; i++) {\n\t\t\tobj[arr[i]] = 1;\n\t\t}\n\t\tfor (var j = 0; j < this.length; j++) {\n\t\t\tif (!obj[this[j]])\n\t\t\t{\n\t\t\t\tobj[this[j]] = 1;\n\t\t\t\tresult.push(this[j]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t//数组随机显示\n\tArray.prototype.shuffle = function() {\n\t\tvar input = this;\n\t\tfor (var i = input.length-1; i >=0; i--) {\n\t\t\tvar randomIndex = Math.floor(Math.random()*(i+1));\n\t\t\tvar itemAtIndex = input[randomIndex];\n\t\t\tinput[randomIndex] = input[i];\n\t\t\tinput[i] = itemAtIndex;\n\t\t}\n\t\treturn input;\n\t}\n\t\n###### 公用方法\n\n\tvar GLOBAL = {},\n\t GLOBAL.Js = {\n\t\ttrim: function (t) {\n\t\t\treturn t.replace(/^\\s+|\\s+$/g, \"\")\n\t\t}, isNumber: function (t) {\n\t\t\treturn !isNaN(t)\n\t\t}, isString: function (t) {\n\t\t\treturn \"string\" == typeof t\n\t\t}, isBoolean: function (t) {\n\t\t\treturn \"boolean\" == typeof t\n\t\t}, isFunction: function (t) {\n\t\t\treturn \"function\" == typeof t\n\t\t}, isNull: function (t) {\n\t\t\treturn null === t\n\t\t}, isUndefined: function (t) {\n\t\t\treturn \"undefined\" == typeof t\n\t\t}, isEmpty: function (t) {\n\t\t\treturn /^\\s*$/.test(t)\n\t\t}, isArray: function (t) {\n\t\t\treturn t instanceof Array\n\t\t}\n\t},\n\t//cookie操作\n\tGLOBAL.Cookie = {\n\t\tset: function (t, n, e) {\n\t\t\tvar r = e ? 60 * Number(e) * 60 * 1e3 : 864e5, i = new Date;\n\t\t\ti.setTime(i.getTime() + r);\n\t\t\tvar o = e ? \"; expires=\" + i.toUTCString() : \"\";\n\t\t\tdocument.cookie = t + \"=\" + encodeURI(n) + o;\n\t\t}, get: function (t) {\n\t\t\tvar arr,reg=new RegExp(\"(^| )\"+t+\"=([^;]*)(;|$)\");\n\t\t\tif(arr=document.cookie.match(reg)){ return unescape(arr[2]);}else{return null;}\n\t\t}, del: function (t) {\n\t\t\tvar cval=this.get(t);\n\t\t\tif(cval!=null){\n\t\t\t\tdocument.cookie= t + \"=\"+cval+\";expires=\"+(new Date(0)).toGMTString();\n\t\t\t}\n\t\t}\n\t}, \n\t//数组比较返回差异的地方\n\tGLOBAL.Array = {\n\t\tdifference: function (t, n) {\n\t\t\ttry {\n\t\t\t\tvar e = [], r = 0, i = t.length;\n\t\t\t\tfor (r = 0; r < i; r++)n.contains(t[r]) || e.push(t[r]);\n\t\t\t\treturn e\n\t\t\t} catch (o) {\n\t\t\t\treturn console.error(o), t\n\t\t\t}\n\t\t}\n\t}, \n\t//终端判断\n\tGLOBAL.Os = function () {\n\t\tfor (var t = navigator.userAgent, n = new Array(\"Android\", \"iPhone\", \"SymbianOS\", \"Windows Phone\", \"iPad\", \"iPod\"), e = !1, r = 0; r < n.length; r++)if (t.indexOf(n[r]) > -1) {\n\t\t\te = !0;\n\t\t\tbreak\n\t\t}\n\t\treturn {\n\t\t\tmobile: e,\n\t\t\tios: !!t.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/),\n\t\t\tandroid: t.indexOf(\"Android\") > -1 || t.indexOf(\"Linux\") > -1,\n\t\t\tiphone: t.indexOf(\"iPhone\") > -1,\n\t\t\tipad: t.indexOf(\"iPad\") > -1,\n\t\t\twebapp: t.indexOf(\"Safari\") === -1\n\t\t}\n\t}(), \n\t//浏览器类型判断\n\tGLOBAL.Browser = function () {\n\t\tvar t = navigator.userAgent, n = GLOBAL.Os.mobile;\n\t\treturn n ? {\n\t\t\twechat: t.indexOf(\"MicroMessenger\") > -1,\n\t\t\tweibo: t.toLowerCase().indexOf(\"weibo\") > -1,\n\t\t\tqq: t.indexOf(\"QQ/\") > -1,\n\t\t\tqqbrowser: t.indexOf(\"MQQBrowser\") > -1,\n\t\t\tqybrowser: t.indexOf(\"QianYing\") > -1\n\t\t} : {}\n\t}();\n\t\n\t","source":"_posts/js-common-fun.md","raw":"---\ntitle: Javascript常用方法\ncategories: javascript\ntags: [web,js]\n---\n###### 正则表达式获取地址栏参数\n\n\tfunction GetQueryString(t){\n        var n = new RegExp(\"(^|&)\" + t + \"=([^&]*)(&|$)\", \"i\"), e = window.location.search.substr(1).match(n);\n        return null != e ? decodeURI(e[2]) : null\n\t}\n\n<!--more-->\n\t\n###### 获取指定数量随机数\n\n\t//max数组返回[0-max]\n\tfunction randomNum(max){\n\t\tvar randoms=[];\n\t\twhile (true)\n\t\t{\n\t\t\tvar isExists = false;\n\t\t\tvar random = parseInt(0 + max * (Math.random()))\n\t\t\tfor (var i = 0; i < randoms.length; i++) {\n\t\t\t\tif (random === randoms[i]) {\n\t\t\t\t\tisExists = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!isExists) randoms.push(random);\n\t\t\t//设置返回数组长度（此处默认为6位）\n\t\t\tif (randoms.length === 6)break;\n\t\t}\n\t\treturn randoms;\n\t}\n\n###### 获取浏览器类型\n\n    function getBrowserType() {\n        var t = navigator.userAgent.toLowerCase(), n = \"\";\n        return t.indexOf(\"msie\") > 0 && (n = \"IE\"), t.indexOf(\"firefox\") > 0 && (n = \"firefox\"), t.indexOf(\"chrome\") > 0 && t.indexOf(\"mb2345browser\") < 0 && t.indexOf(\"360 aphone browser\") < 0 && (n = \"chrome\"), (t.indexOf(\"360 aphone browser\") > 0 || t.indexOf(\"qhbrowser\") > 0) && (n = \"360\"), t.indexOf(\"ucbrowser\") > 0 && (n = \"UC\"), t.indexOf(\"micromessenger\") > 0 && (n = \"WeChat\"), (t.indexOf(\"mqqbrowser\") > 0 || t.indexOf(\"qq\") > 0) && t.indexOf(\"micromessenger\") < 0 && (n = \"QQ\"), t.indexOf(\"miuibrowser\") > 0 && (n = \"MIUI\"), t.indexOf(\"mb2345browser\") > 0 && (n = \"2345\"), t.indexOf(\"sogoumobilebrowser\") > 0 && (n = \"sogou\"), t.indexOf(\"liebaofast\") > 0 && (n = \"liebao\"), t.indexOf(\"safari\") > 0 && t.indexOf(\"chrome\") < 0 && t.indexOf(\"ucbrowser\") < 0 && t.indexOf(\"micromessenger\") < 0 && t.indexOf(\"mqqbrowser\") < 0 && t.indexOf(\"miuibrowser\") < 0 && t.indexOf(\"mb2345browser\") < 0 && t.indexOf(\"sogoumobilebrowser\") < 0 && t.indexOf(\"liebaofast\") < 0 && t.indexOf(\"qhbrowser\") < 0 && (n = \"safari\"), n\n    }\n\t\n###### 获取设备系统类型及版本号\n\n\tfunction getOsType() {\n        var t = navigator.userAgent.toLowerCase(), n = \"\";\n        if (/android/i.test(navigator.userAgent)) {\n            var e = t.indexOf(\"android\");\n            version = t.substr(e + 8, 3), n = \"Android \" + version\n        }\n        if (/(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent)) {\n            var e = t.indexOf(\"os\");\n            version = t.substr(e + 3, 3), n = \"iOS \" + version\n        }\n        return !/Linux/i.test(navigator.userAgent) || /android/i.test(navigator.userAgent) || /(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent) || (n = \"Linux\"),\n        /windows|win32/i.test(navigator.userAgent) && (n = \"windows32\"), /windows|win32/i.test(navigator.userAgent) && (n = \"windows64\"), n\n    }\n\t\n###### 向页面注入js代码\n\n\t//参数说明：\n\t// t：js内容（字符串）\n\t// n: 回调函数\n\t// e: 注入js的位置，eg：document.getElementById('indexHeader')\n\tfunction createScript(t, n, e) {\n        if (t) {\n            var r = document.getElementsByTagName(\"head\")[0], i = document.createElement(\"script\");\n            i.setAttribute(\"type\", \"text/javascript\"), i.innerHTML = t, e ? e.appendChild(i) : r.appendChild(i), n()\n        }\n    }\n\t\n###### 向页面注入css代码\n\n\t//参数说明：\n\t// t：css内容（字符串）\n\t// n: 回调函数\n\t// e: 注入css的位置，eg：document.getElementById('indexHeader')\n\tfunction createStyle(t, n, e) {\n\t\tif (t) {\n            var r = document.getElementsByTagName(\"head\")[0], i = document.createElement(\"style\");\n            i.innerHTML = t, e ? e.appendChild(i) : r.appendChild(i), n && n()\n        }\n    }\n\t\n###### 时间格式化\n\n\t//调用方法:getSpecialTimeStr('2017-04-14 15:50:00')\n\tfunction getSpecialTimeStr(t) {\n        var n = this.strToTime(t);\n        if (!n)return !1;\n        var e = (new Date).getTime(), r = Number(e - n), i = 864e5, o = 36e5, u = 6e4;\n        if (r >= i) {\n            var a = r / i;\n            return a > 2 ? this.timeToString(n) : a > 1 ? \"前天\" : \"昨天\"\n        }\n        return r >= o ? Math.floor(r / o) + \"小时前\" : r >= u ? Math.floor(r / u) + \"分钟前\" : \"最新\"\n    }\n\t\n###### 数组扩展方法\n\t\n\t//删除指定元素\n\tArray.prototype.remove = function(val) {\n\t\tvar index = this.indexOf(val);\n\t\tif (index > -1) {\n\t\t\tthis.splice(index, 1);\n\t\t}\n\t};\n\t//集合取交集\n\tArray.intersect = function () {\n\t\tvar result = new Array();\n\t\tvar obj = {};\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tfor (var j = 0; j < arguments[i].length; j++) {\n\t\t\t\tvar str = arguments[i][j];\n\t\t\t\tif (!obj[str]) {\n\t\t\t\t\tobj[str] = 1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tobj[str]++;\n\t\t\t\t\tif (obj[str] == arguments.length)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(str);\n\t\t\t\t\t}\n\t\t\t\t}//end else\n\t\t\t}//end for j\n\t\t}//end for i\n\t\treturn result;\n\t}\n\t//集合去掉重复\n\tArray.prototype.uniquelize = function () {\n\t\tvar tmp = {},\n\t\t\tret = [];\n\t\tfor (var i = 0, j = this.length; i < j; i++) {\n\t\t\tif (!tmp[this[i]]) {\n\t\t\t\ttmp[this[i]] = 1;\n\t\t\t\tret.push(this[i]);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\t//并集\n\tArray.union = function () {\n\t\tvar arr = new Array();\n\t\tvar obj = {};\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tfor (var j = 0; j < arguments[i].length; j++)\n\t\t\t{\n\t\t\t\tvar str=arguments[i][j];\n\t\t\t\tif (!obj[str])\n\t\t\t\t{\n\t\t\t\t\tobj[str] = 1;\n\t\t\t\t\tarr.push(str);\n\t\t\t\t}\n\t\t\t}//end for j\n\t\t}//end for i\n\t\treturn arr;\n\t}\n\n\t//2个集合的差集 在arr不存在\n\tArray.prototype.minus = function (arr) {\n\t\tvar result = new Array();\n\t\tvar obj = {};\n\t\tfor (var i = 0; i < arr.length; i++) {\n\t\t\tobj[arr[i]] = 1;\n\t\t}\n\t\tfor (var j = 0; j < this.length; j++) {\n\t\t\tif (!obj[this[j]])\n\t\t\t{\n\t\t\t\tobj[this[j]] = 1;\n\t\t\t\tresult.push(this[j]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t//数组随机显示\n\tArray.prototype.shuffle = function() {\n\t\tvar input = this;\n\t\tfor (var i = input.length-1; i >=0; i--) {\n\t\t\tvar randomIndex = Math.floor(Math.random()*(i+1));\n\t\t\tvar itemAtIndex = input[randomIndex];\n\t\t\tinput[randomIndex] = input[i];\n\t\t\tinput[i] = itemAtIndex;\n\t\t}\n\t\treturn input;\n\t}\n\t\n###### 公用方法\n\n\tvar GLOBAL = {},\n\t GLOBAL.Js = {\n\t\ttrim: function (t) {\n\t\t\treturn t.replace(/^\\s+|\\s+$/g, \"\")\n\t\t}, isNumber: function (t) {\n\t\t\treturn !isNaN(t)\n\t\t}, isString: function (t) {\n\t\t\treturn \"string\" == typeof t\n\t\t}, isBoolean: function (t) {\n\t\t\treturn \"boolean\" == typeof t\n\t\t}, isFunction: function (t) {\n\t\t\treturn \"function\" == typeof t\n\t\t}, isNull: function (t) {\n\t\t\treturn null === t\n\t\t}, isUndefined: function (t) {\n\t\t\treturn \"undefined\" == typeof t\n\t\t}, isEmpty: function (t) {\n\t\t\treturn /^\\s*$/.test(t)\n\t\t}, isArray: function (t) {\n\t\t\treturn t instanceof Array\n\t\t}\n\t},\n\t//cookie操作\n\tGLOBAL.Cookie = {\n\t\tset: function (t, n, e) {\n\t\t\tvar r = e ? 60 * Number(e) * 60 * 1e3 : 864e5, i = new Date;\n\t\t\ti.setTime(i.getTime() + r);\n\t\t\tvar o = e ? \"; expires=\" + i.toUTCString() : \"\";\n\t\t\tdocument.cookie = t + \"=\" + encodeURI(n) + o;\n\t\t}, get: function (t) {\n\t\t\tvar arr,reg=new RegExp(\"(^| )\"+t+\"=([^;]*)(;|$)\");\n\t\t\tif(arr=document.cookie.match(reg)){ return unescape(arr[2]);}else{return null;}\n\t\t}, del: function (t) {\n\t\t\tvar cval=this.get(t);\n\t\t\tif(cval!=null){\n\t\t\t\tdocument.cookie= t + \"=\"+cval+\";expires=\"+(new Date(0)).toGMTString();\n\t\t\t}\n\t\t}\n\t}, \n\t//数组比较返回差异的地方\n\tGLOBAL.Array = {\n\t\tdifference: function (t, n) {\n\t\t\ttry {\n\t\t\t\tvar e = [], r = 0, i = t.length;\n\t\t\t\tfor (r = 0; r < i; r++)n.contains(t[r]) || e.push(t[r]);\n\t\t\t\treturn e\n\t\t\t} catch (o) {\n\t\t\t\treturn console.error(o), t\n\t\t\t}\n\t\t}\n\t}, \n\t//终端判断\n\tGLOBAL.Os = function () {\n\t\tfor (var t = navigator.userAgent, n = new Array(\"Android\", \"iPhone\", \"SymbianOS\", \"Windows Phone\", \"iPad\", \"iPod\"), e = !1, r = 0; r < n.length; r++)if (t.indexOf(n[r]) > -1) {\n\t\t\te = !0;\n\t\t\tbreak\n\t\t}\n\t\treturn {\n\t\t\tmobile: e,\n\t\t\tios: !!t.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/),\n\t\t\tandroid: t.indexOf(\"Android\") > -1 || t.indexOf(\"Linux\") > -1,\n\t\t\tiphone: t.indexOf(\"iPhone\") > -1,\n\t\t\tipad: t.indexOf(\"iPad\") > -1,\n\t\t\twebapp: t.indexOf(\"Safari\") === -1\n\t\t}\n\t}(), \n\t//浏览器类型判断\n\tGLOBAL.Browser = function () {\n\t\tvar t = navigator.userAgent, n = GLOBAL.Os.mobile;\n\t\treturn n ? {\n\t\t\twechat: t.indexOf(\"MicroMessenger\") > -1,\n\t\t\tweibo: t.toLowerCase().indexOf(\"weibo\") > -1,\n\t\t\tqq: t.indexOf(\"QQ/\") > -1,\n\t\t\tqqbrowser: t.indexOf(\"MQQBrowser\") > -1,\n\t\t\tqybrowser: t.indexOf(\"QianYing\") > -1\n\t\t} : {}\n\t}();\n\t\n\t","slug":"js-common-fun","published":1,"date":"2017-06-08T01:44:48.194Z","updated":"2017-09-04T07:52:27.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjdxowau000xp8rrkg0yd43p","content":"<h6 id=\"正则表达式获取地址栏参数\"><a href=\"#正则表达式获取地址栏参数\" class=\"headerlink\" title=\"正则表达式获取地址栏参数\"></a>正则表达式获取地址栏参数</h6><pre><code>function GetQueryString(t){\n    var n = new RegExp(&quot;(^|&amp;)&quot; + t + &quot;=([^&amp;]*)(&amp;|$)&quot;, &quot;i&quot;), e = window.location.search.substr(1).match(n);\n    return null != e ? decodeURI(e[2]) : null\n}\n</code></pre><a id=\"more\"></a>\n<h6 id=\"获取指定数量随机数\"><a href=\"#获取指定数量随机数\" class=\"headerlink\" title=\"获取指定数量随机数\"></a>获取指定数量随机数</h6><pre><code>//max数组返回[0-max]\nfunction randomNum(max){\n    var randoms=[];\n    while (true)\n    {\n        var isExists = false;\n        var random = parseInt(0 + max * (Math.random()))\n        for (var i = 0; i &lt; randoms.length; i++) {\n            if (random === randoms[i]) {\n                isExists = true;\n                break;\n            }\n        }\n        if (!isExists) randoms.push(random);\n        //设置返回数组长度（此处默认为6位）\n        if (randoms.length === 6)break;\n    }\n    return randoms;\n}\n</code></pre><h6 id=\"获取浏览器类型\"><a href=\"#获取浏览器类型\" class=\"headerlink\" title=\"获取浏览器类型\"></a>获取浏览器类型</h6><pre><code>function getBrowserType() {\n    var t = navigator.userAgent.toLowerCase(), n = &quot;&quot;;\n    return t.indexOf(&quot;msie&quot;) &gt; 0 &amp;&amp; (n = &quot;IE&quot;), t.indexOf(&quot;firefox&quot;) &gt; 0 &amp;&amp; (n = &quot;firefox&quot;), t.indexOf(&quot;chrome&quot;) &gt; 0 &amp;&amp; t.indexOf(&quot;mb2345browser&quot;) &lt; 0 &amp;&amp; t.indexOf(&quot;360 aphone browser&quot;) &lt; 0 &amp;&amp; (n = &quot;chrome&quot;), (t.indexOf(&quot;360 aphone browser&quot;) &gt; 0 || t.indexOf(&quot;qhbrowser&quot;) &gt; 0) &amp;&amp; (n = &quot;360&quot;), t.indexOf(&quot;ucbrowser&quot;) &gt; 0 &amp;&amp; (n = &quot;UC&quot;), t.indexOf(&quot;micromessenger&quot;) &gt; 0 &amp;&amp; (n = &quot;WeChat&quot;), (t.indexOf(&quot;mqqbrowser&quot;) &gt; 0 || t.indexOf(&quot;qq&quot;) &gt; 0) &amp;&amp; t.indexOf(&quot;micromessenger&quot;) &lt; 0 &amp;&amp; (n = &quot;QQ&quot;), t.indexOf(&quot;miuibrowser&quot;) &gt; 0 &amp;&amp; (n = &quot;MIUI&quot;), t.indexOf(&quot;mb2345browser&quot;) &gt; 0 &amp;&amp; (n = &quot;2345&quot;), t.indexOf(&quot;sogoumobilebrowser&quot;) &gt; 0 &amp;&amp; (n = &quot;sogou&quot;), t.indexOf(&quot;liebaofast&quot;) &gt; 0 &amp;&amp; (n = &quot;liebao&quot;), t.indexOf(&quot;safari&quot;) &gt; 0 &amp;&amp; t.indexOf(&quot;chrome&quot;) &lt; 0 &amp;&amp; t.indexOf(&quot;ucbrowser&quot;) &lt; 0 &amp;&amp; t.indexOf(&quot;micromessenger&quot;) &lt; 0 &amp;&amp; t.indexOf(&quot;mqqbrowser&quot;) &lt; 0 &amp;&amp; t.indexOf(&quot;miuibrowser&quot;) &lt; 0 &amp;&amp; t.indexOf(&quot;mb2345browser&quot;) &lt; 0 &amp;&amp; t.indexOf(&quot;sogoumobilebrowser&quot;) &lt; 0 &amp;&amp; t.indexOf(&quot;liebaofast&quot;) &lt; 0 &amp;&amp; t.indexOf(&quot;qhbrowser&quot;) &lt; 0 &amp;&amp; (n = &quot;safari&quot;), n\n}\n</code></pre><h6 id=\"获取设备系统类型及版本号\"><a href=\"#获取设备系统类型及版本号\" class=\"headerlink\" title=\"获取设备系统类型及版本号\"></a>获取设备系统类型及版本号</h6><pre><code>function getOsType() {\n    var t = navigator.userAgent.toLowerCase(), n = &quot;&quot;;\n    if (/android/i.test(navigator.userAgent)) {\n        var e = t.indexOf(&quot;android&quot;);\n        version = t.substr(e + 8, 3), n = &quot;Android &quot; + version\n    }\n    if (/(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent)) {\n        var e = t.indexOf(&quot;os&quot;);\n        version = t.substr(e + 3, 3), n = &quot;iOS &quot; + version\n    }\n    return !/Linux/i.test(navigator.userAgent) || /android/i.test(navigator.userAgent) || /(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent) || (n = &quot;Linux&quot;),\n    /windows|win32/i.test(navigator.userAgent) &amp;&amp; (n = &quot;windows32&quot;), /windows|win32/i.test(navigator.userAgent) &amp;&amp; (n = &quot;windows64&quot;), n\n}\n</code></pre><h6 id=\"向页面注入js代码\"><a href=\"#向页面注入js代码\" class=\"headerlink\" title=\"向页面注入js代码\"></a>向页面注入js代码</h6><pre><code>//参数说明：\n// t：js内容（字符串）\n// n: 回调函数\n// e: 注入js的位置，eg：document.getElementById(&apos;indexHeader&apos;)\nfunction createScript(t, n, e) {\n    if (t) {\n        var r = document.getElementsByTagName(&quot;head&quot;)[0], i = document.createElement(&quot;script&quot;);\n        i.setAttribute(&quot;type&quot;, &quot;text/javascript&quot;), i.innerHTML = t, e ? e.appendChild(i) : r.appendChild(i), n()\n    }\n}\n</code></pre><h6 id=\"向页面注入css代码\"><a href=\"#向页面注入css代码\" class=\"headerlink\" title=\"向页面注入css代码\"></a>向页面注入css代码</h6><pre><code>//参数说明：\n// t：css内容（字符串）\n// n: 回调函数\n// e: 注入css的位置，eg：document.getElementById(&apos;indexHeader&apos;)\nfunction createStyle(t, n, e) {\n    if (t) {\n        var r = document.getElementsByTagName(&quot;head&quot;)[0], i = document.createElement(&quot;style&quot;);\n        i.innerHTML = t, e ? e.appendChild(i) : r.appendChild(i), n &amp;&amp; n()\n    }\n}\n</code></pre><h6 id=\"时间格式化\"><a href=\"#时间格式化\" class=\"headerlink\" title=\"时间格式化\"></a>时间格式化</h6><pre><code>//调用方法:getSpecialTimeStr(&apos;2017-04-14 15:50:00&apos;)\nfunction getSpecialTimeStr(t) {\n    var n = this.strToTime(t);\n    if (!n)return !1;\n    var e = (new Date).getTime(), r = Number(e - n), i = 864e5, o = 36e5, u = 6e4;\n    if (r &gt;= i) {\n        var a = r / i;\n        return a &gt; 2 ? this.timeToString(n) : a &gt; 1 ? &quot;前天&quot; : &quot;昨天&quot;\n    }\n    return r &gt;= o ? Math.floor(r / o) + &quot;小时前&quot; : r &gt;= u ? Math.floor(r / u) + &quot;分钟前&quot; : &quot;最新&quot;\n}\n</code></pre><h6 id=\"数组扩展方法\"><a href=\"#数组扩展方法\" class=\"headerlink\" title=\"数组扩展方法\"></a>数组扩展方法</h6><pre><code>//删除指定元素\nArray.prototype.remove = function(val) {\n    var index = this.indexOf(val);\n    if (index &gt; -1) {\n        this.splice(index, 1);\n    }\n};\n//集合取交集\nArray.intersect = function () {\n    var result = new Array();\n    var obj = {};\n    for (var i = 0; i &lt; arguments.length; i++) {\n        for (var j = 0; j &lt; arguments[i].length; j++) {\n            var str = arguments[i][j];\n            if (!obj[str]) {\n                obj[str] = 1;\n            }\n            else {\n                obj[str]++;\n                if (obj[str] == arguments.length)\n                {\n                    result.push(str);\n                }\n            }//end else\n        }//end for j\n    }//end for i\n    return result;\n}\n//集合去掉重复\nArray.prototype.uniquelize = function () {\n    var tmp = {},\n        ret = [];\n    for (var i = 0, j = this.length; i &lt; j; i++) {\n        if (!tmp[this[i]]) {\n            tmp[this[i]] = 1;\n            ret.push(this[i]);\n        }\n    }\n    return ret;\n}\n//并集\nArray.union = function () {\n    var arr = new Array();\n    var obj = {};\n    for (var i = 0; i &lt; arguments.length; i++) {\n        for (var j = 0; j &lt; arguments[i].length; j++)\n        {\n            var str=arguments[i][j];\n            if (!obj[str])\n            {\n                obj[str] = 1;\n                arr.push(str);\n            }\n        }//end for j\n    }//end for i\n    return arr;\n}\n\n//2个集合的差集 在arr不存在\nArray.prototype.minus = function (arr) {\n    var result = new Array();\n    var obj = {};\n    for (var i = 0; i &lt; arr.length; i++) {\n        obj[arr[i]] = 1;\n    }\n    for (var j = 0; j &lt; this.length; j++) {\n        if (!obj[this[j]])\n        {\n            obj[this[j]] = 1;\n            result.push(this[j]);\n        }\n    }\n    return result;\n}\n//数组随机显示\nArray.prototype.shuffle = function() {\n    var input = this;\n    for (var i = input.length-1; i &gt;=0; i--) {\n        var randomIndex = Math.floor(Math.random()*(i+1));\n        var itemAtIndex = input[randomIndex];\n        input[randomIndex] = input[i];\n        input[i] = itemAtIndex;\n    }\n    return input;\n}\n</code></pre><h6 id=\"公用方法\"><a href=\"#公用方法\" class=\"headerlink\" title=\"公用方法\"></a>公用方法</h6><pre><code>var GLOBAL = {},\n GLOBAL.Js = {\n    trim: function (t) {\n        return t.replace(/^\\s+|\\s+$/g, &quot;&quot;)\n    }, isNumber: function (t) {\n        return !isNaN(t)\n    }, isString: function (t) {\n        return &quot;string&quot; == typeof t\n    }, isBoolean: function (t) {\n        return &quot;boolean&quot; == typeof t\n    }, isFunction: function (t) {\n        return &quot;function&quot; == typeof t\n    }, isNull: function (t) {\n        return null === t\n    }, isUndefined: function (t) {\n        return &quot;undefined&quot; == typeof t\n    }, isEmpty: function (t) {\n        return /^\\s*$/.test(t)\n    }, isArray: function (t) {\n        return t instanceof Array\n    }\n},\n//cookie操作\nGLOBAL.Cookie = {\n    set: function (t, n, e) {\n        var r = e ? 60 * Number(e) * 60 * 1e3 : 864e5, i = new Date;\n        i.setTime(i.getTime() + r);\n        var o = e ? &quot;; expires=&quot; + i.toUTCString() : &quot;&quot;;\n        document.cookie = t + &quot;=&quot; + encodeURI(n) + o;\n    }, get: function (t) {\n        var arr,reg=new RegExp(&quot;(^| )&quot;+t+&quot;=([^;]*)(;|$)&quot;);\n        if(arr=document.cookie.match(reg)){ return unescape(arr[2]);}else{return null;}\n    }, del: function (t) {\n        var cval=this.get(t);\n        if(cval!=null){\n            document.cookie= t + &quot;=&quot;+cval+&quot;;expires=&quot;+(new Date(0)).toGMTString();\n        }\n    }\n}, \n//数组比较返回差异的地方\nGLOBAL.Array = {\n    difference: function (t, n) {\n        try {\n            var e = [], r = 0, i = t.length;\n            for (r = 0; r &lt; i; r++)n.contains(t[r]) || e.push(t[r]);\n            return e\n        } catch (o) {\n            return console.error(o), t\n        }\n    }\n}, \n//终端判断\nGLOBAL.Os = function () {\n    for (var t = navigator.userAgent, n = new Array(&quot;Android&quot;, &quot;iPhone&quot;, &quot;SymbianOS&quot;, &quot;Windows Phone&quot;, &quot;iPad&quot;, &quot;iPod&quot;), e = !1, r = 0; r &lt; n.length; r++)if (t.indexOf(n[r]) &gt; -1) {\n        e = !0;\n        break\n    }\n    return {\n        mobile: e,\n        ios: !!t.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/),\n        android: t.indexOf(&quot;Android&quot;) &gt; -1 || t.indexOf(&quot;Linux&quot;) &gt; -1,\n        iphone: t.indexOf(&quot;iPhone&quot;) &gt; -1,\n        ipad: t.indexOf(&quot;iPad&quot;) &gt; -1,\n        webapp: t.indexOf(&quot;Safari&quot;) === -1\n    }\n}(), \n//浏览器类型判断\nGLOBAL.Browser = function () {\n    var t = navigator.userAgent, n = GLOBAL.Os.mobile;\n    return n ? {\n        wechat: t.indexOf(&quot;MicroMessenger&quot;) &gt; -1,\n        weibo: t.toLowerCase().indexOf(&quot;weibo&quot;) &gt; -1,\n        qq: t.indexOf(&quot;QQ/&quot;) &gt; -1,\n        qqbrowser: t.indexOf(&quot;MQQBrowser&quot;) &gt; -1,\n        qybrowser: t.indexOf(&quot;QianYing&quot;) &gt; -1\n    } : {}\n}();\n</code></pre>","site":{"data":{}},"excerpt":"<h6 id=\"正则表达式获取地址栏参数\"><a href=\"#正则表达式获取地址栏参数\" class=\"headerlink\" title=\"正则表达式获取地址栏参数\"></a>正则表达式获取地址栏参数</h6><pre><code>function GetQueryString(t){\n    var n = new RegExp(&quot;(^|&amp;)&quot; + t + &quot;=([^&amp;]*)(&amp;|$)&quot;, &quot;i&quot;), e = window.location.search.substr(1).match(n);\n    return null != e ? decodeURI(e[2]) : null\n}\n</code></pre>","more":"<h6 id=\"获取指定数量随机数\"><a href=\"#获取指定数量随机数\" class=\"headerlink\" title=\"获取指定数量随机数\"></a>获取指定数量随机数</h6><pre><code>//max数组返回[0-max]\nfunction randomNum(max){\n    var randoms=[];\n    while (true)\n    {\n        var isExists = false;\n        var random = parseInt(0 + max * (Math.random()))\n        for (var i = 0; i &lt; randoms.length; i++) {\n            if (random === randoms[i]) {\n                isExists = true;\n                break;\n            }\n        }\n        if (!isExists) randoms.push(random);\n        //设置返回数组长度（此处默认为6位）\n        if (randoms.length === 6)break;\n    }\n    return randoms;\n}\n</code></pre><h6 id=\"获取浏览器类型\"><a href=\"#获取浏览器类型\" class=\"headerlink\" title=\"获取浏览器类型\"></a>获取浏览器类型</h6><pre><code>function getBrowserType() {\n    var t = navigator.userAgent.toLowerCase(), n = &quot;&quot;;\n    return t.indexOf(&quot;msie&quot;) &gt; 0 &amp;&amp; (n = &quot;IE&quot;), t.indexOf(&quot;firefox&quot;) &gt; 0 &amp;&amp; (n = &quot;firefox&quot;), t.indexOf(&quot;chrome&quot;) &gt; 0 &amp;&amp; t.indexOf(&quot;mb2345browser&quot;) &lt; 0 &amp;&amp; t.indexOf(&quot;360 aphone browser&quot;) &lt; 0 &amp;&amp; (n = &quot;chrome&quot;), (t.indexOf(&quot;360 aphone browser&quot;) &gt; 0 || t.indexOf(&quot;qhbrowser&quot;) &gt; 0) &amp;&amp; (n = &quot;360&quot;), t.indexOf(&quot;ucbrowser&quot;) &gt; 0 &amp;&amp; (n = &quot;UC&quot;), t.indexOf(&quot;micromessenger&quot;) &gt; 0 &amp;&amp; (n = &quot;WeChat&quot;), (t.indexOf(&quot;mqqbrowser&quot;) &gt; 0 || t.indexOf(&quot;qq&quot;) &gt; 0) &amp;&amp; t.indexOf(&quot;micromessenger&quot;) &lt; 0 &amp;&amp; (n = &quot;QQ&quot;), t.indexOf(&quot;miuibrowser&quot;) &gt; 0 &amp;&amp; (n = &quot;MIUI&quot;), t.indexOf(&quot;mb2345browser&quot;) &gt; 0 &amp;&amp; (n = &quot;2345&quot;), t.indexOf(&quot;sogoumobilebrowser&quot;) &gt; 0 &amp;&amp; (n = &quot;sogou&quot;), t.indexOf(&quot;liebaofast&quot;) &gt; 0 &amp;&amp; (n = &quot;liebao&quot;), t.indexOf(&quot;safari&quot;) &gt; 0 &amp;&amp; t.indexOf(&quot;chrome&quot;) &lt; 0 &amp;&amp; t.indexOf(&quot;ucbrowser&quot;) &lt; 0 &amp;&amp; t.indexOf(&quot;micromessenger&quot;) &lt; 0 &amp;&amp; t.indexOf(&quot;mqqbrowser&quot;) &lt; 0 &amp;&amp; t.indexOf(&quot;miuibrowser&quot;) &lt; 0 &amp;&amp; t.indexOf(&quot;mb2345browser&quot;) &lt; 0 &amp;&amp; t.indexOf(&quot;sogoumobilebrowser&quot;) &lt; 0 &amp;&amp; t.indexOf(&quot;liebaofast&quot;) &lt; 0 &amp;&amp; t.indexOf(&quot;qhbrowser&quot;) &lt; 0 &amp;&amp; (n = &quot;safari&quot;), n\n}\n</code></pre><h6 id=\"获取设备系统类型及版本号\"><a href=\"#获取设备系统类型及版本号\" class=\"headerlink\" title=\"获取设备系统类型及版本号\"></a>获取设备系统类型及版本号</h6><pre><code>function getOsType() {\n    var t = navigator.userAgent.toLowerCase(), n = &quot;&quot;;\n    if (/android/i.test(navigator.userAgent)) {\n        var e = t.indexOf(&quot;android&quot;);\n        version = t.substr(e + 8, 3), n = &quot;Android &quot; + version\n    }\n    if (/(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent)) {\n        var e = t.indexOf(&quot;os&quot;);\n        version = t.substr(e + 3, 3), n = &quot;iOS &quot; + version\n    }\n    return !/Linux/i.test(navigator.userAgent) || /android/i.test(navigator.userAgent) || /(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent) || (n = &quot;Linux&quot;),\n    /windows|win32/i.test(navigator.userAgent) &amp;&amp; (n = &quot;windows32&quot;), /windows|win32/i.test(navigator.userAgent) &amp;&amp; (n = &quot;windows64&quot;), n\n}\n</code></pre><h6 id=\"向页面注入js代码\"><a href=\"#向页面注入js代码\" class=\"headerlink\" title=\"向页面注入js代码\"></a>向页面注入js代码</h6><pre><code>//参数说明：\n// t：js内容（字符串）\n// n: 回调函数\n// e: 注入js的位置，eg：document.getElementById(&apos;indexHeader&apos;)\nfunction createScript(t, n, e) {\n    if (t) {\n        var r = document.getElementsByTagName(&quot;head&quot;)[0], i = document.createElement(&quot;script&quot;);\n        i.setAttribute(&quot;type&quot;, &quot;text/javascript&quot;), i.innerHTML = t, e ? e.appendChild(i) : r.appendChild(i), n()\n    }\n}\n</code></pre><h6 id=\"向页面注入css代码\"><a href=\"#向页面注入css代码\" class=\"headerlink\" title=\"向页面注入css代码\"></a>向页面注入css代码</h6><pre><code>//参数说明：\n// t：css内容（字符串）\n// n: 回调函数\n// e: 注入css的位置，eg：document.getElementById(&apos;indexHeader&apos;)\nfunction createStyle(t, n, e) {\n    if (t) {\n        var r = document.getElementsByTagName(&quot;head&quot;)[0], i = document.createElement(&quot;style&quot;);\n        i.innerHTML = t, e ? e.appendChild(i) : r.appendChild(i), n &amp;&amp; n()\n    }\n}\n</code></pre><h6 id=\"时间格式化\"><a href=\"#时间格式化\" class=\"headerlink\" title=\"时间格式化\"></a>时间格式化</h6><pre><code>//调用方法:getSpecialTimeStr(&apos;2017-04-14 15:50:00&apos;)\nfunction getSpecialTimeStr(t) {\n    var n = this.strToTime(t);\n    if (!n)return !1;\n    var e = (new Date).getTime(), r = Number(e - n), i = 864e5, o = 36e5, u = 6e4;\n    if (r &gt;= i) {\n        var a = r / i;\n        return a &gt; 2 ? this.timeToString(n) : a &gt; 1 ? &quot;前天&quot; : &quot;昨天&quot;\n    }\n    return r &gt;= o ? Math.floor(r / o) + &quot;小时前&quot; : r &gt;= u ? Math.floor(r / u) + &quot;分钟前&quot; : &quot;最新&quot;\n}\n</code></pre><h6 id=\"数组扩展方法\"><a href=\"#数组扩展方法\" class=\"headerlink\" title=\"数组扩展方法\"></a>数组扩展方法</h6><pre><code>//删除指定元素\nArray.prototype.remove = function(val) {\n    var index = this.indexOf(val);\n    if (index &gt; -1) {\n        this.splice(index, 1);\n    }\n};\n//集合取交集\nArray.intersect = function () {\n    var result = new Array();\n    var obj = {};\n    for (var i = 0; i &lt; arguments.length; i++) {\n        for (var j = 0; j &lt; arguments[i].length; j++) {\n            var str = arguments[i][j];\n            if (!obj[str]) {\n                obj[str] = 1;\n            }\n            else {\n                obj[str]++;\n                if (obj[str] == arguments.length)\n                {\n                    result.push(str);\n                }\n            }//end else\n        }//end for j\n    }//end for i\n    return result;\n}\n//集合去掉重复\nArray.prototype.uniquelize = function () {\n    var tmp = {},\n        ret = [];\n    for (var i = 0, j = this.length; i &lt; j; i++) {\n        if (!tmp[this[i]]) {\n            tmp[this[i]] = 1;\n            ret.push(this[i]);\n        }\n    }\n    return ret;\n}\n//并集\nArray.union = function () {\n    var arr = new Array();\n    var obj = {};\n    for (var i = 0; i &lt; arguments.length; i++) {\n        for (var j = 0; j &lt; arguments[i].length; j++)\n        {\n            var str=arguments[i][j];\n            if (!obj[str])\n            {\n                obj[str] = 1;\n                arr.push(str);\n            }\n        }//end for j\n    }//end for i\n    return arr;\n}\n\n//2个集合的差集 在arr不存在\nArray.prototype.minus = function (arr) {\n    var result = new Array();\n    var obj = {};\n    for (var i = 0; i &lt; arr.length; i++) {\n        obj[arr[i]] = 1;\n    }\n    for (var j = 0; j &lt; this.length; j++) {\n        if (!obj[this[j]])\n        {\n            obj[this[j]] = 1;\n            result.push(this[j]);\n        }\n    }\n    return result;\n}\n//数组随机显示\nArray.prototype.shuffle = function() {\n    var input = this;\n    for (var i = input.length-1; i &gt;=0; i--) {\n        var randomIndex = Math.floor(Math.random()*(i+1));\n        var itemAtIndex = input[randomIndex];\n        input[randomIndex] = input[i];\n        input[i] = itemAtIndex;\n    }\n    return input;\n}\n</code></pre><h6 id=\"公用方法\"><a href=\"#公用方法\" class=\"headerlink\" title=\"公用方法\"></a>公用方法</h6><pre><code>var GLOBAL = {},\n GLOBAL.Js = {\n    trim: function (t) {\n        return t.replace(/^\\s+|\\s+$/g, &quot;&quot;)\n    }, isNumber: function (t) {\n        return !isNaN(t)\n    }, isString: function (t) {\n        return &quot;string&quot; == typeof t\n    }, isBoolean: function (t) {\n        return &quot;boolean&quot; == typeof t\n    }, isFunction: function (t) {\n        return &quot;function&quot; == typeof t\n    }, isNull: function (t) {\n        return null === t\n    }, isUndefined: function (t) {\n        return &quot;undefined&quot; == typeof t\n    }, isEmpty: function (t) {\n        return /^\\s*$/.test(t)\n    }, isArray: function (t) {\n        return t instanceof Array\n    }\n},\n//cookie操作\nGLOBAL.Cookie = {\n    set: function (t, n, e) {\n        var r = e ? 60 * Number(e) * 60 * 1e3 : 864e5, i = new Date;\n        i.setTime(i.getTime() + r);\n        var o = e ? &quot;; expires=&quot; + i.toUTCString() : &quot;&quot;;\n        document.cookie = t + &quot;=&quot; + encodeURI(n) + o;\n    }, get: function (t) {\n        var arr,reg=new RegExp(&quot;(^| )&quot;+t+&quot;=([^;]*)(;|$)&quot;);\n        if(arr=document.cookie.match(reg)){ return unescape(arr[2]);}else{return null;}\n    }, del: function (t) {\n        var cval=this.get(t);\n        if(cval!=null){\n            document.cookie= t + &quot;=&quot;+cval+&quot;;expires=&quot;+(new Date(0)).toGMTString();\n        }\n    }\n}, \n//数组比较返回差异的地方\nGLOBAL.Array = {\n    difference: function (t, n) {\n        try {\n            var e = [], r = 0, i = t.length;\n            for (r = 0; r &lt; i; r++)n.contains(t[r]) || e.push(t[r]);\n            return e\n        } catch (o) {\n            return console.error(o), t\n        }\n    }\n}, \n//终端判断\nGLOBAL.Os = function () {\n    for (var t = navigator.userAgent, n = new Array(&quot;Android&quot;, &quot;iPhone&quot;, &quot;SymbianOS&quot;, &quot;Windows Phone&quot;, &quot;iPad&quot;, &quot;iPod&quot;), e = !1, r = 0; r &lt; n.length; r++)if (t.indexOf(n[r]) &gt; -1) {\n        e = !0;\n        break\n    }\n    return {\n        mobile: e,\n        ios: !!t.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/),\n        android: t.indexOf(&quot;Android&quot;) &gt; -1 || t.indexOf(&quot;Linux&quot;) &gt; -1,\n        iphone: t.indexOf(&quot;iPhone&quot;) &gt; -1,\n        ipad: t.indexOf(&quot;iPad&quot;) &gt; -1,\n        webapp: t.indexOf(&quot;Safari&quot;) === -1\n    }\n}(), \n//浏览器类型判断\nGLOBAL.Browser = function () {\n    var t = navigator.userAgent, n = GLOBAL.Os.mobile;\n    return n ? {\n        wechat: t.indexOf(&quot;MicroMessenger&quot;) &gt; -1,\n        weibo: t.toLowerCase().indexOf(&quot;weibo&quot;) &gt; -1,\n        qq: t.indexOf(&quot;QQ/&quot;) &gt; -1,\n        qqbrowser: t.indexOf(&quot;MQQBrowser&quot;) &gt; -1,\n        qybrowser: t.indexOf(&quot;QianYing&quot;) &gt; -1\n    } : {}\n}();\n</code></pre>"},{"title":"移动端H5多平台分享实践","_content":"如何按照产品要求实现多平台下一致的分享效果，包括分享文案的动态生成，在没有Native的帮助下是比较困难的。下面总结了一套较为完整的分享方案。\n<!--more-->\n\n#### 微信分享\n\n微信下的分享通过调用微信提供的JS-SDK和引导用户点击右上角完成。 使用微信的JS-SDK需要引入如下js文件：\n\n    <script src=\"//res.wx.qq.com/open/js/jweixin-1.3.1.js\"></script>\n\n设置分享内容的代码如下：\n\n    wx.config({\n        debug: false,\n        appId: '公众号的appid',\n        timestamp: '时间戳',\n        nonceStr: '随机字符串',\n        signature: '签名',\n        jsApiList: ['onMenuShareTimeline', 'onMenuShareAppMessage', 'onMenuShareQQ', 'onMenuShareWeibo', 'onMenuShareQZone', 'showOptionMenu', 'hideAllNonBaseMenuItem', 'showAllNonBaseMenuItem']\n    });\n\n    wx.ready(function() {\n        const share = {\n            title: '分享标题（朋友圈只显示标题）',\n            desc: '分享内容',\n            imgUrl: '图片URL',\n            link: '分享链接（最好是后台JS安全域名）',\n            success: function() {\n                hideMaskLayer();  // 分享成功，隐藏引导用户分享的浮层\n            },\n            cancel: function() {\n            }\n        };\n        wx.onMenuShareAppMessage(share);  // 微信好友\n        wx.onMenuShareTimeline(share);  // 朋友圈\n        wx.onMenuShareQQ(share);  // QQ\n        wx.onMenuShareQZone(share);  // QQ空间\n        wx.onMenuShareWeibo(share);  // 腾讯微博\n    });\n\n其中wx.config中的参数由服务端得到，具体可参见微信的开发文档：https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421141115 注意在公众号后台设置JS安全域名\n\n#### QQ/TIM的分享\n\n1 通过JS API分享\n\nQQ（以下无特殊说明TIM下同样有效）下也有设置分享内容的API，同样需要先引用JSBridge相关的文件：<tr script src=\"//open.mobile.qq.com/sdk/qqapi.js\"></ script>\n设置分享内容的代码如下：\n\n    const share = {\n        title: '分享标题，最大45字节',\n        desc: '分享内容，最大60字节',\n        image_url: '图片URL',\n        share_url: '分享链接'\n    };\n    mqq.data.setShareInfo(share, callback);\n\n需要注意的是：分享链接长度不能超过120字节，并且必须跟页面URL同一个域名，否则设置不生效；分享的图片最小需要200 * 200，否则分享到QQ空间时会被过滤掉。\n设置完分享内容后，可通过API调用唤起QQ的分享面板，免去引导的过程。\n\n    mqq.ui.showShareMenu();\n\n还有一种方法，QQ提供了监听点击分享平台的事件，当点击Native分享面板中的分享平台时，会触发此事件，QQ默认的分享行为将不再执行。代码如下：\n\n    mqq.ui.setOnShareHandler(function (platform) {\n        mqq.ui.shareMessage({\n            title: '分享标题',\n            desc: '分享内容',\n            share_type: platform,\n            share_url: '分享链接',\n            image_url: '图片URL',\n            sourceName: '掌上理工大',\n            back: true\n        }, function() {\n        });\n    });\n\n其中platform是分享平台类型，取值如下：\n\n    编号\t    分享平台\n    0\t      QQ好友\n    1\t      QQ空间\n    2\t      微信好友\n    3\t      微信朋友圈\n\n2 通过meta标签分享\nQQ也支持通过设置meta标签定义分享内容。通过定义itemprop可设置分享内容，同时为了更好的兼容其它平台，我们也引入了Open Graph标准。代码如下：\n\n    <meta itemprop=\"name\" property=\"og:title\" content=\"分享标题\">\n    <meta property=\"og:url\" content=\"分享链接\">\n    <meta itemprop=\"image\" property=\"og:image\" content=\"图片URL\">\n    <meta name=\"description\" itemprop=\"description\" property=\"og:description\" content=\"分享描述\">\n\n需要注意的是，meta标签需要是服务端渲染输出，通过js生成或修改无效。\n\n3 通过URL Scheme唤起QQ分享\n还可以通过URL Scheme唤起QQ进行分享，该方法的好处在于可以在非QQ环境下唤起QQ实现分享，缺点在于不能设置分享图片。代码如下：\n\n    const share = {\n        title: '分享标题',\n        desc: '分享内容',\n        share_url: '分享链接'\n    };\n    const url_scheme = '//share/to_fri?src_type=web&version=1&file_type=news&share_id=1103437993&title=' + Base64.encode(share.title) + '&thirdAppDisplayName=5o6M5LiK55CG5bel5aSn&url=' + Base64.encode(share.share_url) + '&description=' + Base64.encode(share.desc);\n    location.assign('mqqapi:' + url_scheme);\n    setTimeout(function() {\n        location.assign('timapi:' + url_scheme);\n    }, 2000);\n\n其中分享的参数在拼入URL中时需要Base64编码。为了支持TIM下的分享，我们引入了延时函数，如果唤起QQ失败该定时器将会执行唤起TIM，唤起成功离开了此页面将不会执行。QQ和TIM均安装时优先唤起QQ。\n\n4 通过分享组件的URL实现\nQQ空间提供了分享组件（可参见：https://connect.qq.com/intro/share），通过分析该组件可得到分享URL的参数。代码如下：\n\n    const share = {\n        title: '分享标题',\n        desc: '分享内容',\n        image_url: ['图片URL'],\n        share_url: '分享链接'\n    };\n    let image_urls = share.image_url.map(function(image) {\n        return encodeURIComponent(image);\n    });\n    location.replace('https://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?url=' + encodeURIComponent(share.share_url) + '&site=xxxx&title=' + share.title + '&pics=' + image_urls.join('|') + '&summary=' + share.desc);\n\n其中可支持多图片的分享，图片URL用竖线分隔。该方法优点在于同样支持非QQ环境下的分享。非QQ下用户登录后即可分享，QQ下可免登直接分享。\n\n#### 微博的分享\n\n1 通过分享组件的URL实现\n微博同样提供了分享组件，通过分析URL可得到分享参数。代码如下：\n\n    const share = {\n        title: '分享标题',\n        image_url: '图片URL',\n        share_url: '分享链接'\n    };\n    location.replace('https://service.weibo.com/share/share.php?url=' + encodeURIComponent(share.share_url) + '&title=' + share.title + '&appkey=277159429&&ralateUid=1855112015&pic=' + share.image_url + '&searchPic=true');\n\n其中appKey参数可选，如果设置微博将会显示分享来源为key对应的应用名称（应用可在 https://open.weibo.com/ 注册）；ralateUid参数可选，指定微博用户id，会在微博尾部at此用户；searchPic用于控制是否自动爬取页面的图片，和pic不共存。\n\n2 通过微博API自动发送微博\n微博提供了API可通过服务端调用接口直接发送一条微博。\n\n    POST https://api.weibo.com/2/statuses/share.json\n\n参数如下：\n\n    参数            必选            类型及范围         说明编号\n    access_token    是               string           采用OAuth授权方式为必填参数，OAuth授权后获得。\n    status          是               string           用户分享到微博的文本内容，必须URL Encode，文本中不能包含“#话题词#”，同时文本中必须包含至少一个分享的URL，且该URL的域名需要在后台设置。\n    pic             否               binary           用户分享到微博的图片，仅支持JPEG、GIF、PNG图片，上传图片大小限制为5M。上传图片时，POST方式提交请求，需要采用multipart/form-data编码方式。\n    rip             否               string           开发者上报的操作用户真实IP，形如：211.156.0.1。\n\n具体可参见：[微博开放平台](http://open.weibo.com/wiki/2/statuses/share)\n\n3 通过JS API分享\n微博同样有提供JS-SDK可供调用Native的方法，在使用前需要在微博开放平台申请轻应用，并设置安全域名。\n使用微信的JS-SDK需要引入如下js文件：\n\n    <script src=\"//tjs.sjs.sinajs.cn/open/thirdpart/js/jsapi/mobile.js\"></script>\n    \n同样需要先设置初始化参数。\n\n    WeiboJS.init({\n        appkey : '轻应用key',\n        debug: false,\n        timestamp: '时间戳',\n        noncestr: '随机字符串',\n        signature: '签名',\n        scope: ['openMenu', 'setMenuItems', 'menuItemSelected', 'setSharingContent']\n    }, function() {\n    });\n\n有3个关于分享的JS API可供使用。\n\n    openMenu\n\n该API可调起Native的分享面板。\n\n    WeiboJS.invoke('openMenu');\n    setSharingContent\n\n该API可设置分享的内容。\n\n    WeiboJS.invoke('openMenu', {\n        icon: share.title,\n        desc: share.desc,\n        icon: share.image_url\n    });\n\n    invokeMenuItem\n\n该API可以直接触发分享面板中点击相应菜单项。\n\n    WeiboJS.invoke('invokeMenuItem', { \n        code: platform\n    });\n\n其中platform是分享平台类型，取值如下：\n\n    编号            分享平台\n    1001            微博\n    1002            微博好友圈\n    1003            微博私信\n    1004            微信好友\n    1005            微信朋友圈\n    1006            微米好友\n    1007            微米圈\n    1008            来往（点点虫）好友\n    1009            来往（点点虫）动态\n    1010            QQ好友\n    1011            QQ空间\n    1101            短信\n    2001            系统浏览器\n    2002            复制链接\n\n通过使用API 1 + API 2（最佳）或API 2 + API 3即可实现分享。具体可参见微博的开发文档：\n[open.weibo.com/wiki/轻应用H5新…](http://open.weibo.com/wiki/%E8%BD%BB%E5%BA%94%E7%94%A8H5%E6%96%B0%E7%89%88JS)\n\n#### 支付宝的分享\n\n支付宝同样提供了JS API，可以很方便的设置分享内容和唤起Native分享面板；不足之处在于不支持分享到QQ、微信等平台。\n使用支付宝的JS-SDK需要引入如下js文件：\n\n    <script src=\"//a.alipayobjects.com/g/h5-lib/alipayjsapi/3.0.6/alipayjsapi.inc.min.js\"></script>\n\n代码如下：\n\n    const share = {\n        title: '分享标题',\n        content: '分享内容',\n        image: '图片URL',\n        url: '分享链接',\n        captureScreen: false,\n        showToolBar: false\n    };\n    ap.share(share, function() {\n    });\n\n#### UC浏览器的分享\n\nUC浏览器也提供了JS API调用Native的分享，支持唤起分享面板和分享到具体平台。代码如下：\n\n    const share = {\n        title: '分享标题',\n        desc: '分享内容',\n        image_url: '图片URL',\n        share_url: '分享链接'\n    };\n    const isiOS = /(iPhone|iPad|iPod)/.test(navigator.userAgent);  // 判断应用平台\n    if (isiOS) {\n        if (ucbrowser.web_shareEX) {\n            ucbrowser.web_shareEX(\n                JSON.stringify({\n                    title: share.title,\n                    content: share.desc,\n                    sourceUrl: share.share_url,\n                    imageUrl: share.image_url,\n                    source: '掌上理工大',\n                    target: platform\n                })\n            )\n        } else {\n            ucbrowser.web_share(share.title, share.desc, share.share_url, platform, '', '掌上理工大', share.image_url);\n        }\n    }\n    else ucweb.startRequest('shell.page_share', [share.title, share.desc, share.share_url, platform, '', '掌上理工大', share.image_url]);\n\n其中platform是分享平台类型，取值如下：\n\nAndroid编号           iOS编号               分享平台\n'WechatFriends'       'kWeixinFriend'      微信好友\n'WechatTimeline'      'kWeixin'            微信朋友圈\n'QQ'                  'kQQ'                QQ好友\n'Qzone'               'kQZone'             QQ空间\n'SinaWeibo'           'kSinaWeibo'         微博\nundefined             undefined            分享面板\n\n#### QQ浏览器的分享\n\nQQ浏览器也提供了JS API调用Native的分享，同样支持唤起分享面板、生成二维码和分享到具体平台。\n首先需要引入如下JS文件：\n\n    <script src=\"//jsapi.qq.com/get?api=app.share\"></script>\n\n代码如下：\n\n    browser.app.share({\n        title: share.title,\n        description: share.desc,\n        url: share.share_url,\n        img_url: share.image_url,\n        from: '掌上理工大',\n        to_app: platform\n    });\n\n其中platform是分享平台类型，取值如下：\n\n    编号        分享平台\n    1           微信好友\n    8           微信朋友圈\n    4           QQ好友\n    3           QQ空间\n    11          微博\n    5           更多\n    7           生成二维码\n    10          复制链接\n    undefined   分享面板\n\n作者：Crazy_Urus\n链接：https://juejin.im/post/5a61a8b86fb9a01cba42a742\n来源：掘金","source":"_posts/share.md","raw":"---\ntitle: 移动端H5多平台分享实践\ncategories: javascript\ntags: [web,js]\n---\n如何按照产品要求实现多平台下一致的分享效果，包括分享文案的动态生成，在没有Native的帮助下是比较困难的。下面总结了一套较为完整的分享方案。\n<!--more-->\n\n#### 微信分享\n\n微信下的分享通过调用微信提供的JS-SDK和引导用户点击右上角完成。 使用微信的JS-SDK需要引入如下js文件：\n\n    <script src=\"//res.wx.qq.com/open/js/jweixin-1.3.1.js\"></script>\n\n设置分享内容的代码如下：\n\n    wx.config({\n        debug: false,\n        appId: '公众号的appid',\n        timestamp: '时间戳',\n        nonceStr: '随机字符串',\n        signature: '签名',\n        jsApiList: ['onMenuShareTimeline', 'onMenuShareAppMessage', 'onMenuShareQQ', 'onMenuShareWeibo', 'onMenuShareQZone', 'showOptionMenu', 'hideAllNonBaseMenuItem', 'showAllNonBaseMenuItem']\n    });\n\n    wx.ready(function() {\n        const share = {\n            title: '分享标题（朋友圈只显示标题）',\n            desc: '分享内容',\n            imgUrl: '图片URL',\n            link: '分享链接（最好是后台JS安全域名）',\n            success: function() {\n                hideMaskLayer();  // 分享成功，隐藏引导用户分享的浮层\n            },\n            cancel: function() {\n            }\n        };\n        wx.onMenuShareAppMessage(share);  // 微信好友\n        wx.onMenuShareTimeline(share);  // 朋友圈\n        wx.onMenuShareQQ(share);  // QQ\n        wx.onMenuShareQZone(share);  // QQ空间\n        wx.onMenuShareWeibo(share);  // 腾讯微博\n    });\n\n其中wx.config中的参数由服务端得到，具体可参见微信的开发文档：https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421141115 注意在公众号后台设置JS安全域名\n\n#### QQ/TIM的分享\n\n1 通过JS API分享\n\nQQ（以下无特殊说明TIM下同样有效）下也有设置分享内容的API，同样需要先引用JSBridge相关的文件：<tr script src=\"//open.mobile.qq.com/sdk/qqapi.js\"></ script>\n设置分享内容的代码如下：\n\n    const share = {\n        title: '分享标题，最大45字节',\n        desc: '分享内容，最大60字节',\n        image_url: '图片URL',\n        share_url: '分享链接'\n    };\n    mqq.data.setShareInfo(share, callback);\n\n需要注意的是：分享链接长度不能超过120字节，并且必须跟页面URL同一个域名，否则设置不生效；分享的图片最小需要200 * 200，否则分享到QQ空间时会被过滤掉。\n设置完分享内容后，可通过API调用唤起QQ的分享面板，免去引导的过程。\n\n    mqq.ui.showShareMenu();\n\n还有一种方法，QQ提供了监听点击分享平台的事件，当点击Native分享面板中的分享平台时，会触发此事件，QQ默认的分享行为将不再执行。代码如下：\n\n    mqq.ui.setOnShareHandler(function (platform) {\n        mqq.ui.shareMessage({\n            title: '分享标题',\n            desc: '分享内容',\n            share_type: platform,\n            share_url: '分享链接',\n            image_url: '图片URL',\n            sourceName: '掌上理工大',\n            back: true\n        }, function() {\n        });\n    });\n\n其中platform是分享平台类型，取值如下：\n\n    编号\t    分享平台\n    0\t      QQ好友\n    1\t      QQ空间\n    2\t      微信好友\n    3\t      微信朋友圈\n\n2 通过meta标签分享\nQQ也支持通过设置meta标签定义分享内容。通过定义itemprop可设置分享内容，同时为了更好的兼容其它平台，我们也引入了Open Graph标准。代码如下：\n\n    <meta itemprop=\"name\" property=\"og:title\" content=\"分享标题\">\n    <meta property=\"og:url\" content=\"分享链接\">\n    <meta itemprop=\"image\" property=\"og:image\" content=\"图片URL\">\n    <meta name=\"description\" itemprop=\"description\" property=\"og:description\" content=\"分享描述\">\n\n需要注意的是，meta标签需要是服务端渲染输出，通过js生成或修改无效。\n\n3 通过URL Scheme唤起QQ分享\n还可以通过URL Scheme唤起QQ进行分享，该方法的好处在于可以在非QQ环境下唤起QQ实现分享，缺点在于不能设置分享图片。代码如下：\n\n    const share = {\n        title: '分享标题',\n        desc: '分享内容',\n        share_url: '分享链接'\n    };\n    const url_scheme = '//share/to_fri?src_type=web&version=1&file_type=news&share_id=1103437993&title=' + Base64.encode(share.title) + '&thirdAppDisplayName=5o6M5LiK55CG5bel5aSn&url=' + Base64.encode(share.share_url) + '&description=' + Base64.encode(share.desc);\n    location.assign('mqqapi:' + url_scheme);\n    setTimeout(function() {\n        location.assign('timapi:' + url_scheme);\n    }, 2000);\n\n其中分享的参数在拼入URL中时需要Base64编码。为了支持TIM下的分享，我们引入了延时函数，如果唤起QQ失败该定时器将会执行唤起TIM，唤起成功离开了此页面将不会执行。QQ和TIM均安装时优先唤起QQ。\n\n4 通过分享组件的URL实现\nQQ空间提供了分享组件（可参见：https://connect.qq.com/intro/share），通过分析该组件可得到分享URL的参数。代码如下：\n\n    const share = {\n        title: '分享标题',\n        desc: '分享内容',\n        image_url: ['图片URL'],\n        share_url: '分享链接'\n    };\n    let image_urls = share.image_url.map(function(image) {\n        return encodeURIComponent(image);\n    });\n    location.replace('https://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?url=' + encodeURIComponent(share.share_url) + '&site=xxxx&title=' + share.title + '&pics=' + image_urls.join('|') + '&summary=' + share.desc);\n\n其中可支持多图片的分享，图片URL用竖线分隔。该方法优点在于同样支持非QQ环境下的分享。非QQ下用户登录后即可分享，QQ下可免登直接分享。\n\n#### 微博的分享\n\n1 通过分享组件的URL实现\n微博同样提供了分享组件，通过分析URL可得到分享参数。代码如下：\n\n    const share = {\n        title: '分享标题',\n        image_url: '图片URL',\n        share_url: '分享链接'\n    };\n    location.replace('https://service.weibo.com/share/share.php?url=' + encodeURIComponent(share.share_url) + '&title=' + share.title + '&appkey=277159429&&ralateUid=1855112015&pic=' + share.image_url + '&searchPic=true');\n\n其中appKey参数可选，如果设置微博将会显示分享来源为key对应的应用名称（应用可在 https://open.weibo.com/ 注册）；ralateUid参数可选，指定微博用户id，会在微博尾部at此用户；searchPic用于控制是否自动爬取页面的图片，和pic不共存。\n\n2 通过微博API自动发送微博\n微博提供了API可通过服务端调用接口直接发送一条微博。\n\n    POST https://api.weibo.com/2/statuses/share.json\n\n参数如下：\n\n    参数            必选            类型及范围         说明编号\n    access_token    是               string           采用OAuth授权方式为必填参数，OAuth授权后获得。\n    status          是               string           用户分享到微博的文本内容，必须URL Encode，文本中不能包含“#话题词#”，同时文本中必须包含至少一个分享的URL，且该URL的域名需要在后台设置。\n    pic             否               binary           用户分享到微博的图片，仅支持JPEG、GIF、PNG图片，上传图片大小限制为5M。上传图片时，POST方式提交请求，需要采用multipart/form-data编码方式。\n    rip             否               string           开发者上报的操作用户真实IP，形如：211.156.0.1。\n\n具体可参见：[微博开放平台](http://open.weibo.com/wiki/2/statuses/share)\n\n3 通过JS API分享\n微博同样有提供JS-SDK可供调用Native的方法，在使用前需要在微博开放平台申请轻应用，并设置安全域名。\n使用微信的JS-SDK需要引入如下js文件：\n\n    <script src=\"//tjs.sjs.sinajs.cn/open/thirdpart/js/jsapi/mobile.js\"></script>\n    \n同样需要先设置初始化参数。\n\n    WeiboJS.init({\n        appkey : '轻应用key',\n        debug: false,\n        timestamp: '时间戳',\n        noncestr: '随机字符串',\n        signature: '签名',\n        scope: ['openMenu', 'setMenuItems', 'menuItemSelected', 'setSharingContent']\n    }, function() {\n    });\n\n有3个关于分享的JS API可供使用。\n\n    openMenu\n\n该API可调起Native的分享面板。\n\n    WeiboJS.invoke('openMenu');\n    setSharingContent\n\n该API可设置分享的内容。\n\n    WeiboJS.invoke('openMenu', {\n        icon: share.title,\n        desc: share.desc,\n        icon: share.image_url\n    });\n\n    invokeMenuItem\n\n该API可以直接触发分享面板中点击相应菜单项。\n\n    WeiboJS.invoke('invokeMenuItem', { \n        code: platform\n    });\n\n其中platform是分享平台类型，取值如下：\n\n    编号            分享平台\n    1001            微博\n    1002            微博好友圈\n    1003            微博私信\n    1004            微信好友\n    1005            微信朋友圈\n    1006            微米好友\n    1007            微米圈\n    1008            来往（点点虫）好友\n    1009            来往（点点虫）动态\n    1010            QQ好友\n    1011            QQ空间\n    1101            短信\n    2001            系统浏览器\n    2002            复制链接\n\n通过使用API 1 + API 2（最佳）或API 2 + API 3即可实现分享。具体可参见微博的开发文档：\n[open.weibo.com/wiki/轻应用H5新…](http://open.weibo.com/wiki/%E8%BD%BB%E5%BA%94%E7%94%A8H5%E6%96%B0%E7%89%88JS)\n\n#### 支付宝的分享\n\n支付宝同样提供了JS API，可以很方便的设置分享内容和唤起Native分享面板；不足之处在于不支持分享到QQ、微信等平台。\n使用支付宝的JS-SDK需要引入如下js文件：\n\n    <script src=\"//a.alipayobjects.com/g/h5-lib/alipayjsapi/3.0.6/alipayjsapi.inc.min.js\"></script>\n\n代码如下：\n\n    const share = {\n        title: '分享标题',\n        content: '分享内容',\n        image: '图片URL',\n        url: '分享链接',\n        captureScreen: false,\n        showToolBar: false\n    };\n    ap.share(share, function() {\n    });\n\n#### UC浏览器的分享\n\nUC浏览器也提供了JS API调用Native的分享，支持唤起分享面板和分享到具体平台。代码如下：\n\n    const share = {\n        title: '分享标题',\n        desc: '分享内容',\n        image_url: '图片URL',\n        share_url: '分享链接'\n    };\n    const isiOS = /(iPhone|iPad|iPod)/.test(navigator.userAgent);  // 判断应用平台\n    if (isiOS) {\n        if (ucbrowser.web_shareEX) {\n            ucbrowser.web_shareEX(\n                JSON.stringify({\n                    title: share.title,\n                    content: share.desc,\n                    sourceUrl: share.share_url,\n                    imageUrl: share.image_url,\n                    source: '掌上理工大',\n                    target: platform\n                })\n            )\n        } else {\n            ucbrowser.web_share(share.title, share.desc, share.share_url, platform, '', '掌上理工大', share.image_url);\n        }\n    }\n    else ucweb.startRequest('shell.page_share', [share.title, share.desc, share.share_url, platform, '', '掌上理工大', share.image_url]);\n\n其中platform是分享平台类型，取值如下：\n\nAndroid编号           iOS编号               分享平台\n'WechatFriends'       'kWeixinFriend'      微信好友\n'WechatTimeline'      'kWeixin'            微信朋友圈\n'QQ'                  'kQQ'                QQ好友\n'Qzone'               'kQZone'             QQ空间\n'SinaWeibo'           'kSinaWeibo'         微博\nundefined             undefined            分享面板\n\n#### QQ浏览器的分享\n\nQQ浏览器也提供了JS API调用Native的分享，同样支持唤起分享面板、生成二维码和分享到具体平台。\n首先需要引入如下JS文件：\n\n    <script src=\"//jsapi.qq.com/get?api=app.share\"></script>\n\n代码如下：\n\n    browser.app.share({\n        title: share.title,\n        description: share.desc,\n        url: share.share_url,\n        img_url: share.image_url,\n        from: '掌上理工大',\n        to_app: platform\n    });\n\n其中platform是分享平台类型，取值如下：\n\n    编号        分享平台\n    1           微信好友\n    8           微信朋友圈\n    4           QQ好友\n    3           QQ空间\n    11          微博\n    5           更多\n    7           生成二维码\n    10          复制链接\n    undefined   分享面板\n\n作者：Crazy_Urus\n链接：https://juejin.im/post/5a61a8b86fb9a01cba42a742\n来源：掘金","slug":"share","published":1,"date":"2018-02-06T02:58:16.092Z","updated":"2018-02-06T03:39:54.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjdxoway0010p8rrzq3evwb9","content":"<p>如何按照产品要求实现多平台下一致的分享效果，包括分享文案的动态生成，在没有Native的帮助下是比较困难的。下面总结了一套较为完整的分享方案。<br><a id=\"more\"></a></p>\n<h4 id=\"微信分享\"><a href=\"#微信分享\" class=\"headerlink\" title=\"微信分享\"></a>微信分享</h4><p>微信下的分享通过调用微信提供的JS-SDK和引导用户点击右上角完成。 使用微信的JS-SDK需要引入如下js文件：</p>\n<pre><code>&lt;script src=&quot;//res.wx.qq.com/open/js/jweixin-1.3.1.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>设置分享内容的代码如下：</p>\n<pre><code>wx.config({\n    debug: false,\n    appId: &apos;公众号的appid&apos;,\n    timestamp: &apos;时间戳&apos;,\n    nonceStr: &apos;随机字符串&apos;,\n    signature: &apos;签名&apos;,\n    jsApiList: [&apos;onMenuShareTimeline&apos;, &apos;onMenuShareAppMessage&apos;, &apos;onMenuShareQQ&apos;, &apos;onMenuShareWeibo&apos;, &apos;onMenuShareQZone&apos;, &apos;showOptionMenu&apos;, &apos;hideAllNonBaseMenuItem&apos;, &apos;showAllNonBaseMenuItem&apos;]\n});\n\nwx.ready(function() {\n    const share = {\n        title: &apos;分享标题（朋友圈只显示标题）&apos;,\n        desc: &apos;分享内容&apos;,\n        imgUrl: &apos;图片URL&apos;,\n        link: &apos;分享链接（最好是后台JS安全域名）&apos;,\n        success: function() {\n            hideMaskLayer();  // 分享成功，隐藏引导用户分享的浮层\n        },\n        cancel: function() {\n        }\n    };\n    wx.onMenuShareAppMessage(share);  // 微信好友\n    wx.onMenuShareTimeline(share);  // 朋友圈\n    wx.onMenuShareQQ(share);  // QQ\n    wx.onMenuShareQZone(share);  // QQ空间\n    wx.onMenuShareWeibo(share);  // 腾讯微博\n});\n</code></pre><p>其中wx.config中的参数由服务端得到，具体可参见微信的开发文档：<a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115\" target=\"_blank\" rel=\"external\">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115</a> 注意在公众号后台设置JS安全域名</p>\n<h4 id=\"qqtim的分享\"><a href=\"#QQ-TIM的分享\" class=\"headerlink\" title=\"QQ/TIM的分享\"></a>QQ/TIM的分享</h4><p>1 通过JS API分享</p>\n<p>QQ（以下无特殊说明TIM下同样有效）下也有设置分享内容的API，同样需要先引用JSBridge相关的文件：<tr script=\"\" src=\"//open.mobile.qq.com/sdk/qqapi.js\">&lt;/ script&gt;<br>设置分享内容的代码如下：</tr></p>\n<pre><code>const share = {\n    title: &apos;分享标题，最大45字节&apos;,\n    desc: &apos;分享内容，最大60字节&apos;,\n    image_url: &apos;图片URL&apos;,\n    share_url: &apos;分享链接&apos;\n};\nmqq.data.setShareInfo(share, callback);\n</code></pre><p>需要注意的是：分享链接长度不能超过120字节，并且必须跟页面URL同一个域名，否则设置不生效；分享的图片最小需要200 * 200，否则分享到QQ空间时会被过滤掉。<br>设置完分享内容后，可通过API调用唤起QQ的分享面板，免去引导的过程。</p>\n<pre><code>mqq.ui.showShareMenu();\n</code></pre><p>还有一种方法，QQ提供了监听点击分享平台的事件，当点击Native分享面板中的分享平台时，会触发此事件，QQ默认的分享行为将不再执行。代码如下：</p>\n<pre><code>mqq.ui.setOnShareHandler(function (platform) {\n    mqq.ui.shareMessage({\n        title: &apos;分享标题&apos;,\n        desc: &apos;分享内容&apos;,\n        share_type: platform,\n        share_url: &apos;分享链接&apos;,\n        image_url: &apos;图片URL&apos;,\n        sourceName: &apos;掌上理工大&apos;,\n        back: true\n    }, function() {\n    });\n});\n</code></pre><p>其中platform是分享平台类型，取值如下：</p>\n<pre><code>编号        分享平台\n0          QQ好友\n1          QQ空间\n2          微信好友\n3          微信朋友圈\n</code></pre><p>2 通过meta标签分享<br>QQ也支持通过设置meta标签定义分享内容。通过定义itemprop可设置分享内容，同时为了更好的兼容其它平台，我们也引入了Open Graph标准。代码如下：</p>\n<pre><code>&lt;meta itemprop=&quot;name&quot; property=&quot;og:title&quot; content=&quot;分享标题&quot;&gt;\n&lt;meta property=&quot;og:url&quot; content=&quot;分享链接&quot;&gt;\n&lt;meta itemprop=&quot;image&quot; property=&quot;og:image&quot; content=&quot;图片URL&quot;&gt;\n&lt;meta name=&quot;description&quot; itemprop=&quot;description&quot; property=&quot;og:description&quot; content=&quot;分享描述&quot;&gt;\n</code></pre><p>需要注意的是，meta标签需要是服务端渲染输出，通过js生成或修改无效。</p>\n<p>3 通过URL Scheme唤起QQ分享<br>还可以通过URL Scheme唤起QQ进行分享，该方法的好处在于可以在非QQ环境下唤起QQ实现分享，缺点在于不能设置分享图片。代码如下：</p>\n<pre><code>const share = {\n    title: &apos;分享标题&apos;,\n    desc: &apos;分享内容&apos;,\n    share_url: &apos;分享链接&apos;\n};\nconst url_scheme = &apos;//share/to_fri?src_type=web&amp;version=1&amp;file_type=news&amp;share_id=1103437993&amp;title=&apos; + Base64.encode(share.title) + &apos;&amp;thirdAppDisplayName=5o6M5LiK55CG5bel5aSn&amp;url=&apos; + Base64.encode(share.share_url) + &apos;&amp;description=&apos; + Base64.encode(share.desc);\nlocation.assign(&apos;mqqapi:&apos; + url_scheme);\nsetTimeout(function() {\n    location.assign(&apos;timapi:&apos; + url_scheme);\n}, 2000);\n</code></pre><p>其中分享的参数在拼入URL中时需要Base64编码。为了支持TIM下的分享，我们引入了延时函数，如果唤起QQ失败该定时器将会执行唤起TIM，唤起成功离开了此页面将不会执行。QQ和TIM均安装时优先唤起QQ。</p>\n<p>4 通过分享组件的URL实现<br>QQ空间提供了分享组件（可参见：<a href=\"https://connect.qq.com/intro/share），通过分析该组件可得到分享URL的参数。代码如下：\" target=\"_blank\" rel=\"external\">https://connect.qq.com/intro/share），通过分析该组件可得到分享URL的参数。代码如下：</a></p>\n<pre><code>const share = {\n    title: &apos;分享标题&apos;,\n    desc: &apos;分享内容&apos;,\n    image_url: [&apos;图片URL&apos;],\n    share_url: &apos;分享链接&apos;\n};\nlet image_urls = share.image_url.map(function(image) {\n    return encodeURIComponent(image);\n});\nlocation.replace(&apos;https://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?url=&apos; + encodeURIComponent(share.share_url) + &apos;&amp;site=xxxx&amp;title=&apos; + share.title + &apos;&amp;pics=&apos; + image_urls.join(&apos;|&apos;) + &apos;&amp;summary=&apos; + share.desc);\n</code></pre><p>其中可支持多图片的分享，图片URL用竖线分隔。该方法优点在于同样支持非QQ环境下的分享。非QQ下用户登录后即可分享，QQ下可免登直接分享。</p>\n<h4 id=\"微博的分享\"><a href=\"#微博的分享\" class=\"headerlink\" title=\"微博的分享\"></a>微博的分享</h4><p>1 通过分享组件的URL实现<br>微博同样提供了分享组件，通过分析URL可得到分享参数。代码如下：</p>\n<pre><code>const share = {\n    title: &apos;分享标题&apos;,\n    image_url: &apos;图片URL&apos;,\n    share_url: &apos;分享链接&apos;\n};\nlocation.replace(&apos;https://service.weibo.com/share/share.php?url=&apos; + encodeURIComponent(share.share_url) + &apos;&amp;title=&apos; + share.title + &apos;&amp;appkey=277159429&amp;&amp;ralateUid=1855112015&amp;pic=&apos; + share.image_url + &apos;&amp;searchPic=true&apos;);\n</code></pre><p>其中appKey参数可选，如果设置微博将会显示分享来源为key对应的应用名称（应用可在 <a href=\"https://open.weibo.com/\" target=\"_blank\" rel=\"external\">https://open.weibo.com/</a> 注册）；ralateUid参数可选，指定微博用户id，会在微博尾部at此用户；searchPic用于控制是否自动爬取页面的图片，和pic不共存。</p>\n<p>2 通过微博API自动发送微博<br>微博提供了API可通过服务端调用接口直接发送一条微博。</p>\n<pre><code>POST https://api.weibo.com/2/statuses/share.json\n</code></pre><p>参数如下：</p>\n<pre><code>参数            必选            类型及范围         说明编号\naccess_token    是               string           采用OAuth授权方式为必填参数，OAuth授权后获得。\nstatus          是               string           用户分享到微博的文本内容，必须URL Encode，文本中不能包含“#话题词#”，同时文本中必须包含至少一个分享的URL，且该URL的域名需要在后台设置。\npic             否               binary           用户分享到微博的图片，仅支持JPEG、GIF、PNG图片，上传图片大小限制为5M。上传图片时，POST方式提交请求，需要采用multipart/form-data编码方式。\nrip             否               string           开发者上报的操作用户真实IP，形如：211.156.0.1。\n</code></pre><p>具体可参见：<a href=\"http://open.weibo.com/wiki/2/statuses/share\" target=\"_blank\" rel=\"external\">微博开放平台</a></p>\n<p>3 通过JS API分享<br>微博同样有提供JS-SDK可供调用Native的方法，在使用前需要在微博开放平台申请轻应用，并设置安全域名。<br>使用微信的JS-SDK需要引入如下js文件：</p>\n<pre><code>&lt;script src=&quot;//tjs.sjs.sinajs.cn/open/thirdpart/js/jsapi/mobile.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>同样需要先设置初始化参数。</p>\n<pre><code>WeiboJS.init({\n    appkey : &apos;轻应用key&apos;,\n    debug: false,\n    timestamp: &apos;时间戳&apos;,\n    noncestr: &apos;随机字符串&apos;,\n    signature: &apos;签名&apos;,\n    scope: [&apos;openMenu&apos;, &apos;setMenuItems&apos;, &apos;menuItemSelected&apos;, &apos;setSharingContent&apos;]\n}, function() {\n});\n</code></pre><p>有3个关于分享的JS API可供使用。</p>\n<pre><code>openMenu\n</code></pre><p>该API可调起Native的分享面板。</p>\n<pre><code>WeiboJS.invoke(&apos;openMenu&apos;);\nsetSharingContent\n</code></pre><p>该API可设置分享的内容。</p>\n<pre><code>WeiboJS.invoke(&apos;openMenu&apos;, {\n    icon: share.title,\n    desc: share.desc,\n    icon: share.image_url\n});\n\ninvokeMenuItem\n</code></pre><p>该API可以直接触发分享面板中点击相应菜单项。</p>\n<pre><code>WeiboJS.invoke(&apos;invokeMenuItem&apos;, { \n    code: platform\n});\n</code></pre><p>其中platform是分享平台类型，取值如下：</p>\n<pre><code>编号            分享平台\n1001            微博\n1002            微博好友圈\n1003            微博私信\n1004            微信好友\n1005            微信朋友圈\n1006            微米好友\n1007            微米圈\n1008            来往（点点虫）好友\n1009            来往（点点虫）动态\n1010            QQ好友\n1011            QQ空间\n1101            短信\n2001            系统浏览器\n2002            复制链接\n</code></pre><p>通过使用API 1 + API 2（最佳）或API 2 + API 3即可实现分享。具体可参见微博的开发文档：<br><a href=\"http://open.weibo.com/wiki/%E8%BD%BB%E5%BA%94%E7%94%A8H5%E6%96%B0%E7%89%88JS\" target=\"_blank\" rel=\"external\">open.weibo.com/wiki/轻应用H5新…</a></p>\n<h4 id=\"支付宝的分享\"><a href=\"#支付宝的分享\" class=\"headerlink\" title=\"支付宝的分享\"></a>支付宝的分享</h4><p>支付宝同样提供了JS API，可以很方便的设置分享内容和唤起Native分享面板；不足之处在于不支持分享到QQ、微信等平台。<br>使用支付宝的JS-SDK需要引入如下js文件：</p>\n<pre><code>&lt;script src=&quot;//a.alipayobjects.com/g/h5-lib/alipayjsapi/3.0.6/alipayjsapi.inc.min.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>代码如下：</p>\n<pre><code>const share = {\n    title: &apos;分享标题&apos;,\n    content: &apos;分享内容&apos;,\n    image: &apos;图片URL&apos;,\n    url: &apos;分享链接&apos;,\n    captureScreen: false,\n    showToolBar: false\n};\nap.share(share, function() {\n});\n</code></pre><h4 id=\"uc浏览器的分享\"><a href=\"#UC浏览器的分享\" class=\"headerlink\" title=\"UC浏览器的分享\"></a>UC浏览器的分享</h4><p>UC浏览器也提供了JS API调用Native的分享，支持唤起分享面板和分享到具体平台。代码如下：</p>\n<pre><code>const share = {\n    title: &apos;分享标题&apos;,\n    desc: &apos;分享内容&apos;,\n    image_url: &apos;图片URL&apos;,\n    share_url: &apos;分享链接&apos;\n};\nconst isiOS = /(iPhone|iPad|iPod)/.test(navigator.userAgent);  // 判断应用平台\nif (isiOS) {\n    if (ucbrowser.web_shareEX) {\n        ucbrowser.web_shareEX(\n            JSON.stringify({\n                title: share.title,\n                content: share.desc,\n                sourceUrl: share.share_url,\n                imageUrl: share.image_url,\n                source: &apos;掌上理工大&apos;,\n                target: platform\n            })\n        )\n    } else {\n        ucbrowser.web_share(share.title, share.desc, share.share_url, platform, &apos;&apos;, &apos;掌上理工大&apos;, share.image_url);\n    }\n}\nelse ucweb.startRequest(&apos;shell.page_share&apos;, [share.title, share.desc, share.share_url, platform, &apos;&apos;, &apos;掌上理工大&apos;, share.image_url]);\n</code></pre><p>其中platform是分享平台类型，取值如下：</p>\n<p>Android编号           iOS编号               分享平台<br>‘WechatFriends’       ‘kWeixinFriend’      微信好友<br>‘WechatTimeline’      ‘kWeixin’            微信朋友圈<br>‘QQ’                  ‘kQQ’                QQ好友<br>‘Qzone’               ‘kQZone’             QQ空间<br>‘SinaWeibo’           ‘kSinaWeibo’         微博<br>undefined             undefined            分享面板</p>\n<h4 id=\"qq浏览器的分享\"><a href=\"#QQ浏览器的分享\" class=\"headerlink\" title=\"QQ浏览器的分享\"></a>QQ浏览器的分享</h4><p>QQ浏览器也提供了JS API调用Native的分享，同样支持唤起分享面板、生成二维码和分享到具体平台。<br>首先需要引入如下JS文件：</p>\n<pre><code>&lt;script src=&quot;//jsapi.qq.com/get?api=app.share&quot;&gt;&lt;/script&gt;\n</code></pre><p>代码如下：</p>\n<pre><code>browser.app.share({\n    title: share.title,\n    description: share.desc,\n    url: share.share_url,\n    img_url: share.image_url,\n    from: &apos;掌上理工大&apos;,\n    to_app: platform\n});\n</code></pre><p>其中platform是分享平台类型，取值如下：</p>\n<pre><code>编号        分享平台\n1           微信好友\n8           微信朋友圈\n4           QQ好友\n3           QQ空间\n11          微博\n5           更多\n7           生成二维码\n10          复制链接\nundefined   分享面板\n</code></pre><p>作者：Crazy_Urus<br>链接：<a href=\"https://juejin.im/post/5a61a8b86fb9a01cba42a742\" target=\"_blank\" rel=\"external\">https://juejin.im/post/5a61a8b86fb9a01cba42a742</a><br>来源：掘金</p>\n","site":{"data":{}},"excerpt":"<p>如何按照产品要求实现多平台下一致的分享效果，包括分享文案的动态生成，在没有Native的帮助下是比较困难的。下面总结了一套较为完整的分享方案。<br>","more":"</p>\n<h4 id=\"微信分享\"><a href=\"#微信分享\" class=\"headerlink\" title=\"微信分享\"></a>微信分享</h4><p>微信下的分享通过调用微信提供的JS-SDK和引导用户点击右上角完成。 使用微信的JS-SDK需要引入如下js文件：</p>\n<pre><code>&lt;script src=&quot;//res.wx.qq.com/open/js/jweixin-1.3.1.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>设置分享内容的代码如下：</p>\n<pre><code>wx.config({\n    debug: false,\n    appId: &apos;公众号的appid&apos;,\n    timestamp: &apos;时间戳&apos;,\n    nonceStr: &apos;随机字符串&apos;,\n    signature: &apos;签名&apos;,\n    jsApiList: [&apos;onMenuShareTimeline&apos;, &apos;onMenuShareAppMessage&apos;, &apos;onMenuShareQQ&apos;, &apos;onMenuShareWeibo&apos;, &apos;onMenuShareQZone&apos;, &apos;showOptionMenu&apos;, &apos;hideAllNonBaseMenuItem&apos;, &apos;showAllNonBaseMenuItem&apos;]\n});\n\nwx.ready(function() {\n    const share = {\n        title: &apos;分享标题（朋友圈只显示标题）&apos;,\n        desc: &apos;分享内容&apos;,\n        imgUrl: &apos;图片URL&apos;,\n        link: &apos;分享链接（最好是后台JS安全域名）&apos;,\n        success: function() {\n            hideMaskLayer();  // 分享成功，隐藏引导用户分享的浮层\n        },\n        cancel: function() {\n        }\n    };\n    wx.onMenuShareAppMessage(share);  // 微信好友\n    wx.onMenuShareTimeline(share);  // 朋友圈\n    wx.onMenuShareQQ(share);  // QQ\n    wx.onMenuShareQZone(share);  // QQ空间\n    wx.onMenuShareWeibo(share);  // 腾讯微博\n});\n</code></pre><p>其中wx.config中的参数由服务端得到，具体可参见微信的开发文档：<a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115\" target=\"_blank\" rel=\"external\">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115</a> 注意在公众号后台设置JS安全域名</p>\n<h4 id=\"QQ-TIM的分享\"><a href=\"#QQ-TIM的分享\" class=\"headerlink\" title=\"QQ/TIM的分享\"></a>QQ/TIM的分享</h4><p>1 通过JS API分享</p>\n<p>QQ（以下无特殊说明TIM下同样有效）下也有设置分享内容的API，同样需要先引用JSBridge相关的文件：<tr script=\"\" src=\"//open.mobile.qq.com/sdk/qqapi.js\">&lt;/ script&gt;<br>设置分享内容的代码如下：</tr></p>\n<pre><code>const share = {\n    title: &apos;分享标题，最大45字节&apos;,\n    desc: &apos;分享内容，最大60字节&apos;,\n    image_url: &apos;图片URL&apos;,\n    share_url: &apos;分享链接&apos;\n};\nmqq.data.setShareInfo(share, callback);\n</code></pre><p>需要注意的是：分享链接长度不能超过120字节，并且必须跟页面URL同一个域名，否则设置不生效；分享的图片最小需要200 * 200，否则分享到QQ空间时会被过滤掉。<br>设置完分享内容后，可通过API调用唤起QQ的分享面板，免去引导的过程。</p>\n<pre><code>mqq.ui.showShareMenu();\n</code></pre><p>还有一种方法，QQ提供了监听点击分享平台的事件，当点击Native分享面板中的分享平台时，会触发此事件，QQ默认的分享行为将不再执行。代码如下：</p>\n<pre><code>mqq.ui.setOnShareHandler(function (platform) {\n    mqq.ui.shareMessage({\n        title: &apos;分享标题&apos;,\n        desc: &apos;分享内容&apos;,\n        share_type: platform,\n        share_url: &apos;分享链接&apos;,\n        image_url: &apos;图片URL&apos;,\n        sourceName: &apos;掌上理工大&apos;,\n        back: true\n    }, function() {\n    });\n});\n</code></pre><p>其中platform是分享平台类型，取值如下：</p>\n<pre><code>编号        分享平台\n0          QQ好友\n1          QQ空间\n2          微信好友\n3          微信朋友圈\n</code></pre><p>2 通过meta标签分享<br>QQ也支持通过设置meta标签定义分享内容。通过定义itemprop可设置分享内容，同时为了更好的兼容其它平台，我们也引入了Open Graph标准。代码如下：</p>\n<pre><code>&lt;meta itemprop=&quot;name&quot; property=&quot;og:title&quot; content=&quot;分享标题&quot;&gt;\n&lt;meta property=&quot;og:url&quot; content=&quot;分享链接&quot;&gt;\n&lt;meta itemprop=&quot;image&quot; property=&quot;og:image&quot; content=&quot;图片URL&quot;&gt;\n&lt;meta name=&quot;description&quot; itemprop=&quot;description&quot; property=&quot;og:description&quot; content=&quot;分享描述&quot;&gt;\n</code></pre><p>需要注意的是，meta标签需要是服务端渲染输出，通过js生成或修改无效。</p>\n<p>3 通过URL Scheme唤起QQ分享<br>还可以通过URL Scheme唤起QQ进行分享，该方法的好处在于可以在非QQ环境下唤起QQ实现分享，缺点在于不能设置分享图片。代码如下：</p>\n<pre><code>const share = {\n    title: &apos;分享标题&apos;,\n    desc: &apos;分享内容&apos;,\n    share_url: &apos;分享链接&apos;\n};\nconst url_scheme = &apos;//share/to_fri?src_type=web&amp;version=1&amp;file_type=news&amp;share_id=1103437993&amp;title=&apos; + Base64.encode(share.title) + &apos;&amp;thirdAppDisplayName=5o6M5LiK55CG5bel5aSn&amp;url=&apos; + Base64.encode(share.share_url) + &apos;&amp;description=&apos; + Base64.encode(share.desc);\nlocation.assign(&apos;mqqapi:&apos; + url_scheme);\nsetTimeout(function() {\n    location.assign(&apos;timapi:&apos; + url_scheme);\n}, 2000);\n</code></pre><p>其中分享的参数在拼入URL中时需要Base64编码。为了支持TIM下的分享，我们引入了延时函数，如果唤起QQ失败该定时器将会执行唤起TIM，唤起成功离开了此页面将不会执行。QQ和TIM均安装时优先唤起QQ。</p>\n<p>4 通过分享组件的URL实现<br>QQ空间提供了分享组件（可参见：<a href=\"https://connect.qq.com/intro/share），通过分析该组件可得到分享URL的参数。代码如下：\" target=\"_blank\" rel=\"external\">https://connect.qq.com/intro/share），通过分析该组件可得到分享URL的参数。代码如下：</a></p>\n<pre><code>const share = {\n    title: &apos;分享标题&apos;,\n    desc: &apos;分享内容&apos;,\n    image_url: [&apos;图片URL&apos;],\n    share_url: &apos;分享链接&apos;\n};\nlet image_urls = share.image_url.map(function(image) {\n    return encodeURIComponent(image);\n});\nlocation.replace(&apos;https://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?url=&apos; + encodeURIComponent(share.share_url) + &apos;&amp;site=xxxx&amp;title=&apos; + share.title + &apos;&amp;pics=&apos; + image_urls.join(&apos;|&apos;) + &apos;&amp;summary=&apos; + share.desc);\n</code></pre><p>其中可支持多图片的分享，图片URL用竖线分隔。该方法优点在于同样支持非QQ环境下的分享。非QQ下用户登录后即可分享，QQ下可免登直接分享。</p>\n<h4 id=\"微博的分享\"><a href=\"#微博的分享\" class=\"headerlink\" title=\"微博的分享\"></a>微博的分享</h4><p>1 通过分享组件的URL实现<br>微博同样提供了分享组件，通过分析URL可得到分享参数。代码如下：</p>\n<pre><code>const share = {\n    title: &apos;分享标题&apos;,\n    image_url: &apos;图片URL&apos;,\n    share_url: &apos;分享链接&apos;\n};\nlocation.replace(&apos;https://service.weibo.com/share/share.php?url=&apos; + encodeURIComponent(share.share_url) + &apos;&amp;title=&apos; + share.title + &apos;&amp;appkey=277159429&amp;&amp;ralateUid=1855112015&amp;pic=&apos; + share.image_url + &apos;&amp;searchPic=true&apos;);\n</code></pre><p>其中appKey参数可选，如果设置微博将会显示分享来源为key对应的应用名称（应用可在 <a href=\"https://open.weibo.com/\" target=\"_blank\" rel=\"external\">https://open.weibo.com/</a> 注册）；ralateUid参数可选，指定微博用户id，会在微博尾部at此用户；searchPic用于控制是否自动爬取页面的图片，和pic不共存。</p>\n<p>2 通过微博API自动发送微博<br>微博提供了API可通过服务端调用接口直接发送一条微博。</p>\n<pre><code>POST https://api.weibo.com/2/statuses/share.json\n</code></pre><p>参数如下：</p>\n<pre><code>参数            必选            类型及范围         说明编号\naccess_token    是               string           采用OAuth授权方式为必填参数，OAuth授权后获得。\nstatus          是               string           用户分享到微博的文本内容，必须URL Encode，文本中不能包含“#话题词#”，同时文本中必须包含至少一个分享的URL，且该URL的域名需要在后台设置。\npic             否               binary           用户分享到微博的图片，仅支持JPEG、GIF、PNG图片，上传图片大小限制为5M。上传图片时，POST方式提交请求，需要采用multipart/form-data编码方式。\nrip             否               string           开发者上报的操作用户真实IP，形如：211.156.0.1。\n</code></pre><p>具体可参见：<a href=\"http://open.weibo.com/wiki/2/statuses/share\" target=\"_blank\" rel=\"external\">微博开放平台</a></p>\n<p>3 通过JS API分享<br>微博同样有提供JS-SDK可供调用Native的方法，在使用前需要在微博开放平台申请轻应用，并设置安全域名。<br>使用微信的JS-SDK需要引入如下js文件：</p>\n<pre><code>&lt;script src=&quot;//tjs.sjs.sinajs.cn/open/thirdpart/js/jsapi/mobile.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>同样需要先设置初始化参数。</p>\n<pre><code>WeiboJS.init({\n    appkey : &apos;轻应用key&apos;,\n    debug: false,\n    timestamp: &apos;时间戳&apos;,\n    noncestr: &apos;随机字符串&apos;,\n    signature: &apos;签名&apos;,\n    scope: [&apos;openMenu&apos;, &apos;setMenuItems&apos;, &apos;menuItemSelected&apos;, &apos;setSharingContent&apos;]\n}, function() {\n});\n</code></pre><p>有3个关于分享的JS API可供使用。</p>\n<pre><code>openMenu\n</code></pre><p>该API可调起Native的分享面板。</p>\n<pre><code>WeiboJS.invoke(&apos;openMenu&apos;);\nsetSharingContent\n</code></pre><p>该API可设置分享的内容。</p>\n<pre><code>WeiboJS.invoke(&apos;openMenu&apos;, {\n    icon: share.title,\n    desc: share.desc,\n    icon: share.image_url\n});\n\ninvokeMenuItem\n</code></pre><p>该API可以直接触发分享面板中点击相应菜单项。</p>\n<pre><code>WeiboJS.invoke(&apos;invokeMenuItem&apos;, { \n    code: platform\n});\n</code></pre><p>其中platform是分享平台类型，取值如下：</p>\n<pre><code>编号            分享平台\n1001            微博\n1002            微博好友圈\n1003            微博私信\n1004            微信好友\n1005            微信朋友圈\n1006            微米好友\n1007            微米圈\n1008            来往（点点虫）好友\n1009            来往（点点虫）动态\n1010            QQ好友\n1011            QQ空间\n1101            短信\n2001            系统浏览器\n2002            复制链接\n</code></pre><p>通过使用API 1 + API 2（最佳）或API 2 + API 3即可实现分享。具体可参见微博的开发文档：<br><a href=\"http://open.weibo.com/wiki/%E8%BD%BB%E5%BA%94%E7%94%A8H5%E6%96%B0%E7%89%88JS\" target=\"_blank\" rel=\"external\">open.weibo.com/wiki/轻应用H5新…</a></p>\n<h4 id=\"支付宝的分享\"><a href=\"#支付宝的分享\" class=\"headerlink\" title=\"支付宝的分享\"></a>支付宝的分享</h4><p>支付宝同样提供了JS API，可以很方便的设置分享内容和唤起Native分享面板；不足之处在于不支持分享到QQ、微信等平台。<br>使用支付宝的JS-SDK需要引入如下js文件：</p>\n<pre><code>&lt;script src=&quot;//a.alipayobjects.com/g/h5-lib/alipayjsapi/3.0.6/alipayjsapi.inc.min.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>代码如下：</p>\n<pre><code>const share = {\n    title: &apos;分享标题&apos;,\n    content: &apos;分享内容&apos;,\n    image: &apos;图片URL&apos;,\n    url: &apos;分享链接&apos;,\n    captureScreen: false,\n    showToolBar: false\n};\nap.share(share, function() {\n});\n</code></pre><h4 id=\"UC浏览器的分享\"><a href=\"#UC浏览器的分享\" class=\"headerlink\" title=\"UC浏览器的分享\"></a>UC浏览器的分享</h4><p>UC浏览器也提供了JS API调用Native的分享，支持唤起分享面板和分享到具体平台。代码如下：</p>\n<pre><code>const share = {\n    title: &apos;分享标题&apos;,\n    desc: &apos;分享内容&apos;,\n    image_url: &apos;图片URL&apos;,\n    share_url: &apos;分享链接&apos;\n};\nconst isiOS = /(iPhone|iPad|iPod)/.test(navigator.userAgent);  // 判断应用平台\nif (isiOS) {\n    if (ucbrowser.web_shareEX) {\n        ucbrowser.web_shareEX(\n            JSON.stringify({\n                title: share.title,\n                content: share.desc,\n                sourceUrl: share.share_url,\n                imageUrl: share.image_url,\n                source: &apos;掌上理工大&apos;,\n                target: platform\n            })\n        )\n    } else {\n        ucbrowser.web_share(share.title, share.desc, share.share_url, platform, &apos;&apos;, &apos;掌上理工大&apos;, share.image_url);\n    }\n}\nelse ucweb.startRequest(&apos;shell.page_share&apos;, [share.title, share.desc, share.share_url, platform, &apos;&apos;, &apos;掌上理工大&apos;, share.image_url]);\n</code></pre><p>其中platform是分享平台类型，取值如下：</p>\n<p>Android编号           iOS编号               分享平台<br>‘WechatFriends’       ‘kWeixinFriend’      微信好友<br>‘WechatTimeline’      ‘kWeixin’            微信朋友圈<br>‘QQ’                  ‘kQQ’                QQ好友<br>‘Qzone’               ‘kQZone’             QQ空间<br>‘SinaWeibo’           ‘kSinaWeibo’         微博<br>undefined             undefined            分享面板</p>\n<h4 id=\"QQ浏览器的分享\"><a href=\"#QQ浏览器的分享\" class=\"headerlink\" title=\"QQ浏览器的分享\"></a>QQ浏览器的分享</h4><p>QQ浏览器也提供了JS API调用Native的分享，同样支持唤起分享面板、生成二维码和分享到具体平台。<br>首先需要引入如下JS文件：</p>\n<pre><code>&lt;script src=&quot;//jsapi.qq.com/get?api=app.share&quot;&gt;&lt;/script&gt;\n</code></pre><p>代码如下：</p>\n<pre><code>browser.app.share({\n    title: share.title,\n    description: share.desc,\n    url: share.share_url,\n    img_url: share.image_url,\n    from: &apos;掌上理工大&apos;,\n    to_app: platform\n});\n</code></pre><p>其中platform是分享平台类型，取值如下：</p>\n<pre><code>编号        分享平台\n1           微信好友\n8           微信朋友圈\n4           QQ好友\n3           QQ空间\n11          微博\n5           更多\n7           生成二维码\n10          复制链接\nundefined   分享面板\n</code></pre><p>作者：Crazy_Urus<br>链接：<a href=\"https://juejin.im/post/5a61a8b86fb9a01cba42a742\" target=\"_blank\" rel=\"external\">https://juejin.im/post/5a61a8b86fb9a01cba42a742</a><br>来源：掘金</p>"},{"title":"JS与APP应用交互","_content":"\nJS打开app应用，如果不存在就去下载应用\n\n\t    var APPCommon = {\n        iphoneSchema: 'yr-hotblood://',\n        iphoneDownUrl: 'https://itunes.apple.com/us/app/%E5%8D%83%E5%BD%B1%E7%BB%BF%E8%89%B2%E6%B5%8F%E8%A7%88%E5%99%A8/id1192687716?l=zh&ls=1&mt=8',\n        androidSchema: 'yr-hotblood://',\n        androidDownUrl: 'http://share.rxpkapp.com/hotbloodpoker1.4.2.apk',\n        openApp: function () {\n            var this_ = this;\n            //微信\n            if (this_.isWeixin()) {\n                if (navigator.userAgent.match(/(iPhone|iPod|iPad);?/i)) {\n                    $('.wechat img').attr(\"src\", \"images/tips_weixin_ios.png\");\n                } else {\n                    $('.wechat img').attr(\"src\", \"images/tips_weixin_android.png\");\n                }\n                $(\".wechat\").css(\"height\", $(window).height());\n                $(\".wechat\").show();\n            } else {//非微信浏览器\n                var baseUrl = window.location.href.replace(/http:\\/\\/|https:\\/\\//, '');\n                if (navigator.userAgent.match(/(iPhone|iPod|iPad);?/i)) {\n                    var loadDateTime = new Date();\n                    window.setTimeout(function () {\n                        var timeOutDateTime = new Date();\n                        if (timeOutDateTime - loadDateTime < 5000) {\n                            window.location = this_.iphoneDownUrl;//ios下载地址\n                        } else {\n                            window.close();\n                        }\n                    }, 25);\n                    $('#js_downSrc').attr('href', this_.iphoneDownUrl);\n                    window.location = this.iphoneSchema + baseUrl;\n                } else if (navigator.userAgent.match(/android/i)) {\n                    try {\n                        var appKey=this.androidSchema + baseUrl;\n                            openApp(appKey,this.GetQueryString('refresh'));\n                    } catch (e) {\n                    }\n                    $('#js_downSrc').attr('href', this_.androidDownUrl);\n                }\n            }\n        },isWeixin: function () { //判断是否是微信\n            var ua = navigator.userAgent.toLowerCase();\n            if (ua.match(/MicroMessenger/i) == \"micromessenger\") {\n                return true;\n            } else {\n                return false;\n            }\n        },GetQueryString(t){\n            var n = new RegExp(\"(^|&)\" + t + \"=([^&]*)(&|$)\", \"i\"), e = window.location.search.substr(1).match(n);\n            return null != e ? decodeURI(e[2]) : null\n        }\n    };\n    APPCommon.openApp();\n    function openApp(appKey,refresh) {\n        var isRefresh = refresh; // 获得refresh参数\n        if(isRefresh == 1) {return}\n        window.location = appKey;\n        window.setTimeout(function () {\n            window.location.href += '?refresh=1' // 附加一个特殊参数，用来标识这次刷新不要再调用myapp:// 了\n        }, 500);\n    }\n\t\n注：iphoneSchema、androidSchema 需要开发在app中设置；android 应用不能直接打开，只能通过点击事件触发","source":"_posts/js-open-app.md","raw":"---\ntitle: JS与APP应用交互\ncategories: javascript\ntags: javascript\n---\n\nJS打开app应用，如果不存在就去下载应用\n\n\t    var APPCommon = {\n        iphoneSchema: 'yr-hotblood://',\n        iphoneDownUrl: 'https://itunes.apple.com/us/app/%E5%8D%83%E5%BD%B1%E7%BB%BF%E8%89%B2%E6%B5%8F%E8%A7%88%E5%99%A8/id1192687716?l=zh&ls=1&mt=8',\n        androidSchema: 'yr-hotblood://',\n        androidDownUrl: 'http://share.rxpkapp.com/hotbloodpoker1.4.2.apk',\n        openApp: function () {\n            var this_ = this;\n            //微信\n            if (this_.isWeixin()) {\n                if (navigator.userAgent.match(/(iPhone|iPod|iPad);?/i)) {\n                    $('.wechat img').attr(\"src\", \"images/tips_weixin_ios.png\");\n                } else {\n                    $('.wechat img').attr(\"src\", \"images/tips_weixin_android.png\");\n                }\n                $(\".wechat\").css(\"height\", $(window).height());\n                $(\".wechat\").show();\n            } else {//非微信浏览器\n                var baseUrl = window.location.href.replace(/http:\\/\\/|https:\\/\\//, '');\n                if (navigator.userAgent.match(/(iPhone|iPod|iPad);?/i)) {\n                    var loadDateTime = new Date();\n                    window.setTimeout(function () {\n                        var timeOutDateTime = new Date();\n                        if (timeOutDateTime - loadDateTime < 5000) {\n                            window.location = this_.iphoneDownUrl;//ios下载地址\n                        } else {\n                            window.close();\n                        }\n                    }, 25);\n                    $('#js_downSrc').attr('href', this_.iphoneDownUrl);\n                    window.location = this.iphoneSchema + baseUrl;\n                } else if (navigator.userAgent.match(/android/i)) {\n                    try {\n                        var appKey=this.androidSchema + baseUrl;\n                            openApp(appKey,this.GetQueryString('refresh'));\n                    } catch (e) {\n                    }\n                    $('#js_downSrc').attr('href', this_.androidDownUrl);\n                }\n            }\n        },isWeixin: function () { //判断是否是微信\n            var ua = navigator.userAgent.toLowerCase();\n            if (ua.match(/MicroMessenger/i) == \"micromessenger\") {\n                return true;\n            } else {\n                return false;\n            }\n        },GetQueryString(t){\n            var n = new RegExp(\"(^|&)\" + t + \"=([^&]*)(&|$)\", \"i\"), e = window.location.search.substr(1).match(n);\n            return null != e ? decodeURI(e[2]) : null\n        }\n    };\n    APPCommon.openApp();\n    function openApp(appKey,refresh) {\n        var isRefresh = refresh; // 获得refresh参数\n        if(isRefresh == 1) {return}\n        window.location = appKey;\n        window.setTimeout(function () {\n            window.location.href += '?refresh=1' // 附加一个特殊参数，用来标识这次刷新不要再调用myapp:// 了\n        }, 500);\n    }\n\t\n注：iphoneSchema、androidSchema 需要开发在app中设置；android 应用不能直接打开，只能通过点击事件触发","slug":"js-open-app","published":1,"date":"2017-06-20T01:19:58.047Z","updated":"2017-06-22T07:50:34.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjdxowb00012p8rraxpapfnp","content":"<p>JS打开app应用，如果不存在就去下载应用</p>\n<pre><code>    var APPCommon = {\n    iphoneSchema: &apos;yr-hotblood://&apos;,\n    iphoneDownUrl: &apos;https://itunes.apple.com/us/app/%E5%8D%83%E5%BD%B1%E7%BB%BF%E8%89%B2%E6%B5%8F%E8%A7%88%E5%99%A8/id1192687716?l=zh&amp;ls=1&amp;mt=8&apos;,\n    androidSchema: &apos;yr-hotblood://&apos;,\n    androidDownUrl: &apos;http://share.rxpkapp.com/hotbloodpoker1.4.2.apk&apos;,\n    openApp: function () {\n        var this_ = this;\n        //微信\n        if (this_.isWeixin()) {\n            if (navigator.userAgent.match(/(iPhone|iPod|iPad);?/i)) {\n                $(&apos;.wechat img&apos;).attr(&quot;src&quot;, &quot;images/tips_weixin_ios.png&quot;);\n            } else {\n                $(&apos;.wechat img&apos;).attr(&quot;src&quot;, &quot;images/tips_weixin_android.png&quot;);\n            }\n            $(&quot;.wechat&quot;).css(&quot;height&quot;, $(window).height());\n            $(&quot;.wechat&quot;).show();\n        } else {//非微信浏览器\n            var baseUrl = window.location.href.replace(/http:\\/\\/|https:\\/\\//, &apos;&apos;);\n            if (navigator.userAgent.match(/(iPhone|iPod|iPad);?/i)) {\n                var loadDateTime = new Date();\n                window.setTimeout(function () {\n                    var timeOutDateTime = new Date();\n                    if (timeOutDateTime - loadDateTime &lt; 5000) {\n                        window.location = this_.iphoneDownUrl;//ios下载地址\n                    } else {\n                        window.close();\n                    }\n                }, 25);\n                $(&apos;#js_downSrc&apos;).attr(&apos;href&apos;, this_.iphoneDownUrl);\n                window.location = this.iphoneSchema + baseUrl;\n            } else if (navigator.userAgent.match(/android/i)) {\n                try {\n                    var appKey=this.androidSchema + baseUrl;\n                        openApp(appKey,this.GetQueryString(&apos;refresh&apos;));\n                } catch (e) {\n                }\n                $(&apos;#js_downSrc&apos;).attr(&apos;href&apos;, this_.androidDownUrl);\n            }\n        }\n    },isWeixin: function () { //判断是否是微信\n        var ua = navigator.userAgent.toLowerCase();\n        if (ua.match(/MicroMessenger/i) == &quot;micromessenger&quot;) {\n            return true;\n        } else {\n            return false;\n        }\n    },GetQueryString(t){\n        var n = new RegExp(&quot;(^|&amp;)&quot; + t + &quot;=([^&amp;]*)(&amp;|$)&quot;, &quot;i&quot;), e = window.location.search.substr(1).match(n);\n        return null != e ? decodeURI(e[2]) : null\n    }\n};\nAPPCommon.openApp();\nfunction openApp(appKey,refresh) {\n    var isRefresh = refresh; // 获得refresh参数\n    if(isRefresh == 1) {return}\n    window.location = appKey;\n    window.setTimeout(function () {\n        window.location.href += &apos;?refresh=1&apos; // 附加一个特殊参数，用来标识这次刷新不要再调用myapp:// 了\n    }, 500);\n}\n</code></pre><p>注：iphoneSchema、androidSchema 需要开发在app中设置；android 应用不能直接打开，只能通过点击事件触发</p>\n","site":{"data":{}},"excerpt":"","more":"<p>JS打开app应用，如果不存在就去下载应用</p>\n<pre><code>    var APPCommon = {\n    iphoneSchema: &apos;yr-hotblood://&apos;,\n    iphoneDownUrl: &apos;https://itunes.apple.com/us/app/%E5%8D%83%E5%BD%B1%E7%BB%BF%E8%89%B2%E6%B5%8F%E8%A7%88%E5%99%A8/id1192687716?l=zh&amp;ls=1&amp;mt=8&apos;,\n    androidSchema: &apos;yr-hotblood://&apos;,\n    androidDownUrl: &apos;http://share.rxpkapp.com/hotbloodpoker1.4.2.apk&apos;,\n    openApp: function () {\n        var this_ = this;\n        //微信\n        if (this_.isWeixin()) {\n            if (navigator.userAgent.match(/(iPhone|iPod|iPad);?/i)) {\n                $(&apos;.wechat img&apos;).attr(&quot;src&quot;, &quot;images/tips_weixin_ios.png&quot;);\n            } else {\n                $(&apos;.wechat img&apos;).attr(&quot;src&quot;, &quot;images/tips_weixin_android.png&quot;);\n            }\n            $(&quot;.wechat&quot;).css(&quot;height&quot;, $(window).height());\n            $(&quot;.wechat&quot;).show();\n        } else {//非微信浏览器\n            var baseUrl = window.location.href.replace(/http:\\/\\/|https:\\/\\//, &apos;&apos;);\n            if (navigator.userAgent.match(/(iPhone|iPod|iPad);?/i)) {\n                var loadDateTime = new Date();\n                window.setTimeout(function () {\n                    var timeOutDateTime = new Date();\n                    if (timeOutDateTime - loadDateTime &lt; 5000) {\n                        window.location = this_.iphoneDownUrl;//ios下载地址\n                    } else {\n                        window.close();\n                    }\n                }, 25);\n                $(&apos;#js_downSrc&apos;).attr(&apos;href&apos;, this_.iphoneDownUrl);\n                window.location = this.iphoneSchema + baseUrl;\n            } else if (navigator.userAgent.match(/android/i)) {\n                try {\n                    var appKey=this.androidSchema + baseUrl;\n                        openApp(appKey,this.GetQueryString(&apos;refresh&apos;));\n                } catch (e) {\n                }\n                $(&apos;#js_downSrc&apos;).attr(&apos;href&apos;, this_.androidDownUrl);\n            }\n        }\n    },isWeixin: function () { //判断是否是微信\n        var ua = navigator.userAgent.toLowerCase();\n        if (ua.match(/MicroMessenger/i) == &quot;micromessenger&quot;) {\n            return true;\n        } else {\n            return false;\n        }\n    },GetQueryString(t){\n        var n = new RegExp(&quot;(^|&amp;)&quot; + t + &quot;=([^&amp;]*)(&amp;|$)&quot;, &quot;i&quot;), e = window.location.search.substr(1).match(n);\n        return null != e ? decodeURI(e[2]) : null\n    }\n};\nAPPCommon.openApp();\nfunction openApp(appKey,refresh) {\n    var isRefresh = refresh; // 获得refresh参数\n    if(isRefresh == 1) {return}\n    window.location = appKey;\n    window.setTimeout(function () {\n        window.location.href += &apos;?refresh=1&apos; // 附加一个特殊参数，用来标识这次刷新不要再调用myapp:// 了\n    }, 500);\n}\n</code></pre><p>注：iphoneSchema、androidSchema 需要开发在app中设置；android 应用不能直接打开，只能通过点击事件触发</p>\n"},{"title":"在ios桌面添加web站点图标及增加启动画面","_content":"\n设置全屏：\n\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\" black \" />\n    <meta name=\"apple-mobile-web-app-title\" content=\"应用名称\" />\n    <meta name=\"full-screen\" content=\"yes\">\n    <meta name=\"x5-fullscreen\" content=\"true\">\n    <meta name=\"applicable-device\" content=\"mobile\">\n\n添加图标到主屏幕：\n\n    <link rel=\"apple-touch-icon\" href=\"images/app/144x144.png\" />\n    <link rel=\"apple-touch-icon-precomposed\" ref=\"images/app/144x144.png\" />\n    <link rel=\"apple-touch-startup-image\" ref=\"images/app/144x144.png\" />\n\n添加启动界面：\n\n    <link rel=\"apple-touch-startup-image\" href=\"images/app/750x1294.png\" media=\"(device-width: 375px) and (-webkit-device-pixel-ratio: 2)\">\n    <link rel=\"apple-touch-startup-image\" href=\"images/app/1242x2148.png\" media=\"(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3)\">\n    <link rel=\"apple-touch-startup-image\" href=\"images/app/2048x1496.png\" sizes=\"2048x1496\" media=\"screen and (min-device-width:481px) and (max-device-width:1024px) and (orientation:landscape) and (-webkit-min-device-pixel-ratio: 2)\">  \n    <link rel=\"apple-touch-startup-image\" href=\"images/app/1536x2008.png\" sizes=\"1536x2008\" media=\"screen and (min-device-width:481px) and (max-device-width:1024px) and (orientation:portrait) and (-webkit-min-device-pixel-ratio: 2)\">  \n\n阻止iOS Web APP中点击链接跳转到Safari 浏览器新标签页：\n\n    <script>\n        if(('standalone' in window.navigator)&&window.navigator.standalone){\n            var noddy,remotes=false;\n            document.addEventListener('click',function(event){\n                    noddy=event.target;\n                    while(noddy.nodeName!=='A'&&noddy.nodeName!=='HTML') noddy=noddy.parentNode;\n                    if('href' in noddy&&noddy.href.indexOf('http')!==-1&&(noddy.href.indexOf(document.location.host)!==-1||remotes)){\n                            event.preventDefault();\n                            document.location.href=noddy.href;\n                    }\n            },false);\n        }\n    </script>","source":"_posts/web-app.md","raw":"---\ntitle: 在ios桌面添加web站点图标及增加启动画面\ncategories: web\ntags: [javascript]\n---\n\n设置全屏：\n\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\" black \" />\n    <meta name=\"apple-mobile-web-app-title\" content=\"应用名称\" />\n    <meta name=\"full-screen\" content=\"yes\">\n    <meta name=\"x5-fullscreen\" content=\"true\">\n    <meta name=\"applicable-device\" content=\"mobile\">\n\n添加图标到主屏幕：\n\n    <link rel=\"apple-touch-icon\" href=\"images/app/144x144.png\" />\n    <link rel=\"apple-touch-icon-precomposed\" ref=\"images/app/144x144.png\" />\n    <link rel=\"apple-touch-startup-image\" ref=\"images/app/144x144.png\" />\n\n添加启动界面：\n\n    <link rel=\"apple-touch-startup-image\" href=\"images/app/750x1294.png\" media=\"(device-width: 375px) and (-webkit-device-pixel-ratio: 2)\">\n    <link rel=\"apple-touch-startup-image\" href=\"images/app/1242x2148.png\" media=\"(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3)\">\n    <link rel=\"apple-touch-startup-image\" href=\"images/app/2048x1496.png\" sizes=\"2048x1496\" media=\"screen and (min-device-width:481px) and (max-device-width:1024px) and (orientation:landscape) and (-webkit-min-device-pixel-ratio: 2)\">  \n    <link rel=\"apple-touch-startup-image\" href=\"images/app/1536x2008.png\" sizes=\"1536x2008\" media=\"screen and (min-device-width:481px) and (max-device-width:1024px) and (orientation:portrait) and (-webkit-min-device-pixel-ratio: 2)\">  \n\n阻止iOS Web APP中点击链接跳转到Safari 浏览器新标签页：\n\n    <script>\n        if(('standalone' in window.navigator)&&window.navigator.standalone){\n            var noddy,remotes=false;\n            document.addEventListener('click',function(event){\n                    noddy=event.target;\n                    while(noddy.nodeName!=='A'&&noddy.nodeName!=='HTML') noddy=noddy.parentNode;\n                    if('href' in noddy&&noddy.href.indexOf('http')!==-1&&(noddy.href.indexOf(document.location.host)!==-1||remotes)){\n                            event.preventDefault();\n                            document.location.href=noddy.href;\n                    }\n            },false);\n        }\n    </script>","slug":"web-app","published":1,"date":"2018-04-03T02:35:36.549Z","updated":"2018-04-03T02:45:01.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjdxowb30015p8rr152htx18","content":"<p>设置全屏：</p>\n<pre><code>&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;\n&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot; black &quot; /&gt;\n&lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;应用名称&quot; /&gt;\n&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;\n&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;\n&lt;meta name=&quot;applicable-device&quot; content=&quot;mobile&quot;&gt;\n</code></pre><p>添加图标到主屏幕：</p>\n<pre><code>&lt;link rel=&quot;apple-touch-icon&quot; href=&quot;images/app/144x144.png&quot; /&gt;\n&lt;link rel=&quot;apple-touch-icon-precomposed&quot; ref=&quot;images/app/144x144.png&quot; /&gt;\n&lt;link rel=&quot;apple-touch-startup-image&quot; ref=&quot;images/app/144x144.png&quot; /&gt;\n</code></pre><p>添加启动界面：</p>\n<pre><code>&lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;images/app/750x1294.png&quot; media=&quot;(device-width: 375px) and (-webkit-device-pixel-ratio: 2)&quot;&gt;\n&lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;images/app/1242x2148.png&quot; media=&quot;(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3)&quot;&gt;\n&lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;images/app/2048x1496.png&quot; sizes=&quot;2048x1496&quot; media=&quot;screen and (min-device-width:481px) and (max-device-width:1024px) and (orientation:landscape) and (-webkit-min-device-pixel-ratio: 2)&quot;&gt;  \n&lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;images/app/1536x2008.png&quot; sizes=&quot;1536x2008&quot; media=&quot;screen and (min-device-width:481px) and (max-device-width:1024px) and (orientation:portrait) and (-webkit-min-device-pixel-ratio: 2)&quot;&gt;  \n</code></pre><p>阻止iOS Web APP中点击链接跳转到Safari 浏览器新标签页：</p>\n<pre><code>&lt;script&gt;\n    if((&apos;standalone&apos; in window.navigator)&amp;&amp;window.navigator.standalone){\n        var noddy,remotes=false;\n        document.addEventListener(&apos;click&apos;,function(event){\n                noddy=event.target;\n                while(noddy.nodeName!==&apos;A&apos;&amp;&amp;noddy.nodeName!==&apos;HTML&apos;) noddy=noddy.parentNode;\n                if(&apos;href&apos; in noddy&amp;&amp;noddy.href.indexOf(&apos;http&apos;)!==-1&amp;&amp;(noddy.href.indexOf(document.location.host)!==-1||remotes)){\n                        event.preventDefault();\n                        document.location.href=noddy.href;\n                }\n        },false);\n    }\n&lt;/script&gt;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>设置全屏：</p>\n<pre><code>&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;\n&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot; black &quot; /&gt;\n&lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;应用名称&quot; /&gt;\n&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;\n&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;\n&lt;meta name=&quot;applicable-device&quot; content=&quot;mobile&quot;&gt;\n</code></pre><p>添加图标到主屏幕：</p>\n<pre><code>&lt;link rel=&quot;apple-touch-icon&quot; href=&quot;images/app/144x144.png&quot; /&gt;\n&lt;link rel=&quot;apple-touch-icon-precomposed&quot; ref=&quot;images/app/144x144.png&quot; /&gt;\n&lt;link rel=&quot;apple-touch-startup-image&quot; ref=&quot;images/app/144x144.png&quot; /&gt;\n</code></pre><p>添加启动界面：</p>\n<pre><code>&lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;images/app/750x1294.png&quot; media=&quot;(device-width: 375px) and (-webkit-device-pixel-ratio: 2)&quot;&gt;\n&lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;images/app/1242x2148.png&quot; media=&quot;(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3)&quot;&gt;\n&lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;images/app/2048x1496.png&quot; sizes=&quot;2048x1496&quot; media=&quot;screen and (min-device-width:481px) and (max-device-width:1024px) and (orientation:landscape) and (-webkit-min-device-pixel-ratio: 2)&quot;&gt;  \n&lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;images/app/1536x2008.png&quot; sizes=&quot;1536x2008&quot; media=&quot;screen and (min-device-width:481px) and (max-device-width:1024px) and (orientation:portrait) and (-webkit-min-device-pixel-ratio: 2)&quot;&gt;  \n</code></pre><p>阻止iOS Web APP中点击链接跳转到Safari 浏览器新标签页：</p>\n<pre><code>&lt;script&gt;\n    if((&apos;standalone&apos; in window.navigator)&amp;&amp;window.navigator.standalone){\n        var noddy,remotes=false;\n        document.addEventListener(&apos;click&apos;,function(event){\n                noddy=event.target;\n                while(noddy.nodeName!==&apos;A&apos;&amp;&amp;noddy.nodeName!==&apos;HTML&apos;) noddy=noddy.parentNode;\n                if(&apos;href&apos; in noddy&amp;&amp;noddy.href.indexOf(&apos;http&apos;)!==-1&amp;&amp;(noddy.href.indexOf(document.location.host)!==-1||remotes)){\n                        event.preventDefault();\n                        document.location.href=noddy.href;\n                }\n        },false);\n    }\n&lt;/script&gt;\n</code></pre>"},{"title":"VSCode 前端开发必备插件","_content":"\nVisual Studio Code 是由微软开发的一款免费、跨平台的文本编辑器。由于其卓越的性能和丰富的功能，它很快就受到了大家的喜爱。\n\n1.Auto Close Tag： 标签自动补全\n\n2.Autoprefixer： css3前缀自动补全\n\n3.beautify： 代码格式化（js、css、html）\n\n4.cssrem： px、rem互转\n\n5.minify:  代码压缩，生成.min文件（js、css、html）\n\n6.One Dark Theme： 编辑器皮肤\n\n7.Open in Browser： 在浏览器中打开文件（仅限html文件）\n\n8.Path Intellisense： 路径自动提示\n\n9.vscode-svgviewer： svg图片查看器\n\n10.vscode-fileheader： 文件注释（顶部）\n\n11.vscode-icons： 文件图标\n\n12.html5 boilerplate: html文件模板\n\n13.Path Intellisense：文件路径提示\n\n正则匹配：空行 -- ^\\s*\\n     元素 -- ([^\"]*)","source":"_posts/vs-code-plugins.md","raw":"---\ntitle: VSCode 前端开发必备插件\ncategories: tools\ntags: [IDE]\n---\n\nVisual Studio Code 是由微软开发的一款免费、跨平台的文本编辑器。由于其卓越的性能和丰富的功能，它很快就受到了大家的喜爱。\n\n1.Auto Close Tag： 标签自动补全\n\n2.Autoprefixer： css3前缀自动补全\n\n3.beautify： 代码格式化（js、css、html）\n\n4.cssrem： px、rem互转\n\n5.minify:  代码压缩，生成.min文件（js、css、html）\n\n6.One Dark Theme： 编辑器皮肤\n\n7.Open in Browser： 在浏览器中打开文件（仅限html文件）\n\n8.Path Intellisense： 路径自动提示\n\n9.vscode-svgviewer： svg图片查看器\n\n10.vscode-fileheader： 文件注释（顶部）\n\n11.vscode-icons： 文件图标\n\n12.html5 boilerplate: html文件模板\n\n13.Path Intellisense：文件路径提示\n\n正则匹配：空行 -- ^\\s*\\n     元素 -- ([^\"]*)","slug":"vs-code-plugins","published":1,"date":"2017-10-11T08:13:06.502Z","updated":"2018-04-03T02:34:41.939Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjdxowbi001hp8rra2b8rmg3","content":"<p>Visual Studio Code 是由微软开发的一款免费、跨平台的文本编辑器。由于其卓越的性能和丰富的功能，它很快就受到了大家的喜爱。</p>\n<p>1.Auto Close Tag： 标签自动补全</p>\n<p>2.Autoprefixer： css3前缀自动补全</p>\n<p>3.beautify： 代码格式化（js、css、html）</p>\n<p>4.cssrem： px、rem互转</p>\n<p>5.minify:  代码压缩，生成.min文件（js、css、html）</p>\n<p>6.One Dark Theme： 编辑器皮肤</p>\n<p>7.Open in Browser： 在浏览器中打开文件（仅限html文件）</p>\n<p>8.Path Intellisense： 路径自动提示</p>\n<p>9.vscode-svgviewer： svg图片查看器</p>\n<p>10.vscode-fileheader： 文件注释（顶部）</p>\n<p>11.vscode-icons： 文件图标</p>\n<p>12.html5 boilerplate: html文件模板</p>\n<p>13.Path Intellisense：文件路径提示</p>\n<p>正则匹配：空行 – ^\\s<em>\\n     元素 – ([^”]</em>)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Visual Studio Code 是由微软开发的一款免费、跨平台的文本编辑器。由于其卓越的性能和丰富的功能，它很快就受到了大家的喜爱。</p>\n<p>1.Auto Close Tag： 标签自动补全</p>\n<p>2.Autoprefixer： css3前缀自动补全</p>\n<p>3.beautify： 代码格式化（js、css、html）</p>\n<p>4.cssrem： px、rem互转</p>\n<p>5.minify:  代码压缩，生成.min文件（js、css、html）</p>\n<p>6.One Dark Theme： 编辑器皮肤</p>\n<p>7.Open in Browser： 在浏览器中打开文件（仅限html文件）</p>\n<p>8.Path Intellisense： 路径自动提示</p>\n<p>9.vscode-svgviewer： svg图片查看器</p>\n<p>10.vscode-fileheader： 文件注释（顶部）</p>\n<p>11.vscode-icons： 文件图标</p>\n<p>12.html5 boilerplate: html文件模板</p>\n<p>13.Path Intellisense：文件路径提示</p>\n<p>正则匹配：空行 – ^\\s<em>\\n     元素 – ([^”]</em>)</p>\n"},{"title":"使用js-xlsx库，前端读取Excel报表文件","_content":"\nhtml代码：\n\n\t<input type=\"file\" id=\"excel-file\">\n\t<textarea id=\"js_con\" style=\"width: 800px;height: 800px\"></textarea>\n\t\nJS代码：\n\n    $('#excel-file').change(function(e) {\n        var files = e.target.files;\n\n        var fileReader = new FileReader();\n        fileReader.onload = function(ev) {\n            try {\n                var data = ev.target.result,\n                        workbook = XLSX.read(data, {\n                            type: 'binary'\n                        }), // 以二进制流方式读取得到整份excel表格对象\n                        persons = []; // 存储获取到的数据\n            } catch (e) {\n                console.log('文件类型不正确');\n                return;\n            }\n\n            // 表格的表格范围，可用于判断表头是否数量是否正确\n            var fromTo = '';\n            // 遍历每张表读取\n            for (var sheet in workbook.Sheets) {\n                if (workbook.Sheets.hasOwnProperty(sheet)) {\n                    fromTo = workbook.Sheets[sheet]['!ref'];\n                    console.log(fromTo);\n                    persons = persons.concat(XLSX.utils.sheet_to_json(workbook.Sheets[sheet]));\n                    // break; // 如果只取第一张表，就取消注释这行\n                }\n            }\n            console.log(persons);\n            $('#js_con').text(JSON.stringify(persons))\n        };\n\n        // 以二进制方式打开文件\n        fileReader.readAsBinaryString(files[0]);\n    });\n\t\n\t\n> 插件地址：[js-xlsx](https://github.com/SheetJS/js-xlsx)","source":"_posts/xlsx.md","raw":"---\ntitle: 使用js-xlsx库，前端读取Excel报表文件\ncategories: javascript\ntags: javascript\n---\n\nhtml代码：\n\n\t<input type=\"file\" id=\"excel-file\">\n\t<textarea id=\"js_con\" style=\"width: 800px;height: 800px\"></textarea>\n\t\nJS代码：\n\n    $('#excel-file').change(function(e) {\n        var files = e.target.files;\n\n        var fileReader = new FileReader();\n        fileReader.onload = function(ev) {\n            try {\n                var data = ev.target.result,\n                        workbook = XLSX.read(data, {\n                            type: 'binary'\n                        }), // 以二进制流方式读取得到整份excel表格对象\n                        persons = []; // 存储获取到的数据\n            } catch (e) {\n                console.log('文件类型不正确');\n                return;\n            }\n\n            // 表格的表格范围，可用于判断表头是否数量是否正确\n            var fromTo = '';\n            // 遍历每张表读取\n            for (var sheet in workbook.Sheets) {\n                if (workbook.Sheets.hasOwnProperty(sheet)) {\n                    fromTo = workbook.Sheets[sheet]['!ref'];\n                    console.log(fromTo);\n                    persons = persons.concat(XLSX.utils.sheet_to_json(workbook.Sheets[sheet]));\n                    // break; // 如果只取第一张表，就取消注释这行\n                }\n            }\n            console.log(persons);\n            $('#js_con').text(JSON.stringify(persons))\n        };\n\n        // 以二进制方式打开文件\n        fileReader.readAsBinaryString(files[0]);\n    });\n\t\n\t\n> 插件地址：[js-xlsx](https://github.com/SheetJS/js-xlsx)","slug":"xlsx","published":1,"date":"2017-07-12T00:40:25.475Z","updated":"2017-07-12T00:46:21.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjdxowbj001ip8rrwh119heb","content":"<p>html代码：</p>\n<pre><code>&lt;input type=&quot;file&quot; id=&quot;excel-file&quot;&gt;\n&lt;textarea id=&quot;js_con&quot; style=&quot;width: 800px;height: 800px&quot;&gt;&lt;/textarea&gt;\n</code></pre><p>JS代码：</p>\n<pre><code>$(&apos;#excel-file&apos;).change(function(e) {\n    var files = e.target.files;\n\n    var fileReader = new FileReader();\n    fileReader.onload = function(ev) {\n        try {\n            var data = ev.target.result,\n                    workbook = XLSX.read(data, {\n                        type: &apos;binary&apos;\n                    }), // 以二进制流方式读取得到整份excel表格对象\n                    persons = []; // 存储获取到的数据\n        } catch (e) {\n            console.log(&apos;文件类型不正确&apos;);\n            return;\n        }\n\n        // 表格的表格范围，可用于判断表头是否数量是否正确\n        var fromTo = &apos;&apos;;\n        // 遍历每张表读取\n        for (var sheet in workbook.Sheets) {\n            if (workbook.Sheets.hasOwnProperty(sheet)) {\n                fromTo = workbook.Sheets[sheet][&apos;!ref&apos;];\n                console.log(fromTo);\n                persons = persons.concat(XLSX.utils.sheet_to_json(workbook.Sheets[sheet]));\n                // break; // 如果只取第一张表，就取消注释这行\n            }\n        }\n        console.log(persons);\n        $(&apos;#js_con&apos;).text(JSON.stringify(persons))\n    };\n\n    // 以二进制方式打开文件\n    fileReader.readAsBinaryString(files[0]);\n});\n</code></pre><blockquote>\n<p>插件地址：<a href=\"https://github.com/SheetJS/js-xlsx\" target=\"_blank\" rel=\"external\">js-xlsx</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>html代码：</p>\n<pre><code>&lt;input type=&quot;file&quot; id=&quot;excel-file&quot;&gt;\n&lt;textarea id=&quot;js_con&quot; style=&quot;width: 800px;height: 800px&quot;&gt;&lt;/textarea&gt;\n</code></pre><p>JS代码：</p>\n<pre><code>$(&apos;#excel-file&apos;).change(function(e) {\n    var files = e.target.files;\n\n    var fileReader = new FileReader();\n    fileReader.onload = function(ev) {\n        try {\n            var data = ev.target.result,\n                    workbook = XLSX.read(data, {\n                        type: &apos;binary&apos;\n                    }), // 以二进制流方式读取得到整份excel表格对象\n                    persons = []; // 存储获取到的数据\n        } catch (e) {\n            console.log(&apos;文件类型不正确&apos;);\n            return;\n        }\n\n        // 表格的表格范围，可用于判断表头是否数量是否正确\n        var fromTo = &apos;&apos;;\n        // 遍历每张表读取\n        for (var sheet in workbook.Sheets) {\n            if (workbook.Sheets.hasOwnProperty(sheet)) {\n                fromTo = workbook.Sheets[sheet][&apos;!ref&apos;];\n                console.log(fromTo);\n                persons = persons.concat(XLSX.utils.sheet_to_json(workbook.Sheets[sheet]));\n                // break; // 如果只取第一张表，就取消注释这行\n            }\n        }\n        console.log(persons);\n        $(&apos;#js_con&apos;).text(JSON.stringify(persons))\n    };\n\n    // 以二进制方式打开文件\n    fileReader.readAsBinaryString(files[0]);\n});\n</code></pre><blockquote>\n<p>插件地址：<a href=\"https://github.com/SheetJS/js-xlsx\" target=\"_blank\" rel=\"external\">js-xlsx</a></p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjjdxow6x0008p8rr00c5qiol","category_id":"cjjdxow6u0005p8rr4ouezw6v","_id":"cjjdxow6z000bp8rrlus4ykd6"},{"post_id":"cjjdxow6p0003p8rrpc5mug9a","category_id":"cjjdxow6u0005p8rr4ouezw6v","_id":"cjjdxow70000ep8rrcfns26ny"},{"post_id":"cjjdxow6s0004p8rrrwj2r6y9","category_id":"cjjdxow6y0009p8rrn4qou726","_id":"cjjdxow71000gp8rrx3giln3c"},{"post_id":"cjjdxow6v0007p8rrw9bjrobi","category_id":"cjjdxow6u0005p8rr4ouezw6v","_id":"cjjdxow72000kp8rresg3wrqr"},{"post_id":"cjjdxow7h000rp8rrjdw7tx8v","category_id":"cjjdxow7i000sp8rrp0kfpw5i","_id":"cjjdxow7j000vp8rre8dft9sb"},{"post_id":"cjjdxowau000xp8rrkg0yd43p","category_id":"cjjdxow6u0005p8rr4ouezw6v","_id":"cjjdxowb20013p8rr4cgo9sl4"},{"post_id":"cjjdxoway0010p8rrzq3evwb9","category_id":"cjjdxow6u0005p8rr4ouezw6v","_id":"cjjdxowb50017p8rrfwe1mwd2"},{"post_id":"cjjdxowb00012p8rraxpapfnp","category_id":"cjjdxow6u0005p8rr4ouezw6v","_id":"cjjdxowb60019p8rrd0j06imr"},{"post_id":"cjjdxowat000wp8rrmxnae3ix","category_id":"cjjdxowaw000yp8rrftuzfz0v","_id":"cjjdxowb6001bp8rr2felzcxb"},{"post_id":"cjjdxowb30015p8rr152htx18","category_id":"cjjdxow7i000sp8rrp0kfpw5i","_id":"cjjdxowb7001ep8rrfphyptev"},{"post_id":"cjjdxowbj001ip8rrwh119heb","category_id":"cjjdxow6u0005p8rr4ouezw6v","_id":"cjjdxowbl001mp8rrs24oxtkl"},{"post_id":"cjjdxowbi001hp8rra2b8rmg3","category_id":"cjjdxowbk001jp8rrl7roeayl","_id":"cjjdxowbm001op8rrt8ec50pz"}],"PostTag":[{"post_id":"cjjdxow6p0003p8rrpc5mug9a","tag_id":"cjjdxow6v0006p8rrcbyqml7j","_id":"cjjdxow71000fp8rroyh1t2x1"},{"post_id":"cjjdxow6p0003p8rrpc5mug9a","tag_id":"cjjdxow6y000ap8rrv9fngpic","_id":"cjjdxow71000hp8rrvy70ypli"},{"post_id":"cjjdxow6s0004p8rrrwj2r6y9","tag_id":"cjjdxow6z000dp8rrl3jd27ez","_id":"cjjdxow72000jp8rry3951syw"},{"post_id":"cjjdxow6v0007p8rrw9bjrobi","tag_id":"cjjdxow6v0006p8rrcbyqml7j","_id":"cjjdxow74000np8rrbvw9n3k2"},{"post_id":"cjjdxow6v0007p8rrw9bjrobi","tag_id":"cjjdxow6y000ap8rrv9fngpic","_id":"cjjdxow74000op8rrr6hzq63k"},{"post_id":"cjjdxow6x0008p8rr00c5qiol","tag_id":"cjjdxow6v0006p8rrcbyqml7j","_id":"cjjdxow74000pp8rre74yo3x3"},{"post_id":"cjjdxow6x0008p8rr00c5qiol","tag_id":"cjjdxow6y000ap8rrv9fngpic","_id":"cjjdxow75000qp8rrdhvsxy6e"},{"post_id":"cjjdxow7h000rp8rrjdw7tx8v","tag_id":"cjjdxow7i000tp8rru0x9ougo","_id":"cjjdxow7j000up8rrhy76z5ns"},{"post_id":"cjjdxowau000xp8rrkg0yd43p","tag_id":"cjjdxow6v0006p8rrcbyqml7j","_id":"cjjdxowaz0011p8rr7mn2fx8d"},{"post_id":"cjjdxowau000xp8rrkg0yd43p","tag_id":"cjjdxow6y000ap8rrv9fngpic","_id":"cjjdxowb20014p8rr9xdenjwe"},{"post_id":"cjjdxoway0010p8rrzq3evwb9","tag_id":"cjjdxow6v0006p8rrcbyqml7j","_id":"cjjdxowb50018p8rrwsphjmud"},{"post_id":"cjjdxoway0010p8rrzq3evwb9","tag_id":"cjjdxow6y000ap8rrv9fngpic","_id":"cjjdxowb6001ap8rrtby44r3l"},{"post_id":"cjjdxowat000wp8rrmxnae3ix","tag_id":"cjjdxowax000zp8rrn3mqcfq6","_id":"cjjdxowb7001cp8rragn2fhnb"},{"post_id":"cjjdxowb00012p8rraxpapfnp","tag_id":"cjjdxowb40016p8rr3kwn0791","_id":"cjjdxowb7001fp8rrkbi1dlz8"},{"post_id":"cjjdxowb30015p8rr152htx18","tag_id":"cjjdxowb40016p8rr3kwn0791","_id":"cjjdxowb8001gp8rryfym36k7"},{"post_id":"cjjdxowbj001ip8rrwh119heb","tag_id":"cjjdxowb40016p8rr3kwn0791","_id":"cjjdxowbl001lp8rr4e7ii1us"},{"post_id":"cjjdxowbi001hp8rra2b8rmg3","tag_id":"cjjdxowbk001kp8rrzu2i11yj","_id":"cjjdxowbl001np8rrhzcn2vq7"}],"Tag":[{"name":"web","_id":"cjjdxow6v0006p8rrcbyqml7j"},{"name":"js","_id":"cjjdxow6y000ap8rrv9fngpic"},{"name":"my","_id":"cjjdxow6z000dp8rrl3jd27ez"},{"name":"node","_id":"cjjdxow7i000tp8rru0x9ougo"},{"name":"动漫","_id":"cjjdxowax000zp8rrn3mqcfq6"},{"name":"javascript","_id":"cjjdxowb40016p8rr3kwn0791"},{"name":"IDE","_id":"cjjdxowbk001kp8rrzu2i11yj"}]}}